
OtonomArabaPrototip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f08  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a090  0800a090  0000b090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0ac  0800a0ac  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0ac  0800a0ac  0000b0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b4  0800a0b4  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b4  0800a0b4  0000b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0b8  0800a0b8  0000b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a0bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000ad4  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b50  20000b50  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018da6  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ce5  00000000  00000000  00024e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015e0  00000000  00000000  00028b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010e2  00000000  00000000  0002a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b5e  00000000  00000000  0002b1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c741  00000000  00000000  0004fd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2841  00000000  00000000  0006c499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ecda  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005fd8  00000000  00000000  0013ed20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00144cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a078 	.word	0x0800a078

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a078 	.word	0x0800a078

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 ff87 	bl	80013d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f84b 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 fa55 	bl	8000974 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ca:	f000 f8b1 	bl	8000630 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004ce:	f000 f8dd 	bl	800068c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d2:	f009 f97b 	bl	80097cc <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004d6:	f000 f90f 	bl	80006f8 <MX_SPI2_Init>
  MX_TIM2_Init();
 80004da:	f000 f93f 	bl	800075c <MX_TIM2_Init>
  MX_TIM3_Init();
 80004de:	f000 f9d3 	bl	8000888 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SPI_Slave_Receive();
 80004e2:	f000 fb67 	bl	8000bb4 <SPI_Slave_Receive>

  //Timmerları başlatma
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004e6:	2100      	movs	r1, #0
 80004e8:	4819      	ldr	r0, [pc, #100]	@ (8000550 <main+0x98>)
 80004ea:	f005 f861 	bl	80055b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004ee:	2104      	movs	r1, #4
 80004f0:	4817      	ldr	r0, [pc, #92]	@ (8000550 <main+0x98>)
 80004f2:	f005 f85d 	bl	80055b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80004f6:	2108      	movs	r1, #8
 80004f8:	4815      	ldr	r0, [pc, #84]	@ (8000550 <main+0x98>)
 80004fa:	f005 f859 	bl	80055b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80004fe:	210c      	movs	r1, #12
 8000500:	4813      	ldr	r0, [pc, #76]	@ (8000550 <main+0x98>)
 8000502:	f005 f855 	bl	80055b0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000506:	2100      	movs	r1, #0
 8000508:	4812      	ldr	r0, [pc, #72]	@ (8000554 <main+0x9c>)
 800050a:	f005 f851 	bl	80055b0 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800050e:	f009 f983 	bl	8009818 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    READ_ProcessReceivedData(&rxData);
 8000512:	4811      	ldr	r0, [pc, #68]	@ (8000558 <main+0xa0>)
 8000514:	f000 fcb6 	bl	8000e84 <READ_ProcessReceivedData>

    int mode = READ_Get_Data(0);
 8000518:	2000      	movs	r0, #0
 800051a:	f000 fcc5 	bl	8000ea8 <READ_Get_Data>
 800051e:	60f8      	str	r0, [r7, #12]
    int speed = READ_Get_Data(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fcc1 	bl	8000ea8 <READ_Get_Data>
 8000526:	60b8      	str	r0, [r7, #8]
    int angle = READ_Get_Data(2);
 8000528:	2002      	movs	r0, #2
 800052a:	f000 fcbd 	bl	8000ea8 <READ_Get_Data>
 800052e:	6078      	str	r0, [r7, #4]

    ModeState modeState = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	70fb      	strb	r3, [r7, #3]

    switch(modeState){
 8000534:	78fb      	ldrb	r3, [r7, #3]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d002      	beq.n	8000540 <main+0x88>
 800053a:	2b01      	cmp	r3, #1
 800053c:	d005      	beq.n	800054a <main+0x92>
    		MOVENT_Control(250, 0);
    		break;
    	case AUTO:
    		break;
    	default:
    		break;
 800053e:	e005      	b.n	800054c <main+0x94>
    		MOVENT_Control(250, 0);
 8000540:	2100      	movs	r1, #0
 8000542:	20fa      	movs	r0, #250	@ 0xfa
 8000544:	f000 fc6f 	bl	8000e26 <MOVENT_Control>
    		break;
 8000548:	e000      	b.n	800054c <main+0x94>
    		break;
 800054a:	bf00      	nop
  {
 800054c:	e7df      	b.n	800050e <main+0x56>
 800054e:	bf00      	nop
 8000550:	200001a8 	.word	0x200001a8
 8000554:	200001f0 	.word	0x200001f0
 8000558:	20000098 	.word	0x20000098

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	@ 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	@ 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f009 fcf6 	bl	8009f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	@ (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	@ (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	@ (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	@ (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	@ (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d0:	23a8      	movs	r3, #168	@ 0xa8
 80005d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d8:	2307      	movs	r3, #7
 80005da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fced 	bl	8003fc0 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 fb06 	bl	8000bfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005f8:	2380      	movs	r3, #128	@ 0x80
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2102      	movs	r1, #2
 800060e:	4618      	mov	r0, r3
 8000610:	f003 ff4e 	bl	80044b0 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 faef 	bl	8000bfc <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000636:	4a13      	ldr	r2, [pc, #76]	@ (8000684 <MX_I2C1_Init+0x54>)
 8000638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_I2C1_Init+0x50>)
 800063c:	4a12      	ldr	r2, [pc, #72]	@ (8000688 <MX_I2C1_Init+0x58>)
 800063e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000640:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <MX_I2C1_Init+0x50>)
 800064e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b09      	ldr	r3, [pc, #36]	@ (8000680 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	@ (8000680 <MX_I2C1_Init+0x50>)
 800066e:	f003 fb63 	bl	8003d38 <HAL_I2C_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000678:	f000 fac0 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000a4 	.word	0x200000a4
 8000684:	40005400 	.word	0x40005400
 8000688:	000186a0 	.word	0x000186a0

0800068c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000690:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_SPI1_Init+0x64>)
 8000692:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <MX_SPI1_Init+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_SPI1_Init+0x64>)
 8000698:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800069c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006d8:	220a      	movs	r2, #10
 80006da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_SPI1_Init+0x64>)
 80006de:	f004 f8f3 	bl	80048c8 <HAL_SPI_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 fa88 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000f8 	.word	0x200000f8
 80006f4:	40013000 	.word	0x40013000

080006f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_SPI2_Init+0x5c>)
 80006fe:	4a16      	ldr	r2, [pc, #88]	@ (8000758 <MX_SPI2_Init+0x60>)
 8000700:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000702:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000708:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <MX_SPI2_Init+0x5c>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_SPI2_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_SPI2_Init+0x5c>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_SPI2_Init+0x5c>)
 800073a:	220a      	movs	r2, #10
 800073c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_SPI2_Init+0x5c>)
 8000740:	f004 f8c2 	bl	80048c8 <HAL_SPI_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 800074a:	f000 fa57 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000150 	.word	0x20000150
 8000758:	40003800 	.word	0x40003800

0800075c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08e      	sub	sp, #56	@ 0x38
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	f107 0320 	add.w	r3, r7, #32
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
 8000788:	615a      	str	r2, [r3, #20]
 800078a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800078c:	4b3d      	ldr	r3, [pc, #244]	@ (8000884 <MX_TIM2_Init+0x128>)
 800078e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000794:	4b3b      	ldr	r3, [pc, #236]	@ (8000884 <MX_TIM2_Init+0x128>)
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b3a      	ldr	r3, [pc, #232]	@ (8000884 <MX_TIM2_Init+0x128>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4199;
 80007a0:	4b38      	ldr	r3, [pc, #224]	@ (8000884 <MX_TIM2_Init+0x128>)
 80007a2:	f241 0267 	movw	r2, #4199	@ 0x1067
 80007a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b36      	ldr	r3, [pc, #216]	@ (8000884 <MX_TIM2_Init+0x128>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ae:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <MX_TIM2_Init+0x128>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b4:	4833      	ldr	r0, [pc, #204]	@ (8000884 <MX_TIM2_Init+0x128>)
 80007b6:	f004 fe52 	bl	800545e <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007c0:	f000 fa1c 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ce:	4619      	mov	r1, r3
 80007d0:	482c      	ldr	r0, [pc, #176]	@ (8000884 <MX_TIM2_Init+0x128>)
 80007d2:	f005 f967 	bl	8005aa4 <HAL_TIM_ConfigClockSource>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007dc:	f000 fa0e 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007e0:	4828      	ldr	r0, [pc, #160]	@ (8000884 <MX_TIM2_Init+0x128>)
 80007e2:	f004 fe8b 	bl	80054fc <HAL_TIM_PWM_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007ec:	f000 fa06 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f4:	2300      	movs	r3, #0
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4619      	mov	r1, r3
 80007fe:	4821      	ldr	r0, [pc, #132]	@ (8000884 <MX_TIM2_Init+0x128>)
 8000800:	f005 fd66 	bl	80062d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800080a:	f000 f9f7 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800080e:	2360      	movs	r3, #96	@ 0x60
 8000810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	4619      	mov	r1, r3
 8000824:	4817      	ldr	r0, [pc, #92]	@ (8000884 <MX_TIM2_Init+0x128>)
 8000826:	f005 f87b 	bl	8005920 <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000830:	f000 f9e4 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2204      	movs	r2, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4812      	ldr	r0, [pc, #72]	@ (8000884 <MX_TIM2_Init+0x128>)
 800083c:	f005 f870 	bl	8005920 <HAL_TIM_PWM_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000846:	f000 f9d9 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2208      	movs	r2, #8
 800084e:	4619      	mov	r1, r3
 8000850:	480c      	ldr	r0, [pc, #48]	@ (8000884 <MX_TIM2_Init+0x128>)
 8000852:	f005 f865 	bl	8005920 <HAL_TIM_PWM_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800085c:	f000 f9ce 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	220c      	movs	r2, #12
 8000864:	4619      	mov	r1, r3
 8000866:	4807      	ldr	r0, [pc, #28]	@ (8000884 <MX_TIM2_Init+0x128>)
 8000868:	f005 f85a 	bl	8005920 <HAL_TIM_PWM_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000872:	f000 f9c3 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000876:	4803      	ldr	r0, [pc, #12]	@ (8000884 <MX_TIM2_Init+0x128>)
 8000878:	f000 fc80 	bl	800117c <HAL_TIM_MspPostInit>

}
 800087c:	bf00      	nop
 800087e:	3738      	adds	r7, #56	@ 0x38
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200001a8 	.word	0x200001a8

08000888 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	@ 0x38
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	@ (800096c <MX_TIM3_Init+0xe4>)
 80008ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000970 <MX_TIM3_Init+0xe8>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80008be:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <MX_TIM3_Init+0xe4>)
 80008c0:	22a7      	movs	r2, #167	@ 0xa7
 80008c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b29      	ldr	r3, [pc, #164]	@ (800096c <MX_TIM3_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80008ca:	4b28      	ldr	r3, [pc, #160]	@ (800096c <MX_TIM3_Init+0xe4>)
 80008cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b26      	ldr	r3, [pc, #152]	@ (800096c <MX_TIM3_Init+0xe4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b24      	ldr	r3, [pc, #144]	@ (800096c <MX_TIM3_Init+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008de:	4823      	ldr	r0, [pc, #140]	@ (800096c <MX_TIM3_Init+0xe4>)
 80008e0:	f004 fdbd 	bl	800545e <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80008ea:	f000 f987 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481c      	ldr	r0, [pc, #112]	@ (800096c <MX_TIM3_Init+0xe4>)
 80008fc:	f005 f8d2 	bl	8005aa4 <HAL_TIM_ConfigClockSource>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000906:	f000 f979 	bl	8000bfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800090a:	4818      	ldr	r0, [pc, #96]	@ (800096c <MX_TIM3_Init+0xe4>)
 800090c:	f004 fdf6 	bl	80054fc <HAL_TIM_PWM_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000916:	f000 f971 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	4619      	mov	r1, r3
 8000928:	4810      	ldr	r0, [pc, #64]	@ (800096c <MX_TIM3_Init+0xe4>)
 800092a:	f005 fcd1 	bl	80062d0 <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000934:	f000 f962 	bl	8000bfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000938:	2360      	movs	r3, #96	@ 0x60
 800093a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <MX_TIM3_Init+0xe4>)
 8000950:	f004 ffe6 	bl	8005920 <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800095a:	f000 f94f 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800095e:	4803      	ldr	r0, [pc, #12]	@ (800096c <MX_TIM3_Init+0xe4>)
 8000960:	f000 fc0c 	bl	800117c <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3738      	adds	r7, #56	@ 0x38
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200001f0 	.word	0x200001f0
 8000970:	40000400 	.word	0x40000400

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	@ 0x30
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b83      	ldr	r3, [pc, #524]	@ (8000b9c <MX_GPIO_Init+0x228>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a82      	ldr	r2, [pc, #520]	@ (8000b9c <MX_GPIO_Init+0x228>)
 8000994:	f043 0310 	orr.w	r3, r3, #16
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b80      	ldr	r3, [pc, #512]	@ (8000b9c <MX_GPIO_Init+0x228>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0310 	and.w	r3, r3, #16
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b7c      	ldr	r3, [pc, #496]	@ (8000b9c <MX_GPIO_Init+0x228>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a7b      	ldr	r2, [pc, #492]	@ (8000b9c <MX_GPIO_Init+0x228>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b79      	ldr	r3, [pc, #484]	@ (8000b9c <MX_GPIO_Init+0x228>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b75      	ldr	r3, [pc, #468]	@ (8000b9c <MX_GPIO_Init+0x228>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a74      	ldr	r2, [pc, #464]	@ (8000b9c <MX_GPIO_Init+0x228>)
 80009cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b72      	ldr	r3, [pc, #456]	@ (8000b9c <MX_GPIO_Init+0x228>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b6e      	ldr	r3, [pc, #440]	@ (8000b9c <MX_GPIO_Init+0x228>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a6d      	ldr	r2, [pc, #436]	@ (8000b9c <MX_GPIO_Init+0x228>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b6b      	ldr	r3, [pc, #428]	@ (8000b9c <MX_GPIO_Init+0x228>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b67      	ldr	r3, [pc, #412]	@ (8000b9c <MX_GPIO_Init+0x228>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a66      	ldr	r2, [pc, #408]	@ (8000b9c <MX_GPIO_Init+0x228>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b64      	ldr	r3, [pc, #400]	@ (8000b9c <MX_GPIO_Init+0x228>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b60      	ldr	r3, [pc, #384]	@ (8000b9c <MX_GPIO_Init+0x228>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a5f      	ldr	r2, [pc, #380]	@ (8000b9c <MX_GPIO_Init+0x228>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b5d      	ldr	r3, [pc, #372]	@ (8000b9c <MX_GPIO_Init+0x228>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|RIGHT_FRONT_MOTOR_F_Pin|RIGHT_FRONT_MOTOR_B_Pin|RIGHT_BACK_MOTOR_F_Pin
 8000a32:	2200      	movs	r2, #0
 8000a34:	f647 7188 	movw	r1, #32648	@ 0x7f88
 8000a38:	4859      	ldr	r0, [pc, #356]	@ (8000ba0 <MX_GPIO_Init+0x22c>)
 8000a3a:	f001 f82f 	bl	8001a9c <HAL_GPIO_WritePin>
                          |RIGHT_BACK_MOTOR_B_Pin|LEFT_FRONT_MOTOR_F_Pin|LEFT_FRONT_MOTOR_B_Pin|LEFT_BACK_MOTOR_F_Pin
                          |LEFT_BACK_MOTOR_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2101      	movs	r1, #1
 8000a42:	4858      	ldr	r0, [pc, #352]	@ (8000ba4 <MX_GPIO_Init+0x230>)
 8000a44:	f001 f82a 	bl	8001a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000a4e:	4856      	ldr	r0, [pc, #344]	@ (8000ba8 <MX_GPIO_Init+0x234>)
 8000a50:	f001 f824 	bl	8001a9c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin RIGHT_FRONT_MOTOR_F_Pin RIGHT_FRONT_MOTOR_B_Pin RIGHT_BACK_MOTOR_F_Pin
                           RIGHT_BACK_MOTOR_B_Pin LEFT_FRONT_MOTOR_F_Pin LEFT_FRONT_MOTOR_B_Pin LEFT_BACK_MOTOR_F_Pin
                           LEFT_BACK_MOTOR_B_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|RIGHT_FRONT_MOTOR_F_Pin|RIGHT_FRONT_MOTOR_B_Pin|RIGHT_BACK_MOTOR_F_Pin
 8000a54:	f647 7388 	movw	r3, #32648	@ 0x7f88
 8000a58:	61fb      	str	r3, [r7, #28]
                          |RIGHT_BACK_MOTOR_B_Pin|LEFT_FRONT_MOTOR_F_Pin|LEFT_FRONT_MOTOR_B_Pin|LEFT_BACK_MOTOR_F_Pin
                          |LEFT_BACK_MOTOR_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	484c      	ldr	r0, [pc, #304]	@ (8000ba0 <MX_GPIO_Init+0x22c>)
 8000a6e:	f000 fe79 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4846      	ldr	r0, [pc, #280]	@ (8000ba4 <MX_GPIO_Init+0x230>)
 8000a8a:	f000 fe6b 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	483e      	ldr	r0, [pc, #248]	@ (8000ba4 <MX_GPIO_Init+0x230>)
 8000aaa:	f000 fe5b 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	483a      	ldr	r0, [pc, #232]	@ (8000bac <MX_GPIO_Init+0x238>)
 8000ac4:	f000 fe4e 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad8:	2306      	movs	r3, #6
 8000ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4832      	ldr	r0, [pc, #200]	@ (8000bac <MX_GPIO_Init+0x238>)
 8000ae4:	f000 fe3e 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	482d      	ldr	r0, [pc, #180]	@ (8000bb0 <MX_GPIO_Init+0x23c>)
 8000afc:	f000 fe32 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b12:	2305      	movs	r3, #5
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4824      	ldr	r0, [pc, #144]	@ (8000bb0 <MX_GPIO_Init+0x23c>)
 8000b1e:	f000 fe21 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b22:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b26:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481b      	ldr	r0, [pc, #108]	@ (8000ba8 <MX_GPIO_Init+0x234>)
 8000b3c:	f000 fe12 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b40:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b52:	2306      	movs	r3, #6
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4811      	ldr	r0, [pc, #68]	@ (8000ba4 <MX_GPIO_Init+0x230>)
 8000b5e:	f000 fe01 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b62:	2320      	movs	r3, #32
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_GPIO_Init+0x234>)
 8000b76:	f000 fdf5 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b7e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <MX_GPIO_Init+0x22c>)
 8000b90:	f000 fde8 	bl	8001764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b94:	bf00      	nop
 8000b96:	3730      	adds	r7, #48	@ 0x30
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40020800 	.word	0x40020800
 8000ba8:	40020c00 	.word	0x40020c00
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <SPI_Slave_Receive>:

/* USER CODE BEGIN 4 */
uint8_t rxData[10];  // Alınacak veri için bir buffer

void SPI_Slave_Receive(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    // Veri alımına başlamak için interrupt'ı başlatıyoruz
    if (HAL_SPI_Receive_IT(&hspi2, rxData, sizeof(rxData)) != HAL_OK)
 8000bb8:	220a      	movs	r2, #10
 8000bba:	4905      	ldr	r1, [pc, #20]	@ (8000bd0 <SPI_Slave_Receive+0x1c>)
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <SPI_Slave_Receive+0x20>)
 8000bbe:	f003 ff0d 	bl	80049dc <HAL_SPI_Receive_IT>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SPI_Slave_Receive+0x18>
    {
        // Hata durumu, veri alınamadı
        Error_Handler();
 8000bc8:	f000 f818 	bl	8000bfc <Error_Handler>
    }
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000098 	.word	0x20000098
 8000bd4:	20000150 	.word	0x20000150

08000bd8 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_SPI_RxCpltCallback+0x20>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_SPI_RxCpltCallback+0x16>
    {
        // Yeni veri almak için SPI slave'ı tekrar başlatabilirsiniz
        SPI_Slave_Receive();
 8000bea:	f7ff ffe3 	bl	8000bb4 <SPI_Slave_Receive>
    }
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40003800 	.word	0x40003800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <Error_Handler+0x8>

08000c08 <motorController>:
#include "movent.h"

void motorController(int power){
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, power);
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <motorController+0x34>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, power);
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <motorController+0x34>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, power);
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <motorController+0x34>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, power);
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <motorController+0x34>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	200001a8 	.word	0x200001a8

08000c40 <directionController>:

void directionController(int dir){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	if(dir == 1){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d14f      	bne.n	8000cee <directionController+0xae>
		HAL_GPIO_WritePin(RIGHT_FRONT_MOTOR_F_GPIO_Port, RIGHT_FRONT_MOTOR_F_Pin, dir);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	4851      	ldr	r0, [pc, #324]	@ (8000d9c <directionController+0x15c>)
 8000c58:	f000 ff20 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_BACK_MOTOR_F_GPIO_Port, RIGHT_BACK_MOTOR_F_Pin, dir);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c66:	484d      	ldr	r0, [pc, #308]	@ (8000d9c <directionController+0x15c>)
 8000c68:	f000 ff18 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_FRONT_MOTOR_F_GPIO_Port, LEFT_FRONT_MOTOR_F_Pin, dir);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c76:	4849      	ldr	r0, [pc, #292]	@ (8000d9c <directionController+0x15c>)
 8000c78:	f000 ff10 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_BACK_MOTOR_F_GPIO_Port, LEFT_BACK_MOTOR_F_Pin, dir);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c86:	4845      	ldr	r0, [pc, #276]	@ (8000d9c <directionController+0x15c>)
 8000c88:	f000 ff08 	bl	8001a9c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RIGHT_FRONT_MOTOR_B_GPIO_Port, RIGHT_FRONT_MOTOR_B_Pin, !dir);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	bf0c      	ite	eq
 8000c92:	2301      	moveq	r3, #1
 8000c94:	2300      	movne	r3, #0
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9e:	483f      	ldr	r0, [pc, #252]	@ (8000d9c <directionController+0x15c>)
 8000ca0:	f000 fefc 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_BACK_MOTOR_B_GPIO_Port, RIGHT_BACK_MOTOR_B_Pin, !dir);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bf0c      	ite	eq
 8000caa:	2301      	moveq	r3, #1
 8000cac:	2300      	movne	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cb6:	4839      	ldr	r0, [pc, #228]	@ (8000d9c <directionController+0x15c>)
 8000cb8:	f000 fef0 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_FRONT_MOTOR_B_GPIO_Port, LEFT_FRONT_MOTOR_B_Pin, !dir);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bf0c      	ite	eq
 8000cc2:	2301      	moveq	r3, #1
 8000cc4:	2300      	movne	r3, #0
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	4833      	ldr	r0, [pc, #204]	@ (8000d9c <directionController+0x15c>)
 8000cd0:	f000 fee4 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_BACK_MOTOR_B_GPIO_Port, LEFT_BACK_MOTOR_B_Pin, !dir);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bf0c      	ite	eq
 8000cda:	2301      	moveq	r3, #1
 8000cdc:	2300      	movne	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	482d      	ldr	r0, [pc, #180]	@ (8000d9c <directionController+0x15c>)
 8000ce8:	f000 fed8 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_FRONT_MOTOR_B_GPIO_Port, RIGHT_FRONT_MOTOR_B_Pin, dir);
		HAL_GPIO_WritePin(RIGHT_BACK_MOTOR_B_GPIO_Port, RIGHT_BACK_MOTOR_B_Pin, dir);
		HAL_GPIO_WritePin(LEFT_FRONT_MOTOR_B_GPIO_Port, LEFT_FRONT_MOTOR_B_Pin, dir);
		HAL_GPIO_WritePin(LEFT_BACK_MOTOR_B_GPIO_Port, LEFT_BACK_MOTOR_B_Pin, dir);
	}
}
 8000cec:	e051      	b.n	8000d92 <directionController+0x152>
	else if(dir == 0){
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <directionController+0x152>
		HAL_GPIO_WritePin(RIGHT_FRONT_MOTOR_F_GPIO_Port, RIGHT_FRONT_MOTOR_F_Pin, !dir);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bf0c      	ite	eq
 8000cfa:	2301      	moveq	r3, #1
 8000cfc:	2300      	movne	r3, #0
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	461a      	mov	r2, r3
 8000d02:	2180      	movs	r1, #128	@ 0x80
 8000d04:	4825      	ldr	r0, [pc, #148]	@ (8000d9c <directionController+0x15c>)
 8000d06:	f000 fec9 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_BACK_MOTOR_F_GPIO_Port, RIGHT_BACK_MOTOR_F_Pin, !dir);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bf0c      	ite	eq
 8000d10:	2301      	moveq	r3, #1
 8000d12:	2300      	movne	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d1c:	481f      	ldr	r0, [pc, #124]	@ (8000d9c <directionController+0x15c>)
 8000d1e:	f000 febd 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_FRONT_MOTOR_F_GPIO_Port, LEFT_FRONT_MOTOR_F_Pin, !dir);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf0c      	ite	eq
 8000d28:	2301      	moveq	r3, #1
 8000d2a:	2300      	movne	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
 8000d30:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <directionController+0x15c>)
 8000d36:	f000 feb1 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_BACK_MOTOR_F_GPIO_Port, LEFT_BACK_MOTOR_F_Pin, !dir);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	bf0c      	ite	eq
 8000d40:	2301      	moveq	r3, #1
 8000d42:	2300      	movne	r3, #0
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d4c:	4813      	ldr	r0, [pc, #76]	@ (8000d9c <directionController+0x15c>)
 8000d4e:	f000 fea5 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_FRONT_MOTOR_B_GPIO_Port, RIGHT_FRONT_MOTOR_B_Pin, dir);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d5c:	480f      	ldr	r0, [pc, #60]	@ (8000d9c <directionController+0x15c>)
 8000d5e:	f000 fe9d 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RIGHT_BACK_MOTOR_B_GPIO_Port, RIGHT_BACK_MOTOR_B_Pin, dir);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <directionController+0x15c>)
 8000d6e:	f000 fe95 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_FRONT_MOTOR_B_GPIO_Port, LEFT_FRONT_MOTOR_B_Pin, dir);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <directionController+0x15c>)
 8000d7e:	f000 fe8d 	bl	8001a9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LEFT_BACK_MOTOR_B_GPIO_Port, LEFT_BACK_MOTOR_B_Pin, dir);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d8c:	4803      	ldr	r0, [pc, #12]	@ (8000d9c <directionController+0x15c>)
 8000d8e:	f000 fe85 	bl	8001a9c <HAL_GPIO_WritePin>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <steeringController>:

void steeringController(int power){
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, power);
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <steeringController+0x1c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	200001f0 	.word	0x200001f0

08000dc0 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	683a      	ldr	r2, [r7, #0]
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	fb03 f202 	mul.w	r2, r3, r2
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1acb      	subs	r3, r1, r3
 8000de4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	4413      	add	r3, r2
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <getAngleToPower>:

int getAngleToPower(int angle){
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if(angle > 0){
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	dd01      	ble.n	8000e0a <getAngleToPower+0x12>
		return 250;
 8000e06:	23fa      	movs	r3, #250	@ 0xfa
 8000e08:	e007      	b.n	8000e1a <getAngleToPower+0x22>
	}
	else if(angle < 0){
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	da02      	bge.n	8000e16 <getAngleToPower+0x1e>
		return 1250;
 8000e10:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 8000e14:	e001      	b.n	8000e1a <getAngleToPower+0x22>
	}
	return 575;
 8000e16:	f240 233f 	movw	r3, #575	@ 0x23f
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <MOVENT_Control>:

void MOVENT_Control(int speed, int angle){
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b088      	sub	sp, #32
 8000e2a:	af02      	add	r7, sp, #8
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
	int dir = (speed > 0) ? 1 : (speed < 0 ? 0 : 1);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	dc02      	bgt.n	8000e3c <MOVENT_Control+0x16>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db01      	blt.n	8000e40 <MOVENT_Control+0x1a>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <MOVENT_Control+0x1c>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
	int power = map(abs(speed), 0, 250, 3000, 4200);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8000e4a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8000e4e:	f241 0368 	movw	r3, #4200	@ 0x1068
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000e58:	22fa      	movs	r2, #250	@ 0xfa
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f7ff ffb0 	bl	8000dc0 <map>
 8000e60:	6138      	str	r0, [r7, #16]
	int servoPower= getAngleToPower(angle);
 8000e62:	6838      	ldr	r0, [r7, #0]
 8000e64:	f7ff ffc8 	bl	8000df8 <getAngleToPower>
 8000e68:	60f8      	str	r0, [r7, #12]

	directionController(dir);
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff fee8 	bl	8000c40 <directionController>
	motorController(power);
 8000e70:	6938      	ldr	r0, [r7, #16]
 8000e72:	f7ff fec9 	bl	8000c08 <motorController>
	steeringController(servoPower);
 8000e76:	68f8      	ldr	r0, [r7, #12]
 8000e78:	f7ff ff92 	bl	8000da0 <steeringController>
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <READ_ProcessReceivedData>:
#include "readdata.h"
int solutionData[3];

void READ_ProcessReceivedData(int *data){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    memcpy(solutionData, data, sizeof(&data));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <READ_ProcessReceivedData+0x20>)
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000238 	.word	0x20000238

08000ea8 <READ_Get_Data>:

int READ_Get_Data(int index){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	return solutionData[index];
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <READ_Get_Data+0x1c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	20000238 	.word	0x20000238

08000ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <HAL_MspInit+0x4c>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f14 <HAL_MspInit+0x4c>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	603b      	str	r3, [r7, #0]
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <HAL_MspInit+0x4c>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	4a08      	ldr	r2, [pc, #32]	@ (8000f14 <HAL_MspInit+0x4c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000efa:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f06:	2007      	movs	r0, #7
 8000f08:	f000 fbc8 	bl	800169c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40023800 	.word	0x40023800

08000f18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	@ 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a19      	ldr	r2, [pc, #100]	@ (8000f9c <HAL_I2C_MspInit+0x84>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d12c      	bne.n	8000f94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b18      	ldr	r3, [pc, #96]	@ (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a17      	ldr	r2, [pc, #92]	@ (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f56:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <HAL_I2C_MspInit+0x8c>)
 8000f74:	f000 fbf6 	bl	8001764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_I2C_MspInit+0x88>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	@ 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a45      	ldr	r2, [pc, #276]	@ (80010dc <HAL_SPI_MspInit+0x134>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12c      	bne.n	8001024 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
 8000fce:	4b44      	ldr	r3, [pc, #272]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	4a43      	ldr	r2, [pc, #268]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8000fd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fda:	4b41      	ldr	r3, [pc, #260]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	4b3d      	ldr	r3, [pc, #244]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a3c      	ldr	r2, [pc, #240]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001002:	23e0      	movs	r3, #224	@ 0xe0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001012:	2305      	movs	r3, #5
 8001014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	4831      	ldr	r0, [pc, #196]	@ (80010e4 <HAL_SPI_MspInit+0x13c>)
 800101e:	f000 fba1 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001022:	e057      	b.n	80010d4 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a2f      	ldr	r2, [pc, #188]	@ (80010e8 <HAL_SPI_MspInit+0x140>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d152      	bne.n	80010d4 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b2b      	ldr	r3, [pc, #172]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001036:	4a2a      	ldr	r2, [pc, #168]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8001038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103c:	6413      	str	r3, [r2, #64]	@ 0x40
 800103e:	4b28      	ldr	r3, [pc, #160]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b24      	ldr	r3, [pc, #144]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4a23      	ldr	r2, [pc, #140]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b1d      	ldr	r3, [pc, #116]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a1c      	ldr	r2, [pc, #112]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <HAL_SPI_MspInit+0x138>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001082:	2304      	movs	r3, #4
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001092:	2305      	movs	r3, #5
 8001094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <HAL_SPI_MspInit+0x144>)
 800109e:	f000 fb61 	bl	8001764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80010a2:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010b4:	2305      	movs	r3, #5
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <HAL_SPI_MspInit+0x148>)
 80010c0:	f000 fb50 	bl	8001764 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2100      	movs	r1, #0
 80010c8:	2024      	movs	r0, #36	@ 0x24
 80010ca:	f000 faf2 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80010ce:	2024      	movs	r0, #36	@ 0x24
 80010d0:	f000 fb0b 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 80010d4:	bf00      	nop
 80010d6:	3730      	adds	r7, #48	@ 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40013000 	.word	0x40013000
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40003800 	.word	0x40003800
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020400 	.word	0x40020400

080010f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001104:	d116      	bne.n	8001134 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_TIM_Base_MspInit+0x80>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <HAL_TIM_Base_MspInit+0x80>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_TIM_Base_MspInit+0x80>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	201c      	movs	r0, #28
 8001128:	f000 fac3 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800112c:	201c      	movs	r0, #28
 800112e:	f000 fadc 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001132:	e01a      	b.n	800116a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <HAL_TIM_Base_MspInit+0x84>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d115      	bne.n	800116a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b0c      	ldr	r3, [pc, #48]	@ (8001174 <HAL_TIM_Base_MspInit+0x80>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	4a0b      	ldr	r2, [pc, #44]	@ (8001174 <HAL_TIM_Base_MspInit+0x80>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6413      	str	r3, [r2, #64]	@ 0x40
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <HAL_TIM_Base_MspInit+0x80>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	201d      	movs	r0, #29
 8001160:	f000 faa7 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001164:	201d      	movs	r0, #29
 8001166:	f000 fac0 	bl	80016ea <HAL_NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40023800 	.word	0x40023800
 8001178:	40000400 	.word	0x40000400

0800117c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800119c:	d11f      	bne.n	80011de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b22      	ldr	r3, [pc, #136]	@ (800122c <HAL_TIM_MspPostInit+0xb0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a21      	ldr	r2, [pc, #132]	@ (800122c <HAL_TIM_MspPostInit+0xb0>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <HAL_TIM_MspPostInit+0xb0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 80011ba:	f248 030e 	movw	r3, #32782	@ 0x800e
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	4816      	ldr	r0, [pc, #88]	@ (8001230 <HAL_TIM_MspPostInit+0xb4>)
 80011d8:	f000 fac4 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011dc:	e022      	b.n	8001224 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a14      	ldr	r2, [pc, #80]	@ (8001234 <HAL_TIM_MspPostInit+0xb8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d11d      	bne.n	8001224 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <HAL_TIM_MspPostInit+0xb0>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f0:	4a0e      	ldr	r2, [pc, #56]	@ (800122c <HAL_TIM_MspPostInit+0xb0>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <HAL_TIM_MspPostInit+0xb0>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001204:	2340      	movs	r3, #64	@ 0x40
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001214:	2302      	movs	r3, #2
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	@ (8001238 <HAL_TIM_MspPostInit+0xbc>)
 8001220:	f000 faa0 	bl	8001764 <HAL_GPIO_Init>
}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40020000 	.word	0x40020000
 8001234:	40000400 	.word	0x40000400
 8001238:	40020800 	.word	0x40020800

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <NMI_Handler+0x4>

08001244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <MemManage_Handler+0x4>

08001254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <UsageFault_Handler+0x4>

08001264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001292:	f000 f8ef 	bl	8001474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a0:	4802      	ldr	r0, [pc, #8]	@ (80012ac <TIM2_IRQHandler+0x10>)
 80012a2:	f004 fa4d 	bl	8005740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001a8 	.word	0x200001a8

080012b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012b4:	4802      	ldr	r0, [pc, #8]	@ (80012c0 <TIM3_IRQHandler+0x10>)
 80012b6:	f004 fa43 	bl	8005740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200001f0 	.word	0x200001f0

080012c4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80012c8:	4802      	ldr	r0, [pc, #8]	@ (80012d4 <SPI2_IRQHandler+0x10>)
 80012ca:	f003 fcad 	bl	8004c28 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000150 	.word	0x20000150

080012d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <OTG_FS_IRQHandler+0x10>)
 80012de:	f000 fed7 	bl	8002090 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000628 	.word	0x20000628

080012ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f4:	4a14      	ldr	r2, [pc, #80]	@ (8001348 <_sbrk+0x5c>)
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <_sbrk+0x60>)
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <_sbrk+0x64>)
 800130a:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <_sbrk+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d207      	bcs.n	800132c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800131c:	f008 fe36 	bl	8009f8c <__errno>
 8001320:	4603      	mov	r3, r0
 8001322:	220c      	movs	r2, #12
 8001324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e009      	b.n	8001340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a05      	ldr	r2, [pc, #20]	@ (8001350 <_sbrk+0x64>)
 800133c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20020000 	.word	0x20020000
 800134c:	00000400 	.word	0x00000400
 8001350:	20000244 	.word	0x20000244
 8001354:	20000b50 	.word	0x20000b50

08001358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <SystemInit+0x20>)
 800135e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <SystemInit+0x20>)
 8001364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800137c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001380:	f7ff ffea 	bl	8001358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001386:	490d      	ldr	r1, [pc, #52]	@ (80013bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800139c:	4c0a      	ldr	r4, [pc, #40]	@ (80013c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013aa:	f008 fdf5 	bl	8009f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ae:	f7ff f883 	bl	80004b8 <main>
  bx  lr    
 80013b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013bc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013c0:	0800a0bc 	.word	0x0800a0bc
  ldr r2, =_sbss
 80013c4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013c8:	20000b50 	.word	0x20000b50

080013cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013cc:	e7fe      	b.n	80013cc <ADC_IRQHandler>
	...

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <HAL_Init+0x40>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001410 <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <HAL_Init+0x40>)
 80013e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <HAL_Init+0x40>)
 80013f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f8:	2003      	movs	r0, #3
 80013fa:	f000 f94f 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f808 	bl	8001414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001404:	f7ff fd60 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40023c00 	.word	0x40023c00

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 f967 	bl	8001706 <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f000 f92f 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	@ (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000000 	.word	0x20000000
 800146c:	20000008 	.word	0x20000008
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	20000248 	.word	0x20000248

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000248 	.word	0x20000248

080014b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014bc:	f7ff ffee 	bl	800149c <HAL_GetTick>
 80014c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014cc:	d005      	beq.n	80014da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ce:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <HAL_Delay+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4413      	add	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014da:	bf00      	nop
 80014dc:	f7ff ffde 	bl	800149c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d8f7      	bhi.n	80014dc <HAL_Delay+0x28>
  {
  }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008

080014fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001518:	4013      	ands	r3, r2
 800151a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001528:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800152c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800152e:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <__NVIC_SetPriorityGrouping+0x44>)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	60d3      	str	r3, [r2, #12]
}
 8001534:	bf00      	nop
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001548:	4b04      	ldr	r3, [pc, #16]	@ (800155c <__NVIC_GetPriorityGrouping+0x18>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 0307 	and.w	r3, r3, #7
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db0b      	blt.n	800158a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	4907      	ldr	r1, [pc, #28]	@ (8001598 <__NVIC_EnableIRQ+0x38>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000e100 	.word	0xe000e100

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	@ (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	@ (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	@ 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff8e 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff29 	bl	80014fc <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff3e 	bl	8001544 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff8e 	bl	80015f0 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5d 	bl	800159c <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff31 	bl	8001560 <__NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa2 	bl	8001658 <SysTick_Config>
 8001714:	4603      	mov	r3, r0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d004      	beq.n	800173c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2280      	movs	r2, #128	@ 0x80
 8001736:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e00c      	b.n	8001756 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2205      	movs	r2, #5
 8001740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	@ 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e16b      	b.n	8001a58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 815a 	bne.w	8001a52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80b4 	beq.w	8001a52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b60      	ldr	r3, [pc, #384]	@ (8001a70 <HAL_GPIO_Init+0x30c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a70 <HAL_GPIO_Init+0x30c>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a70 <HAL_GPIO_Init+0x30c>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001906:	4a5b      	ldr	r2, [pc, #364]	@ (8001a74 <HAL_GPIO_Init+0x310>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a52      	ldr	r2, [pc, #328]	@ (8001a78 <HAL_GPIO_Init+0x314>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d02b      	beq.n	800198a <HAL_GPIO_Init+0x226>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a51      	ldr	r2, [pc, #324]	@ (8001a7c <HAL_GPIO_Init+0x318>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d025      	beq.n	8001986 <HAL_GPIO_Init+0x222>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a50      	ldr	r2, [pc, #320]	@ (8001a80 <HAL_GPIO_Init+0x31c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01f      	beq.n	8001982 <HAL_GPIO_Init+0x21e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4f      	ldr	r2, [pc, #316]	@ (8001a84 <HAL_GPIO_Init+0x320>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d019      	beq.n	800197e <HAL_GPIO_Init+0x21a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4e      	ldr	r2, [pc, #312]	@ (8001a88 <HAL_GPIO_Init+0x324>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x216>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4d      	ldr	r2, [pc, #308]	@ (8001a8c <HAL_GPIO_Init+0x328>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x212>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a90 <HAL_GPIO_Init+0x32c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x20e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4b      	ldr	r2, [pc, #300]	@ (8001a94 <HAL_GPIO_Init+0x330>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x20a>
 800196a:	2307      	movs	r3, #7
 800196c:	e00e      	b.n	800198c <HAL_GPIO_Init+0x228>
 800196e:	2308      	movs	r3, #8
 8001970:	e00c      	b.n	800198c <HAL_GPIO_Init+0x228>
 8001972:	2306      	movs	r3, #6
 8001974:	e00a      	b.n	800198c <HAL_GPIO_Init+0x228>
 8001976:	2305      	movs	r3, #5
 8001978:	e008      	b.n	800198c <HAL_GPIO_Init+0x228>
 800197a:	2304      	movs	r3, #4
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x228>
 800197e:	2303      	movs	r3, #3
 8001980:	e004      	b.n	800198c <HAL_GPIO_Init+0x228>
 8001982:	2302      	movs	r3, #2
 8001984:	e002      	b.n	800198c <HAL_GPIO_Init+0x228>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_GPIO_Init+0x228>
 800198a:	2300      	movs	r3, #0
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	f002 0203 	and.w	r2, r2, #3
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	4093      	lsls	r3, r2
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800199c:	4935      	ldr	r1, [pc, #212]	@ (8001a74 <HAL_GPIO_Init+0x310>)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ce:	4a32      	ldr	r2, [pc, #200]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d4:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f8:	4a27      	ldr	r2, [pc, #156]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fe:	4b26      	ldr	r3, [pc, #152]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a22:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a28:	4b1b      	ldr	r3, [pc, #108]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a4c:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <HAL_GPIO_Init+0x334>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3301      	adds	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	f67f ae90 	bls.w	8001780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40013800 	.word	0x40013800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40021800 	.word	0x40021800
 8001a94:	40021c00 	.word	0x40021c00
 8001a98:	40013c00 	.word	0x40013c00

08001a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	807b      	strh	r3, [r7, #2]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aac:	787b      	ldrb	r3, [r7, #1]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab2:	887a      	ldrh	r2, [r7, #2]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ab8:	e003      	b.n	8001ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	041a      	lsls	r2, r3, #16
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	619a      	str	r2, [r3, #24]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af02      	add	r7, sp, #8
 8001ad4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e059      	b.n	8001b94 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f007 fec4 	bl	8009888 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2203      	movs	r2, #3
 8001b04:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b0e:	d102      	bne.n	8001b16 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 fcdd 	bl	80064da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7c1a      	ldrb	r2, [r3, #16]
 8001b28:	f88d 2000 	strb.w	r2, [sp]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b30:	f004 fc5e 	bl	80063f0 <USB_CoreInit>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e026      	b.n	8001b94 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f004 fcd5 	bl	80064fc <USB_SetCurrentMode>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e017      	b.n	8001b94 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7c1a      	ldrb	r2, [r3, #16]
 8001b6c:	f88d 2000 	strb.w	r2, [sp]
 8001b70:	3304      	adds	r3, #4
 8001b72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b74:	f004 fe78 	bl	8006868 <USB_HostInit>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2202      	movs	r2, #2
 8001b82:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e004      	b.n	8001b94 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ba0:	af04      	add	r7, sp, #16
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4603      	mov	r3, r0
 8001bac:	70fb      	strb	r3, [r7, #3]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	70bb      	strb	r3, [r7, #2]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001bb6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001bb8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_HCD_HC_Init+0x2c>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e09d      	b.n	8001d04 <HAL_HCD_HC_Init+0x168>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001bd0:	78fa      	ldrb	r2, [r7, #3]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	3319      	adds	r3, #25
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	011b      	lsls	r3, r3, #4
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	787a      	ldrb	r2, [r7, #1]
 8001bf6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	3315      	adds	r3, #21
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	3326      	adds	r3, #38	@ 0x26
 8001c1c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001c20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	78bb      	ldrb	r3, [r7, #2]
 8001c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c2a:	b2d8      	uxtb	r0, r3
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	440b      	add	r3, r1
 8001c38:	3316      	adds	r3, #22
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fbc8 	bl	80023d8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001c48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	da0a      	bge.n	8001c66 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c50:	78fa      	ldrb	r2, [r7, #3]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	3317      	adds	r3, #23
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e009      	b.n	8001c7a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c66:	78fa      	ldrb	r2, [r7, #3]
 8001c68:	6879      	ldr	r1, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	440b      	add	r3, r1
 8001c74:	3317      	adds	r3, #23
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f004 ff56 	bl	8006b30 <USB_GetHostSpeed>
 8001c84:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001c86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_HCD_HC_Init+0x10a>
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d104      	bne.n	8001ca6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001ca0:	d901      	bls.n	8001ca6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001ca2:	23bc      	movs	r3, #188	@ 0xbc
 8001ca4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001ca6:	78fa      	ldrb	r2, [r7, #3]
 8001ca8:	6879      	ldr	r1, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	3318      	adds	r3, #24
 8001cb6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001cba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	b298      	uxth	r0, r3
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	1a9b      	subs	r3, r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	3328      	adds	r3, #40	@ 0x28
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	787c      	ldrb	r4, [r7, #1]
 8001cde:	78ba      	ldrb	r2, [r7, #2]
 8001ce0:	78f9      	ldrb	r1, [r7, #3]
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	f004 ff45 	bl	8006b80 <USB_HC_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}

08001d0c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_HCD_HC_Halt+0x1e>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e00f      	b.n	8001d4a <HAL_HCD_HC_Halt+0x3e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	78fa      	ldrb	r2, [r7, #3]
 8001d38:	4611      	mov	r1, r2
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 fad7 	bl	80072ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	4611      	mov	r1, r2
 8001d60:	461a      	mov	r2, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	70fb      	strb	r3, [r7, #3]
 8001d66:	460b      	mov	r3, r1
 8001d68:	70bb      	strb	r3, [r7, #2]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d6e:	78fa      	ldrb	r2, [r7, #3]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	1a9b      	subs	r3, r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3317      	adds	r3, #23
 8001d7e:	78ba      	ldrb	r2, [r7, #2]
 8001d80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d82:	78fa      	ldrb	r2, [r7, #3]
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	3326      	adds	r3, #38	@ 0x26
 8001d92:	787a      	ldrb	r2, [r7, #1]
 8001d94:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d96:	7c3b      	ldrb	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d114      	bne.n	8001dc6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	332a      	adds	r3, #42	@ 0x2a
 8001dac:	2203      	movs	r2, #3
 8001dae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3319      	adds	r3, #25
 8001dc0:	7f3a      	ldrb	r2, [r7, #28]
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e009      	b.n	8001dda <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	332a      	adds	r3, #42	@ 0x2a
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001dda:	787b      	ldrb	r3, [r7, #1]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	f200 8102 	bhi.w	8001fe6 <HAL_HCD_HC_SubmitRequest+0x292>
 8001de2:	a201      	add	r2, pc, #4	@ (adr r2, 8001de8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001df9 	.word	0x08001df9
 8001dec:	08001fd1 	.word	0x08001fd1
 8001df0:	08001ebd 	.word	0x08001ebd
 8001df4:	08001f47 	.word	0x08001f47
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001df8:	7c3b      	ldrb	r3, [r7, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f040 80f5 	bne.w	8001fea <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001e00:	78bb      	ldrb	r3, [r7, #2]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d12d      	bne.n	8001e62 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001e06:	8b3b      	ldrh	r3, [r7, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d109      	bne.n	8001e20 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	011b      	lsls	r3, r3, #4
 8001e14:	1a9b      	subs	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	333d      	adds	r3, #61	@ 0x3d
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	333d      	adds	r3, #61	@ 0x3d
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	011b      	lsls	r3, r3, #4
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	332a      	adds	r3, #42	@ 0x2a
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001e4a:	e0ce      	b.n	8001fea <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	332a      	adds	r3, #42	@ 0x2a
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	701a      	strb	r2, [r3, #0]
      break;
 8001e60:	e0c3      	b.n	8001fea <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001e62:	78fa      	ldrb	r2, [r7, #3]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	331a      	adds	r3, #26
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f040 80b8 	bne.w	8001fea <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	333c      	adds	r3, #60	@ 0x3c
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	332a      	adds	r3, #42	@ 0x2a
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
      break;
 8001ea4:	e0a1      	b.n	8001fea <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	332a      	adds	r3, #42	@ 0x2a
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	701a      	strb	r2, [r3, #0]
      break;
 8001eba:	e096      	b.n	8001fea <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ebc:	78bb      	ldrb	r3, [r7, #2]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d120      	bne.n	8001f04 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	333d      	adds	r3, #61	@ 0x3d
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10a      	bne.n	8001eee <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	332a      	adds	r3, #42	@ 0x2a
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001eec:	e07e      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	332a      	adds	r3, #42	@ 0x2a
 8001efe:	2202      	movs	r2, #2
 8001f00:	701a      	strb	r2, [r3, #0]
      break;
 8001f02:	e073      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	333c      	adds	r3, #60	@ 0x3c
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10a      	bne.n	8001f30 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	332a      	adds	r3, #42	@ 0x2a
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
      break;
 8001f2e:	e05d      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	332a      	adds	r3, #42	@ 0x2a
 8001f40:	2202      	movs	r2, #2
 8001f42:	701a      	strb	r2, [r3, #0]
      break;
 8001f44:	e052      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f46:	78bb      	ldrb	r3, [r7, #2]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d120      	bne.n	8001f8e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	333d      	adds	r3, #61	@ 0x3d
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10a      	bne.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	1a9b      	subs	r3, r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	332a      	adds	r3, #42	@ 0x2a
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f76:	e039      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	332a      	adds	r3, #42	@ 0x2a
 8001f88:	2202      	movs	r2, #2
 8001f8a:	701a      	strb	r2, [r3, #0]
      break;
 8001f8c:	e02e      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	333c      	adds	r3, #60	@ 0x3c
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	332a      	adds	r3, #42	@ 0x2a
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
      break;
 8001fb8:	e018      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fba:	78fa      	ldrb	r2, [r7, #3]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	1a9b      	subs	r3, r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	332a      	adds	r3, #42	@ 0x2a
 8001fca:	2202      	movs	r2, #2
 8001fcc:	701a      	strb	r2, [r3, #0]
      break;
 8001fce:	e00d      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	332a      	adds	r3, #42	@ 0x2a
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
      break;
 8001fe4:	e002      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001fe6:	bf00      	nop
 8001fe8:	e000      	b.n	8001fec <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001fea:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	332c      	adds	r3, #44	@ 0x2c
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	8b39      	ldrh	r1, [r7, #24]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4403      	add	r3, r0
 8002010:	3334      	adds	r3, #52	@ 0x34
 8002012:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	334c      	adds	r3, #76	@ 0x4c
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3338      	adds	r3, #56	@ 0x38
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3315      	adds	r3, #21
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	334d      	adds	r3, #77	@ 0x4d
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6818      	ldr	r0, [r3, #0]
 8002068:	78fa      	ldrb	r2, [r7, #3]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	3310      	adds	r3, #16
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	1d19      	adds	r1, r3, #4
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	799b      	ldrb	r3, [r3, #6]
 800207e:	461a      	mov	r2, r3
 8002080:	f004 feaa 	bl	8006dd8 <USB_HC_StartXfer>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop

08002090 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 fb9e 	bl	80067e8 <USB_GetMode>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	f040 80fb 	bne.w	80022aa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fb61 	bl	8006780 <USB_ReadInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80f1 	beq.w	80022a8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 fb58 	bl	8006780 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020da:	d104      	bne.n	80020e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80020e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 fb48 	bl	8006780 <USB_ReadInterrupts>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020fa:	d104      	bne.n	8002106 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002104:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fb38 	bl	8006780 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002116:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800211a:	d104      	bne.n	8002126 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002124:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f004 fb28 	bl	8006780 <USB_ReadInterrupts>
 8002130:	4603      	mov	r3, r0
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b02      	cmp	r3, #2
 8002138:	d103      	bne.n	8002142 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2202      	movs	r2, #2
 8002140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fb1a 	bl	8006780 <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002152:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002156:	d120      	bne.n	800219a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002160:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d113      	bne.n	800219a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002172:	2110      	movs	r1, #16
 8002174:	6938      	ldr	r0, [r7, #16]
 8002176:	f004 fa0d 	bl	8006594 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800217a:	6938      	ldr	r0, [r7, #16]
 800217c:	f004 fa3c 	bl	80065f8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7a5b      	ldrb	r3, [r3, #9]
 8002184:	2b02      	cmp	r3, #2
 8002186:	d105      	bne.n	8002194 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fc2e 	bl	80069f0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f007 fbf5 	bl	8009984 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f004 faee 	bl	8006780 <USB_ReadInterrupts>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021ae:	d102      	bne.n	80021b6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f001 fd4d 	bl	8003c50 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f004 fae0 	bl	8006780 <USB_ReadInterrupts>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d106      	bne.n	80021d8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f007 fbbe 	bl	800994c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2208      	movs	r2, #8
 80021d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f004 facf 	bl	8006780 <USB_ReadInterrupts>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021ec:	d139      	bne.n	8002262 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f005 f86a 	bl	80072cc <USB_HC_ReadInterrupt>
 80021f8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	e025      	b.n	800224c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d018      	beq.n	8002246 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4413      	add	r3, r2
 800221c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002226:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800222a:	d106      	bne.n	800223a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4619      	mov	r1, r3
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f905 	bl	8002442 <HCD_HC_IN_IRQHandler>
 8002238:	e005      	b.n	8002246 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	4619      	mov	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 ff67 	bl	8003114 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	795b      	ldrb	r3, [r3, #5]
 8002250:	461a      	mov	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4293      	cmp	r3, r2
 8002256:	d3d3      	bcc.n	8002200 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f004 fa8a 	bl	8006780 <USB_ReadInterrupts>
 800226c:	4603      	mov	r3, r0
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b10      	cmp	r3, #16
 8002274:	d101      	bne.n	800227a <HAL_HCD_IRQHandler+0x1ea>
 8002276:	2301      	movs	r3, #1
 8002278:	e000      	b.n	800227c <HAL_HCD_IRQHandler+0x1ec>
 800227a:	2300      	movs	r3, #0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d014      	beq.n	80022aa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0210 	bic.w	r2, r2, #16
 800228e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f001 fbfe 	bl	8003a92 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	699a      	ldr	r2, [r3, #24]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0210 	orr.w	r2, r2, #16
 80022a4:	619a      	str	r2, [r3, #24]
 80022a6:	e000      	b.n	80022aa <HAL_HCD_IRQHandler+0x21a>
      return;
 80022a8:	bf00      	nop
    }
  }
}
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d101      	bne.n	80022c6 <HAL_HCD_Start+0x16>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e013      	b.n	80022ee <HAL_HCD_Start+0x3e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 fbf2 	bl	8006abe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f004 f8ea 	bl	80064b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_HCD_Stop+0x16>
 8002308:	2302      	movs	r3, #2
 800230a:	e00d      	b.n	8002328 <HAL_HCD_Stop+0x32>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f005 f945 	bl	80075a8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f004 fb94 	bl	8006a6a <USB_ResetPort>
 8002342:	4603      	mov	r3, r0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	334c      	adds	r3, #76	@ 0x4c
 8002368:	781b      	ldrb	r3, [r3, #0]
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	460b      	mov	r3, r1
 8002380:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	3338      	adds	r3, #56	@ 0x38
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f004 fbd6 	bl	8006b5e <USB_GetCurrentFrame>
 80023b2:	4603      	mov	r3, r0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f004 fbb1 	bl	8006b30 <USB_GetHostSpeed>
 80023ce:	4603      	mov	r3, r0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	331a      	adds	r3, #26
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	331b      	adds	r3, #27
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3325      	adds	r3, #37	@ 0x25
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3324      	adds	r3, #36	@ 0x24
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	460b      	mov	r3, r1
 800244c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	4611      	mov	r1, r2
 8002460:	4618      	mov	r0, r3
 8002462:	f004 f9a0 	bl	80067a6 <USB_ReadChInterrupts>
 8002466:	4603      	mov	r3, r0
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d11a      	bne.n	80024a6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800247c:	461a      	mov	r2, r3
 800247e:	2304      	movs	r3, #4
 8002480:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	334d      	adds	r3, #77	@ 0x4d
 8002492:	2207      	movs	r2, #7
 8002494:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f004 ff25 	bl	80072ee <USB_HC_Halt>
 80024a4:	e09e      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	78fa      	ldrb	r2, [r7, #3]
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f004 f979 	bl	80067a6 <USB_ReadChInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024be:	d11b      	bne.n	80024f8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	015a      	lsls	r2, r3, #5
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024cc:	461a      	mov	r2, r3
 80024ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80024d4:	78fa      	ldrb	r2, [r7, #3]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	334d      	adds	r3, #77	@ 0x4d
 80024e4:	2208      	movs	r2, #8
 80024e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f004 fefc 	bl	80072ee <USB_HC_Halt>
 80024f6:	e075      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f004 f950 	bl	80067a6 <USB_ReadChInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b08      	cmp	r3, #8
 800250e:	d11a      	bne.n	8002546 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4413      	add	r3, r2
 8002518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800251c:	461a      	mov	r2, r3
 800251e:	2308      	movs	r3, #8
 8002520:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	334d      	adds	r3, #77	@ 0x4d
 8002532:	2206      	movs	r2, #6
 8002534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	4611      	mov	r1, r2
 800253e:	4618      	mov	r0, r3
 8002540:	f004 fed5 	bl	80072ee <USB_HC_Halt>
 8002544:	e04e      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f004 f929 	bl	80067a6 <USB_ReadChInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800255e:	d11b      	bne.n	8002598 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002572:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	334d      	adds	r3, #77	@ 0x4d
 8002584:	2209      	movs	r2, #9
 8002586:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	4611      	mov	r1, r2
 8002590:	4618      	mov	r0, r3
 8002592:	f004 feac 	bl	80072ee <USB_HC_Halt>
 8002596:	e025      	b.n	80025e4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f004 f900 	bl	80067a6 <USB_ReadChInterrupts>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ac:	2b80      	cmp	r3, #128	@ 0x80
 80025ae:	d119      	bne.n	80025e4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025bc:	461a      	mov	r2, r3
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	334d      	adds	r3, #77	@ 0x4d
 80025d2:	2207      	movs	r2, #7
 80025d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f004 fe85 	bl	80072ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	4611      	mov	r1, r2
 80025ec:	4618      	mov	r0, r3
 80025ee:	f004 f8da 	bl	80067a6 <USB_ReadChInterrupts>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025fc:	d112      	bne.n	8002624 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	4611      	mov	r1, r2
 8002606:	4618      	mov	r0, r3
 8002608:	f004 fe71 	bl	80072ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4413      	add	r3, r2
 8002614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002618:	461a      	mov	r2, r3
 800261a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800261e:	6093      	str	r3, [r2, #8]
 8002620:	f000 bd75 	b.w	800310e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f004 f8ba 	bl	80067a6 <USB_ReadChInterrupts>
 8002632:	4603      	mov	r3, r0
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	f040 8128 	bne.w	800288e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264a:	461a      	mov	r2, r3
 800264c:	2320      	movs	r3, #32
 800264e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	331b      	adds	r3, #27
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d119      	bne.n	800269a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	331b      	adds	r3, #27
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	0151      	lsls	r1, r2, #5
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	440a      	add	r2, r1
 8002690:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002698:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	799b      	ldrb	r3, [r3, #6]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d01b      	beq.n	80026da <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3330      	adds	r3, #48	@ 0x30
 80026b2:	6819      	ldr	r1, [r3, #0]
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	1ac9      	subs	r1, r1, r3
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4403      	add	r3, r0
 80026d6:	3338      	adds	r3, #56	@ 0x38
 80026d8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	334d      	adds	r3, #77	@ 0x4d
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3344      	adds	r3, #68	@ 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270e:	461a      	mov	r2, r3
 8002710:	2301      	movs	r3, #1
 8002712:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3326      	adds	r3, #38	@ 0x26
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3326      	adds	r3, #38	@ 0x26
 800273a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800273c:	2b02      	cmp	r3, #2
 800273e:	d110      	bne.n	8002762 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fdd0 	bl	80072ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800274e:	78fb      	ldrb	r3, [r7, #3]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	2310      	movs	r3, #16
 800275e:	6093      	str	r3, [r2, #8]
 8002760:	e03d      	b.n	80027de <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3326      	adds	r3, #38	@ 0x26
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b03      	cmp	r3, #3
 8002776:	d00a      	beq.n	800278e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3326      	adds	r3, #38	@ 0x26
 8002788:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800278a:	2b01      	cmp	r3, #1
 800278c:	d127      	bne.n	80027de <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	0151      	lsls	r1, r2, #5
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	440a      	add	r2, r1
 80027a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80027ac:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	334c      	adds	r3, #76	@ 0x4c
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	334c      	adds	r3, #76	@ 0x4c
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	4619      	mov	r1, r3
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f007 f8e1 	bl	80099a0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	799b      	ldrb	r3, [r3, #6]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d13b      	bne.n	800285e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	1a9b      	subs	r3, r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3338      	adds	r3, #56	@ 0x38
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	78fa      	ldrb	r2, [r7, #3]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	1a9b      	subs	r3, r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4403      	add	r3, r0
 8002806:	3328      	adds	r3, #40	@ 0x28
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	440b      	add	r3, r1
 800280c:	1e59      	subs	r1, r3, #1
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4403      	add	r3, r0
 800281c:	3328      	adds	r3, #40	@ 0x28
 800281e:	881b      	ldrh	r3, [r3, #0]
 8002820:	fbb1 f3f3 	udiv	r3, r1, r3
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 8470 	beq.w	800310e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	333c      	adds	r3, #60	@ 0x3c
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	f083 0301 	eor.w	r3, r3, #1
 8002846:	b2d8      	uxtb	r0, r3
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	333c      	adds	r3, #60	@ 0x3c
 8002856:	4602      	mov	r2, r0
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	f000 bc58 	b.w	800310e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800285e:	78fa      	ldrb	r2, [r7, #3]
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	440b      	add	r3, r1
 800286c:	333c      	adds	r3, #60	@ 0x3c
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	f083 0301 	eor.w	r3, r3, #1
 8002876:	b2d8      	uxtb	r0, r3
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	333c      	adds	r3, #60	@ 0x3c
 8002886:	4602      	mov	r2, r0
 8002888:	701a      	strb	r2, [r3, #0]
 800288a:	f000 bc40 	b.w	800310e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	4611      	mov	r1, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f003 ff85 	bl	80067a6 <USB_ReadChInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d131      	bne.n	800290a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b2:	461a      	mov	r2, r3
 80028b4:	2320      	movs	r3, #32
 80028b6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	1a9b      	subs	r3, r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	331a      	adds	r3, #26
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	f040 841f 	bne.w	800310e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	331b      	adds	r3, #27
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334d      	adds	r3, #77	@ 0x4d
 80028f4:	2203      	movs	r2, #3
 80028f6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f004 fcf4 	bl	80072ee <USB_HC_Halt>
 8002906:	f000 bc02 	b.w	800310e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f003 ff47 	bl	80067a6 <USB_ReadChInterrupts>
 8002918:	4603      	mov	r3, r0
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b02      	cmp	r3, #2
 8002920:	f040 8305 	bne.w	8002f2e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	2302      	movs	r3, #2
 8002934:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	1a9b      	subs	r3, r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	334d      	adds	r3, #77	@ 0x4d
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d114      	bne.n	8002976 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	334d      	adds	r3, #77	@ 0x4d
 800295c:	2202      	movs	r2, #2
 800295e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	334c      	adds	r3, #76	@ 0x4c
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	e2cc      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	6879      	ldr	r1, [r7, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	1a9b      	subs	r3, r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	334d      	adds	r3, #77	@ 0x4d
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b06      	cmp	r3, #6
 800298a:	d114      	bne.n	80029b6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	334d      	adds	r3, #77	@ 0x4d
 800299c:	2202      	movs	r2, #2
 800299e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	334c      	adds	r3, #76	@ 0x4c
 80029b0:	2205      	movs	r2, #5
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e2ac      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	334d      	adds	r3, #77	@ 0x4d
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b07      	cmp	r3, #7
 80029ca:	d00b      	beq.n	80029e4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	334d      	adds	r3, #77	@ 0x4d
 80029dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80029de:	2b09      	cmp	r3, #9
 80029e0:	f040 80a6 	bne.w	8002b30 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	334d      	adds	r3, #77	@ 0x4d
 80029f4:	2202      	movs	r2, #2
 80029f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029f8:	78fa      	ldrb	r2, [r7, #3]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	3344      	adds	r3, #68	@ 0x44
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1c59      	adds	r1, r3, #1
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4403      	add	r3, r0
 8002a18:	3344      	adds	r3, #68	@ 0x44
 8002a1a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3344      	adds	r3, #68	@ 0x44
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d943      	bls.n	8002aba <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	3344      	adds	r3, #68	@ 0x44
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	331a      	adds	r3, #26
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d123      	bne.n	8002aa4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	331b      	adds	r3, #27
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	331c      	adds	r3, #28
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	78fa      	ldrb	r2, [r7, #3]
 8002a94:	0151      	lsls	r1, r2, #5
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	440a      	add	r2, r1
 8002a9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aa2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	1a9b      	subs	r3, r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	334c      	adds	r3, #76	@ 0x4c
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ab8:	e229      	b.n	8002f0e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	334c      	adds	r3, #76	@ 0x4c
 8002aca:	2202      	movs	r2, #2
 8002acc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	3326      	adds	r3, #38	@ 0x26
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3326      	adds	r3, #38	@ 0x26
 8002af4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	f040 8209 	bne.w	8002f0e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b12:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b1a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b2e:	e1ee      	b.n	8002f0e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	334d      	adds	r3, #77	@ 0x4d
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b05      	cmp	r3, #5
 8002b44:	f040 80c8 	bne.w	8002cd8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334d      	adds	r3, #77	@ 0x4d
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	331b      	adds	r3, #27
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	f040 81ce 	bne.w	8002f10 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3326      	adds	r3, #38	@ 0x26
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d16b      	bne.n	8002c62 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3348      	adds	r3, #72	@ 0x48
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	1c59      	adds	r1, r3, #1
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4403      	add	r3, r0
 8002baa:	3348      	adds	r3, #72	@ 0x48
 8002bac:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	3348      	adds	r3, #72	@ 0x48
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d943      	bls.n	8002c4c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3348      	adds	r3, #72	@ 0x48
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	331b      	adds	r3, #27
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3344      	adds	r3, #68	@ 0x44
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d809      	bhi.n	8002c16 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	331c      	adds	r3, #28
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	0151      	lsls	r1, r2, #5
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	440a      	add	r2, r1
 8002c2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c34:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	334c      	adds	r3, #76	@ 0x4c
 8002c46:	2204      	movs	r2, #4
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e014      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	334c      	adds	r3, #76	@ 0x4c
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e009      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	334c      	adds	r3, #76	@ 0x4c
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	3326      	adds	r3, #38	@ 0x26
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c8c:	78fa      	ldrb	r2, [r7, #3]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	1a9b      	subs	r3, r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	3326      	adds	r3, #38	@ 0x26
 8002c9c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	f040 8136 	bne.w	8002f10 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002cba:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002cc2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e11b      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334d      	adds	r3, #77	@ 0x4d
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	f040 8081 	bne.w	8002df2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	334d      	adds	r3, #77	@ 0x4d
 8002d00:	2202      	movs	r2, #2
 8002d02:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	4613      	mov	r3, r2
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	331b      	adds	r3, #27
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	f040 80fa 	bne.w	8002f10 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	334c      	adds	r3, #76	@ 0x4c
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	015a      	lsls	r2, r3, #5
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4413      	add	r3, r2
 8002d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	0151      	lsls	r1, r2, #5
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	440a      	add	r2, r1
 8002d46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d4e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	0151      	lsls	r1, r2, #5
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	440a      	add	r2, r1
 8002d66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d6e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	0151      	lsls	r1, r2, #5
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	440a      	add	r2, r1
 8002d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d8a:	f023 0320 	bic.w	r3, r3, #32
 8002d8e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	1a9b      	subs	r3, r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3326      	adds	r3, #38	@ 0x26
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	3326      	adds	r3, #38	@ 0x26
 8002db6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	f040 80a9 	bne.w	8002f10 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002dd4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ddc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6013      	str	r3, [r2, #0]
 8002df0:	e08e      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	334d      	adds	r3, #77	@ 0x4d
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d143      	bne.n	8002e90 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	334d      	adds	r3, #77	@ 0x4d
 8002e18:	2202      	movs	r2, #2
 8002e1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	334c      	adds	r3, #76	@ 0x4c
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3326      	adds	r3, #38	@ 0x26
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3326      	adds	r3, #38	@ 0x26
 8002e56:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d159      	bne.n	8002f10 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e72:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e7a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e03f      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	334d      	adds	r3, #77	@ 0x4d
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b08      	cmp	r3, #8
 8002ea4:	d126      	bne.n	8002ef4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	1a9b      	subs	r3, r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	334d      	adds	r3, #77	@ 0x4d
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3344      	adds	r3, #68	@ 0x44
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	1c59      	adds	r1, r3, #1
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4403      	add	r3, r0
 8002eda:	3344      	adds	r3, #68	@ 0x44
 8002edc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	334c      	adds	r3, #76	@ 0x4c
 8002eee:	2204      	movs	r2, #4
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e00d      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	334d      	adds	r3, #77	@ 0x4d
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	f000 8100 	beq.w	800310c <HCD_HC_IN_IRQHandler+0xcca>
 8002f0c:	e000      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f0e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	334c      	adds	r3, #76	@ 0x4c
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	4619      	mov	r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f006 fd3a 	bl	80099a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f2c:	e0ef      	b.n	800310e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fc35 	bl	80067a6 <USB_ReadChInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f42:	2b40      	cmp	r3, #64	@ 0x40
 8002f44:	d12f      	bne.n	8002fa6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f52:	461a      	mov	r2, r3
 8002f54:	2340      	movs	r3, #64	@ 0x40
 8002f56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	334d      	adds	r3, #77	@ 0x4d
 8002f68:	2205      	movs	r2, #5
 8002f6a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	331a      	adds	r3, #26
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	3344      	adds	r3, #68	@ 0x44
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 f9a5 	bl	80072ee <USB_HC_Halt>
 8002fa4:	e0b3      	b.n	800310e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fbf9 	bl	80067a6 <USB_ReadChInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b10      	cmp	r3, #16
 8002fbc:	f040 80a7 	bne.w	800310e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	3326      	adds	r3, #38	@ 0x26
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d11b      	bne.n	800300e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3344      	adds	r3, #68	@ 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	334d      	adds	r3, #77	@ 0x4d
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f004 f971 	bl	80072ee <USB_HC_Halt>
 800300c:	e03f      	b.n	800308e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	3326      	adds	r3, #38	@ 0x26
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3326      	adds	r3, #38	@ 0x26
 8003034:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003036:	2b02      	cmp	r3, #2
 8003038:	d129      	bne.n	800308e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	3344      	adds	r3, #68	@ 0x44
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	799b      	ldrb	r3, [r3, #6]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HCD_HC_IN_IRQHandler+0xc2a>
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	331b      	adds	r3, #27
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d110      	bne.n	800308e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	334d      	adds	r3, #77	@ 0x4d
 800307c:	2204      	movs	r2, #4
 800307e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f004 f930 	bl	80072ee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	331b      	adds	r3, #27
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d129      	bne.n	80030f8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	331b      	adds	r3, #27
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	0151      	lsls	r1, r2, #5
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	440a      	add	r2, r1
 80030ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	0151      	lsls	r1, r2, #5
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	440a      	add	r2, r1
 80030ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030f2:	f043 0320 	orr.w	r3, r3, #32
 80030f6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003104:	461a      	mov	r2, r3
 8003106:	2310      	movs	r3, #16
 8003108:	6093      	str	r3, [r2, #8]
 800310a:	e000      	b.n	800310e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800310c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fb37 	bl	80067a6 <USB_ReadChInterrupts>
 8003138:	4603      	mov	r3, r0
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d11b      	bne.n	800317a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4413      	add	r3, r2
 800314a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314e:	461a      	mov	r2, r3
 8003150:	2304      	movs	r3, #4
 8003152:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334d      	adds	r3, #77	@ 0x4d
 8003164:	2207      	movs	r2, #7
 8003166:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f004 f8bc 	bl	80072ee <USB_HC_Halt>
 8003176:	f000 bc89 	b.w	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	4611      	mov	r1, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f003 fb0f 	bl	80067a6 <USB_ReadChInterrupts>
 8003188:	4603      	mov	r3, r0
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b20      	cmp	r3, #32
 8003190:	f040 8082 	bne.w	8003298 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a0:	461a      	mov	r2, r3
 80031a2:	2320      	movs	r3, #32
 80031a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3319      	adds	r3, #25
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d124      	bne.n	8003206 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3319      	adds	r3, #25
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	334c      	adds	r3, #76	@ 0x4c
 80031e0:	2202      	movs	r2, #2
 80031e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	334d      	adds	r3, #77	@ 0x4d
 80031f4:	2203      	movs	r2, #3
 80031f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f004 f874 	bl	80072ee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	331a      	adds	r3, #26
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	f040 8437 	bne.w	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	331b      	adds	r3, #27
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 842b 	bne.w	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	3326      	adds	r3, #38	@ 0x26
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d009      	beq.n	8003260 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	331b      	adds	r3, #27
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003260:	78fa      	ldrb	r2, [r7, #3]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	334d      	adds	r3, #77	@ 0x4d
 8003270:	2203      	movs	r2, #3
 8003272:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f004 f836 	bl	80072ee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003282:	78fa      	ldrb	r2, [r7, #3]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	3344      	adds	r3, #68	@ 0x44
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e3f9      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 fa80 	bl	80067a6 <USB_ReadChInterrupts>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b0:	d111      	bne.n	80032d6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032be:	461a      	mov	r2, r3
 80032c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 f80d 	bl	80072ee <USB_HC_Halt>
 80032d4:	e3da      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f003 fa61 	bl	80067a6 <USB_ReadChInterrupts>
 80032e4:	4603      	mov	r3, r0
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d168      	bne.n	80033c0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	3344      	adds	r3, #68	@ 0x44
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fa4b 	bl	80067a6 <USB_ReadChInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003316:	2b40      	cmp	r3, #64	@ 0x40
 8003318:	d112      	bne.n	8003340 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3319      	adds	r3, #25
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333a:	461a      	mov	r2, r3
 800333c:	2340      	movs	r3, #64	@ 0x40
 800333e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	331b      	adds	r3, #27
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d019      	beq.n	800338a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	331b      	adds	r3, #27
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	0151      	lsls	r1, r2, #5
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	440a      	add	r2, r1
 8003380:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003388:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003396:	461a      	mov	r2, r3
 8003398:	2301      	movs	r3, #1
 800339a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	334d      	adds	r3, #77	@ 0x4d
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f003 ff98 	bl	80072ee <USB_HC_Halt>
 80033be:	e365      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f003 f9ec 	bl	80067a6 <USB_ReadChInterrupts>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d4:	2b40      	cmp	r3, #64	@ 0x40
 80033d6:	d139      	bne.n	800344c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	334d      	adds	r3, #77	@ 0x4d
 80033e8:	2205      	movs	r2, #5
 80033ea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	331a      	adds	r3, #26
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	3319      	adds	r3, #25
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	3344      	adds	r3, #68	@ 0x44
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f003 ff5b 	bl	80072ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4413      	add	r3, r2
 8003440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003444:	461a      	mov	r2, r3
 8003446:	2340      	movs	r3, #64	@ 0x40
 8003448:	6093      	str	r3, [r2, #8]
 800344a:	e31f      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f003 f9a6 	bl	80067a6 <USB_ReadChInterrupts>
 800345a:	4603      	mov	r3, r0
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d11a      	bne.n	800349a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003470:	461a      	mov	r2, r3
 8003472:	2308      	movs	r3, #8
 8003474:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	334d      	adds	r3, #77	@ 0x4d
 8003486:	2206      	movs	r2, #6
 8003488:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f003 ff2b 	bl	80072ee <USB_HC_Halt>
 8003498:	e2f8      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 f97f 	bl	80067a6 <USB_ReadChInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d144      	bne.n	800353c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3344      	adds	r3, #68	@ 0x44
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	334d      	adds	r3, #77	@ 0x4d
 80034d6:	2204      	movs	r2, #4
 80034d8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3319      	adds	r3, #25
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d114      	bne.n	800351a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3318      	adds	r3, #24
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	3319      	adds	r3, #25
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f003 fee3 	bl	80072ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003534:	461a      	mov	r2, r3
 8003536:	2310      	movs	r3, #16
 8003538:	6093      	str	r3, [r2, #8]
 800353a:	e2a7      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f003 f92e 	bl	80067a6 <USB_ReadChInterrupts>
 800354a:	4603      	mov	r3, r0
 800354c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003550:	2b80      	cmp	r3, #128	@ 0x80
 8003552:	f040 8083 	bne.w	800365c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	799b      	ldrb	r3, [r3, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d111      	bne.n	8003582 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334d      	adds	r3, #77	@ 0x4d
 800356e:	2207      	movs	r2, #7
 8003570:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f003 feb7 	bl	80072ee <USB_HC_Halt>
 8003580:	e062      	b.n	8003648 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3344      	adds	r3, #68	@ 0x44
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	1c59      	adds	r1, r3, #1
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4403      	add	r3, r0
 80035a2:	3344      	adds	r3, #68	@ 0x44
 80035a4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3344      	adds	r3, #68	@ 0x44
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d922      	bls.n	8003602 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	3344      	adds	r3, #68	@ 0x44
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334c      	adds	r3, #76	@ 0x4c
 80035e0:	2204      	movs	r2, #4
 80035e2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	334c      	adds	r3, #76	@ 0x4c
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	4619      	mov	r1, r3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f006 f9d0 	bl	80099a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003600:	e022      	b.n	8003648 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	334c      	adds	r3, #76	@ 0x4c
 8003612:	2202      	movs	r2, #2
 8003614:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800362c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003634:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003654:	461a      	mov	r2, r3
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	6093      	str	r3, [r2, #8]
 800365a:	e217      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	4611      	mov	r1, r2
 8003664:	4618      	mov	r0, r3
 8003666:	f003 f89e 	bl	80067a6 <USB_ReadChInterrupts>
 800366a:	4603      	mov	r3, r0
 800366c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003674:	d11b      	bne.n	80036ae <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	334d      	adds	r3, #77	@ 0x4d
 8003686:	2209      	movs	r2, #9
 8003688:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fe2b 	bl	80072ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003698:	78fb      	ldrb	r3, [r7, #3]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036a4:	461a      	mov	r2, r3
 80036a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036aa:	6093      	str	r3, [r2, #8]
 80036ac:	e1ee      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f003 f875 	bl	80067a6 <USB_ReadChInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	f040 81df 	bne.w	8003a86 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d4:	461a      	mov	r2, r3
 80036d6:	2302      	movs	r3, #2
 80036d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	334d      	adds	r3, #77	@ 0x4d
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	f040 8093 	bne.w	8003818 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334d      	adds	r3, #77	@ 0x4d
 8003702:	2202      	movs	r2, #2
 8003704:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334c      	adds	r3, #76	@ 0x4c
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3326      	adds	r3, #38	@ 0x26
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d00b      	beq.n	8003748 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3326      	adds	r3, #38	@ 0x26
 8003740:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003742:	2b03      	cmp	r3, #3
 8003744:	f040 8190 	bne.w	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	799b      	ldrb	r3, [r3, #6]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d115      	bne.n	800377c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	333d      	adds	r3, #61	@ 0x3d
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2d8      	uxtb	r0, r3
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	333d      	adds	r3, #61	@ 0x3d
 8003778:	4602      	mov	r2, r0
 800377a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	799b      	ldrb	r3, [r3, #6]
 8003780:	2b01      	cmp	r3, #1
 8003782:	f040 8171 	bne.w	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
 8003786:	78fa      	ldrb	r2, [r7, #3]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	1a9b      	subs	r3, r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	3334      	adds	r3, #52	@ 0x34
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8165 	beq.w	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	3334      	adds	r3, #52	@ 0x34
 80037ae:	6819      	ldr	r1, [r3, #0]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4403      	add	r3, r0
 80037be:	3328      	adds	r3, #40	@ 0x28
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	440b      	add	r3, r1
 80037c4:	1e59      	subs	r1, r3, #1
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4403      	add	r3, r0
 80037d4:	3328      	adds	r3, #40	@ 0x28
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037dc:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 813f 	beq.w	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	440b      	add	r3, r1
 80037f8:	333d      	adds	r3, #61	@ 0x3d
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	f083 0301 	eor.w	r3, r3, #1
 8003802:	b2d8      	uxtb	r0, r3
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	333d      	adds	r3, #61	@ 0x3d
 8003812:	4602      	mov	r2, r0
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e127      	b.n	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	334d      	adds	r3, #77	@ 0x4d
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b03      	cmp	r3, #3
 800382c:	d120      	bne.n	8003870 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	334d      	adds	r3, #77	@ 0x4d
 800383e:	2202      	movs	r2, #2
 8003840:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	331b      	adds	r3, #27
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	f040 8107 	bne.w	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	334c      	adds	r3, #76	@ 0x4c
 800386a:	2202      	movs	r2, #2
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	e0fb      	b.n	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	334d      	adds	r3, #77	@ 0x4d
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b04      	cmp	r3, #4
 8003884:	d13a      	bne.n	80038fc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	334d      	adds	r3, #77	@ 0x4d
 8003896:	2202      	movs	r2, #2
 8003898:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	334c      	adds	r3, #76	@ 0x4c
 80038aa:	2202      	movs	r2, #2
 80038ac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	331b      	adds	r3, #27
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	f040 80d1 	bne.w	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80038c6:	78fa      	ldrb	r2, [r7, #3]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	011b      	lsls	r3, r3, #4
 80038ce:	1a9b      	subs	r3, r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	440b      	add	r3, r1
 80038d4:	331b      	adds	r3, #27
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	0151      	lsls	r1, r2, #5
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	440a      	add	r2, r1
 80038f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f8:	6053      	str	r3, [r2, #4]
 80038fa:	e0b5      	b.n	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	334d      	adds	r3, #77	@ 0x4d
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b05      	cmp	r3, #5
 8003910:	d114      	bne.n	800393c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	334d      	adds	r3, #77	@ 0x4d
 8003922:	2202      	movs	r2, #2
 8003924:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	334c      	adds	r3, #76	@ 0x4c
 8003936:	2202      	movs	r2, #2
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e095      	b.n	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	334d      	adds	r3, #77	@ 0x4d
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b06      	cmp	r3, #6
 8003950:	d114      	bne.n	800397c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	334d      	adds	r3, #77	@ 0x4d
 8003962:	2202      	movs	r2, #2
 8003964:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	334c      	adds	r3, #76	@ 0x4c
 8003976:	2205      	movs	r2, #5
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e075      	b.n	8003a68 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	334d      	adds	r3, #77	@ 0x4d
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b07      	cmp	r3, #7
 8003990:	d00a      	beq.n	80039a8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	334d      	adds	r3, #77	@ 0x4d
 80039a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039a4:	2b09      	cmp	r3, #9
 80039a6:	d170      	bne.n	8003a8a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	334d      	adds	r3, #77	@ 0x4d
 80039b8:	2202      	movs	r2, #2
 80039ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3344      	adds	r3, #68	@ 0x44
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	1c59      	adds	r1, r3, #1
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4403      	add	r3, r0
 80039dc:	3344      	adds	r3, #68	@ 0x44
 80039de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	3344      	adds	r3, #68	@ 0x44
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d914      	bls.n	8003a20 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3344      	adds	r3, #68	@ 0x44
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	334c      	adds	r3, #76	@ 0x4c
 8003a1a:	2204      	movs	r2, #4
 8003a1c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a1e:	e022      	b.n	8003a66 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a20:	78fa      	ldrb	r2, [r7, #3]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	334c      	adds	r3, #76	@ 0x4c
 8003a30:	2202      	movs	r2, #2
 8003a32:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a4a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a52:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a66:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	334c      	adds	r3, #76	@ 0x4c
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f005 ff8e 	bl	80099a0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a84:	e002      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003a8a:	bf00      	nop
  }
}
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b08a      	sub	sp, #40	@ 0x28
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	0c5b      	lsrs	r3, r3, #17
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d004      	beq.n	8003ad8 <HCD_RXQLVL_IRQHandler+0x46>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b05      	cmp	r3, #5
 8003ad2:	f000 80b6 	beq.w	8003c42 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003ad6:	e0b7      	b.n	8003c48 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80b3 	beq.w	8003c46 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	332c      	adds	r3, #44	@ 0x2c
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80a7 	beq.w	8003c46 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3338      	adds	r3, #56	@ 0x38
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	18d1      	adds	r1, r2, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4403      	add	r3, r0
 8003b1c:	3334      	adds	r3, #52	@ 0x34
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4299      	cmp	r1, r3
 8003b22:	f200 8083 	bhi.w	8003c2c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	332c      	adds	r3, #44	@ 0x2c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	f002 fdc5 	bl	80066d0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	332c      	adds	r3, #44	@ 0x2c
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	18d1      	adds	r1, r2, r3
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4613      	mov	r3, r2
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4403      	add	r3, r0
 8003b6a:	332c      	adds	r3, #44	@ 0x2c
 8003b6c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3338      	adds	r3, #56	@ 0x38
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	18d1      	adds	r1, r2, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4403      	add	r3, r0
 8003b92:	3338      	adds	r3, #56	@ 0x38
 8003b94:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	0cdb      	lsrs	r3, r3, #19
 8003ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003baa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3328      	adds	r3, #40	@ 0x28
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d13f      	bne.n	8003c46 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d03c      	beq.n	8003c46 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003be2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bea:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	333c      	adds	r3, #60	@ 0x3c
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	f083 0301 	eor.w	r3, r3, #1
 8003c14:	b2d8      	uxtb	r0, r3
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	333c      	adds	r3, #60	@ 0x3c
 8003c26:	4602      	mov	r2, r0
 8003c28:	701a      	strb	r2, [r3, #0]
      break;
 8003c2a:	e00c      	b.n	8003c46 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	334c      	adds	r3, #76	@ 0x4c
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	701a      	strb	r2, [r3, #0]
      break;
 8003c40:	e001      	b.n	8003c46 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003c46:	bf00      	nop
  }
}
 8003c48:	bf00      	nop
 8003c4a:	3728      	adds	r7, #40	@ 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003c7c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d10b      	bne.n	8003ca0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d102      	bne.n	8003c98 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f005 fe68 	bl	8009968 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	f043 0302 	orr.w	r3, r3, #2
 8003c9e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d132      	bne.n	8003d10 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f043 0308 	orr.w	r3, r3, #8
 8003cb0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d126      	bne.n	8003d0a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7a5b      	ldrb	r3, [r3, #9]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d113      	bne.n	8003cec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003cca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cce:	d106      	bne.n	8003cde <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 fe8a 	bl	80069f0 <USB_InitFSLSPClkSel>
 8003cdc:	e011      	b.n	8003d02 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f002 fe83 	bl	80069f0 <USB_InitFSLSPClkSel>
 8003cea:	e00a      	b.n	8003d02 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	79db      	ldrb	r3, [r3, #7]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d106      	bne.n	8003d02 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003d00:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f005 fe5a 	bl	80099bc <HAL_HCD_PortEnabled_Callback>
 8003d08:	e002      	b.n	8003d10 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f005 fe64 	bl	80099d8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d103      	bne.n	8003d22 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f043 0320 	orr.w	r3, r3, #32
 8003d20:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003d28:	461a      	mov	r2, r3
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6013      	str	r3, [r2, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e12b      	b.n	8003fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd f8da 	bl	8000f18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2224      	movs	r2, #36	@ 0x24
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0201 	bic.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d9c:	f000 fd80 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 8003da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4a81      	ldr	r2, [pc, #516]	@ (8003fac <HAL_I2C_Init+0x274>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d807      	bhi.n	8003dbc <HAL_I2C_Init+0x84>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a80      	ldr	r2, [pc, #512]	@ (8003fb0 <HAL_I2C_Init+0x278>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bf94      	ite	ls
 8003db4:	2301      	movls	r3, #1
 8003db6:	2300      	movhi	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	e006      	b.n	8003dca <HAL_I2C_Init+0x92>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a7d      	ldr	r2, [pc, #500]	@ (8003fb4 <HAL_I2C_Init+0x27c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	bf94      	ite	ls
 8003dc4:	2301      	movls	r3, #1
 8003dc6:	2300      	movhi	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0e7      	b.n	8003fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a78      	ldr	r2, [pc, #480]	@ (8003fb8 <HAL_I2C_Init+0x280>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	0c9b      	lsrs	r3, r3, #18
 8003ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4a6a      	ldr	r2, [pc, #424]	@ (8003fac <HAL_I2C_Init+0x274>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d802      	bhi.n	8003e0c <HAL_I2C_Init+0xd4>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	e009      	b.n	8003e20 <HAL_I2C_Init+0xe8>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e12:	fb02 f303 	mul.w	r3, r2, r3
 8003e16:	4a69      	ldr	r2, [pc, #420]	@ (8003fbc <HAL_I2C_Init+0x284>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	3301      	adds	r3, #1
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	495c      	ldr	r1, [pc, #368]	@ (8003fac <HAL_I2C_Init+0x274>)
 8003e3c:	428b      	cmp	r3, r1
 8003e3e:	d819      	bhi.n	8003e74 <HAL_I2C_Init+0x13c>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1e59      	subs	r1, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e4e:	1c59      	adds	r1, r3, #1
 8003e50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e54:	400b      	ands	r3, r1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_I2C_Init+0x138>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1e59      	subs	r1, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e6e:	e051      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003e70:	2304      	movs	r3, #4
 8003e72:	e04f      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d111      	bne.n	8003ea0 <HAL_I2C_Init+0x168>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1e58      	subs	r0, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	440b      	add	r3, r1
 8003e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e012      	b.n	8003ec6 <HAL_I2C_Init+0x18e>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1e58      	subs	r0, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6859      	ldr	r1, [r3, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	0099      	lsls	r1, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_I2C_Init+0x196>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e022      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_I2C_Init+0x1bc>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1e58      	subs	r0, r3, #1
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6859      	ldr	r1, [r3, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	440b      	add	r3, r1
 8003ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ee8:	3301      	adds	r3, #1
 8003eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ef2:	e00f      	b.n	8003f14 <HAL_I2C_Init+0x1dc>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1e58      	subs	r0, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6859      	ldr	r1, [r3, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	0099      	lsls	r1, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	6809      	ldr	r1, [r1, #0]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69da      	ldr	r2, [r3, #28]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6911      	ldr	r1, [r2, #16]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68d2      	ldr	r2, [r2, #12]
 8003f4e:	4311      	orrs	r1, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695a      	ldr	r2, [r3, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	000186a0 	.word	0x000186a0
 8003fb0:	001e847f 	.word	0x001e847f
 8003fb4:	003d08ff 	.word	0x003d08ff
 8003fb8:	431bde83 	.word	0x431bde83
 8003fbc:	10624dd3 	.word	0x10624dd3

08003fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e267      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d075      	beq.n	80040ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fde:	4b88      	ldr	r3, [pc, #544]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d00c      	beq.n	8004004 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fea:	4b85      	ldr	r3, [pc, #532]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d112      	bne.n	800401c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff6:	4b82      	ldr	r3, [pc, #520]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ffe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004002:	d10b      	bne.n	800401c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	4b7e      	ldr	r3, [pc, #504]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d05b      	beq.n	80040c8 <HAL_RCC_OscConfig+0x108>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d157      	bne.n	80040c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e242      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x74>
 8004026:	4b76      	ldr	r3, [pc, #472]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a75      	ldr	r2, [pc, #468]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e01d      	b.n	8004070 <HAL_RCC_OscConfig+0xb0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800403c:	d10c      	bne.n	8004058 <HAL_RCC_OscConfig+0x98>
 800403e:	4b70      	ldr	r3, [pc, #448]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6f      	ldr	r2, [pc, #444]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b6d      	ldr	r3, [pc, #436]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a6c      	ldr	r2, [pc, #432]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004054:	6013      	str	r3, [r2, #0]
 8004056:	e00b      	b.n	8004070 <HAL_RCC_OscConfig+0xb0>
 8004058:	4b69      	ldr	r3, [pc, #420]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a68      	ldr	r2, [pc, #416]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b66      	ldr	r3, [pc, #408]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a65      	ldr	r2, [pc, #404]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 800406a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800406e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fd fa10 	bl	800149c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004080:	f7fd fa0c 	bl	800149c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	@ 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e207      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	4b5b      	ldr	r3, [pc, #364]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCC_OscConfig+0xc0>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fd f9fc 	bl	800149c <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fd f9f8 	bl	800149c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	@ 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e1f3      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ba:	4b51      	ldr	r3, [pc, #324]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0xe8>
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d063      	beq.n	800419e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e2:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d11c      	bne.n	8004128 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ee:	4b44      	ldr	r3, [pc, #272]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d116      	bne.n	8004128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fa:	4b41      	ldr	r3, [pc, #260]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_RCC_OscConfig+0x152>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d001      	beq.n	8004112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e1c7      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004112:	4b3b      	ldr	r3, [pc, #236]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4937      	ldr	r1, [pc, #220]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004126:	e03a      	b.n	800419e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004130:	4b34      	ldr	r3, [pc, #208]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fd f9b1 	bl	800149c <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413e:	f7fd f9ad 	bl	800149c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1a8      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	4b2b      	ldr	r3, [pc, #172]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415c:	4b28      	ldr	r3, [pc, #160]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4925      	ldr	r1, [pc, #148]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]
 8004170:	e015      	b.n	800419e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004172:	4b24      	ldr	r3, [pc, #144]	@ (8004204 <HAL_RCC_OscConfig+0x244>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fd f990 	bl	800149c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004180:	f7fd f98c 	bl	800149c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e187      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	4b1b      	ldr	r3, [pc, #108]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d036      	beq.n	8004218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d016      	beq.n	80041e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b2:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <HAL_RCC_OscConfig+0x248>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b8:	f7fd f970 	bl	800149c <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fd f96c 	bl	800149c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e167      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <HAL_RCC_OscConfig+0x240>)
 80041d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x200>
 80041de:	e01b      	b.n	8004218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <HAL_RCC_OscConfig+0x248>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e6:	f7fd f959 	bl	800149c <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ec:	e00e      	b.n	800420c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ee:	f7fd f955 	bl	800149c <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d907      	bls.n	800420c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e150      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
 8004200:	40023800 	.word	0x40023800
 8004204:	42470000 	.word	0x42470000
 8004208:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	4b88      	ldr	r3, [pc, #544]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 800420e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ea      	bne.n	80041ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8097 	beq.w	8004354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	2300      	movs	r3, #0
 8004228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b81      	ldr	r3, [pc, #516]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10f      	bne.n	8004256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	4b7d      	ldr	r3, [pc, #500]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	4a7c      	ldr	r2, [pc, #496]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004244:	6413      	str	r3, [r2, #64]	@ 0x40
 8004246:	4b7a      	ldr	r3, [pc, #488]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b77      	ldr	r3, [pc, #476]	@ (8004434 <HAL_RCC_OscConfig+0x474>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425e:	2b00      	cmp	r3, #0
 8004260:	d118      	bne.n	8004294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004262:	4b74      	ldr	r3, [pc, #464]	@ (8004434 <HAL_RCC_OscConfig+0x474>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a73      	ldr	r2, [pc, #460]	@ (8004434 <HAL_RCC_OscConfig+0x474>)
 8004268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800426c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426e:	f7fd f915 	bl	800149c <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004276:	f7fd f911 	bl	800149c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e10c      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	4b6a      	ldr	r3, [pc, #424]	@ (8004434 <HAL_RCC_OscConfig+0x474>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d106      	bne.n	80042aa <HAL_RCC_OscConfig+0x2ea>
 800429c:	4b64      	ldr	r3, [pc, #400]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 800429e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042a0:	4a63      	ldr	r2, [pc, #396]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a8:	e01c      	b.n	80042e4 <HAL_RCC_OscConfig+0x324>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b05      	cmp	r3, #5
 80042b0:	d10c      	bne.n	80042cc <HAL_RCC_OscConfig+0x30c>
 80042b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042be:	4b5c      	ldr	r3, [pc, #368]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80042c4:	f043 0301 	orr.w	r3, r3, #1
 80042c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0x324>
 80042cc:	4b58      	ldr	r3, [pc, #352]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d0:	4a57      	ldr	r2, [pc, #348]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80042d2:	f023 0301 	bic.w	r3, r3, #1
 80042d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d8:	4b55      	ldr	r3, [pc, #340]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042dc:	4a54      	ldr	r2, [pc, #336]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80042de:	f023 0304 	bic.w	r3, r3, #4
 80042e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fd f8d6 	bl	800149c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f2:	e00a      	b.n	800430a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7fd f8d2 	bl	800149c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e0cb      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430a:	4b49      	ldr	r3, [pc, #292]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ee      	beq.n	80042f4 <HAL_RCC_OscConfig+0x334>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004318:	f7fd f8c0 	bl	800149c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fd f8bc 	bl	800149c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0b5      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004336:	4b3e      	ldr	r3, [pc, #248]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1ee      	bne.n	8004320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004348:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	4a38      	ldr	r2, [pc, #224]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 800434e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004352:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80a1 	beq.w	80044a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800435e:	4b34      	ldr	r3, [pc, #208]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b08      	cmp	r3, #8
 8004368:	d05c      	beq.n	8004424 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b02      	cmp	r3, #2
 8004370:	d141      	bne.n	80043f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004372:	4b31      	ldr	r3, [pc, #196]	@ (8004438 <HAL_RCC_OscConfig+0x478>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fd f890 	bl	800149c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004380:	f7fd f88c 	bl	800149c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e087      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004392:	4b27      	ldr	r3, [pc, #156]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69da      	ldr	r2, [r3, #28]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	019b      	lsls	r3, r3, #6
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	3b01      	subs	r3, #1
 80043b8:	041b      	lsls	r3, r3, #16
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	061b      	lsls	r3, r3, #24
 80043c2:	491b      	ldr	r1, [pc, #108]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004438 <HAL_RCC_OscConfig+0x478>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fd f865 	bl	800149c <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fd f861 	bl	800149c <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e05c      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e8:	4b11      	ldr	r3, [pc, #68]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x416>
 80043f4:	e054      	b.n	80044a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b10      	ldr	r3, [pc, #64]	@ (8004438 <HAL_RCC_OscConfig+0x478>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fd f84e 	bl	800149c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd f84a 	bl	800149c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e045      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	4b06      	ldr	r3, [pc, #24]	@ (8004430 <HAL_RCC_OscConfig+0x470>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x444>
 8004422:	e03d      	b.n	80044a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d107      	bne.n	800443c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e038      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
 8004430:	40023800 	.word	0x40023800
 8004434:	40007000 	.word	0x40007000
 8004438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800443c:	4b1b      	ldr	r3, [pc, #108]	@ (80044ac <HAL_RCC_OscConfig+0x4ec>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d028      	beq.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004454:	429a      	cmp	r2, r3
 8004456:	d121      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d11a      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004474:	4293      	cmp	r3, r2
 8004476:	d111      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	3b01      	subs	r3, #1
 8004486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d107      	bne.n	800449c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800

080044b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0cc      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c4:	4b68      	ldr	r3, [pc, #416]	@ (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d90c      	bls.n	80044ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	4b65      	ldr	r3, [pc, #404]	@ (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80044d4:	683a      	ldr	r2, [r7, #0]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b63      	ldr	r3, [pc, #396]	@ (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0b8      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d020      	beq.n	800453a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004504:	4b59      	ldr	r3, [pc, #356]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4a58      	ldr	r2, [pc, #352]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800450e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d005      	beq.n	8004528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800451c:	4b53      	ldr	r3, [pc, #332]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4a52      	ldr	r2, [pc, #328]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004528:	4b50      	ldr	r3, [pc, #320]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	494d      	ldr	r1, [pc, #308]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d044      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b47      	ldr	r3, [pc, #284]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d119      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d003      	beq.n	800456e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456a:	2b03      	cmp	r3, #3
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800456e:	4b3f      	ldr	r3, [pc, #252]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e06f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800457e:	4b3b      	ldr	r3, [pc, #236]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e067      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458e:	4b37      	ldr	r3, [pc, #220]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f023 0203 	bic.w	r2, r3, #3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	4934      	ldr	r1, [pc, #208]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	4313      	orrs	r3, r2
 800459e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a0:	f7fc ff7c 	bl	800149c <HAL_GetTick>
 80045a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a6:	e00a      	b.n	80045be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a8:	f7fc ff78 	bl	800149c <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e04f      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045be:	4b2b      	ldr	r3, [pc, #172]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 020c 	and.w	r2, r3, #12
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d1eb      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d0:	4b25      	ldr	r3, [pc, #148]	@ (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d20c      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045de:	4b22      	ldr	r3, [pc, #136]	@ (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e6:	4b20      	ldr	r3, [pc, #128]	@ (8004668 <HAL_RCC_ClockConfig+0x1b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e032      	b.n	800465e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004604:	4b19      	ldr	r3, [pc, #100]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4916      	ldr	r1, [pc, #88]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004622:	4b12      	ldr	r3, [pc, #72]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	490e      	ldr	r1, [pc, #56]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004636:	f000 f821 	bl	800467c <HAL_RCC_GetSysClockFreq>
 800463a:	4602      	mov	r2, r0
 800463c:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	490a      	ldr	r1, [pc, #40]	@ (8004670 <HAL_RCC_ClockConfig+0x1c0>)
 8004648:	5ccb      	ldrb	r3, [r1, r3]
 800464a:	fa22 f303 	lsr.w	r3, r2, r3
 800464e:	4a09      	ldr	r2, [pc, #36]	@ (8004674 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004652:	4b09      	ldr	r3, [pc, #36]	@ (8004678 <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fc fedc 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	40023c00 	.word	0x40023c00
 800466c:	40023800 	.word	0x40023800
 8004670:	0800a094 	.word	0x0800a094
 8004674:	20000000 	.word	0x20000000
 8004678:	20000004 	.word	0x20000004

0800467c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800467c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004680:	b094      	sub	sp, #80	@ 0x50
 8004682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004694:	4b79      	ldr	r3, [pc, #484]	@ (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 030c 	and.w	r3, r3, #12
 800469c:	2b08      	cmp	r3, #8
 800469e:	d00d      	beq.n	80046bc <HAL_RCC_GetSysClockFreq+0x40>
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	f200 80e1 	bhi.w	8004868 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x34>
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d003      	beq.n	80046b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ae:	e0db      	b.n	8004868 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046b0:	4b73      	ldr	r3, [pc, #460]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x204>)
 80046b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b4:	e0db      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b6:	4b73      	ldr	r3, [pc, #460]	@ (8004884 <HAL_RCC_GetSysClockFreq+0x208>)
 80046b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ba:	e0d8      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046bc:	4b6f      	ldr	r3, [pc, #444]	@ (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046c6:	4b6d      	ldr	r3, [pc, #436]	@ (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d063      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046d2:	4b6a      	ldr	r3, [pc, #424]	@ (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	099b      	lsrs	r3, r3, #6
 80046d8:	2200      	movs	r2, #0
 80046da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80046e6:	2300      	movs	r3, #0
 80046e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046ee:	4622      	mov	r2, r4
 80046f0:	462b      	mov	r3, r5
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f04f 0100 	mov.w	r1, #0
 80046fa:	0159      	lsls	r1, r3, #5
 80046fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004700:	0150      	lsls	r0, r2, #5
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4621      	mov	r1, r4
 8004708:	1a51      	subs	r1, r2, r1
 800470a:	6139      	str	r1, [r7, #16]
 800470c:	4629      	mov	r1, r5
 800470e:	eb63 0301 	sbc.w	r3, r3, r1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004720:	4659      	mov	r1, fp
 8004722:	018b      	lsls	r3, r1, #6
 8004724:	4651      	mov	r1, sl
 8004726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800472a:	4651      	mov	r1, sl
 800472c:	018a      	lsls	r2, r1, #6
 800472e:	4651      	mov	r1, sl
 8004730:	ebb2 0801 	subs.w	r8, r2, r1
 8004734:	4659      	mov	r1, fp
 8004736:	eb63 0901 	sbc.w	r9, r3, r1
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800474a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474e:	4690      	mov	r8, r2
 8004750:	4699      	mov	r9, r3
 8004752:	4623      	mov	r3, r4
 8004754:	eb18 0303 	adds.w	r3, r8, r3
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	462b      	mov	r3, r5
 800475c:	eb49 0303 	adc.w	r3, r9, r3
 8004760:	60fb      	str	r3, [r7, #12]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800476e:	4629      	mov	r1, r5
 8004770:	024b      	lsls	r3, r1, #9
 8004772:	4621      	mov	r1, r4
 8004774:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004778:	4621      	mov	r1, r4
 800477a:	024a      	lsls	r2, r1, #9
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004782:	2200      	movs	r2, #0
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004786:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004788:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800478c:	f7fb fd1c 	bl	80001c8 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4613      	mov	r3, r2
 8004796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004798:	e058      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800479a:	4b38      	ldr	r3, [pc, #224]	@ (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	099b      	lsrs	r3, r3, #6
 80047a0:	2200      	movs	r2, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	4611      	mov	r1, r2
 80047a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047aa:	623b      	str	r3, [r7, #32]
 80047ac:	2300      	movs	r3, #0
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80047b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	f04f 0000 	mov.w	r0, #0
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	0159      	lsls	r1, r3, #5
 80047c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c6:	0150      	lsls	r0, r2, #5
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4641      	mov	r1, r8
 80047ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80047d2:	4649      	mov	r1, r9
 80047d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047ec:	ebb2 040a 	subs.w	r4, r2, sl
 80047f0:	eb63 050b 	sbc.w	r5, r3, fp
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	00eb      	lsls	r3, r5, #3
 80047fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004802:	00e2      	lsls	r2, r4, #3
 8004804:	4614      	mov	r4, r2
 8004806:	461d      	mov	r5, r3
 8004808:	4643      	mov	r3, r8
 800480a:	18e3      	adds	r3, r4, r3
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	464b      	mov	r3, r9
 8004810:	eb45 0303 	adc.w	r3, r5, r3
 8004814:	607b      	str	r3, [r7, #4]
 8004816:	f04f 0200 	mov.w	r2, #0
 800481a:	f04f 0300 	mov.w	r3, #0
 800481e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004822:	4629      	mov	r1, r5
 8004824:	028b      	lsls	r3, r1, #10
 8004826:	4621      	mov	r1, r4
 8004828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800482c:	4621      	mov	r1, r4
 800482e:	028a      	lsls	r2, r1, #10
 8004830:	4610      	mov	r0, r2
 8004832:	4619      	mov	r1, r3
 8004834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004836:	2200      	movs	r2, #0
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	61fa      	str	r2, [r7, #28]
 800483c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004840:	f7fb fcc2 	bl	80001c8 <__aeabi_uldivmod>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4613      	mov	r3, r2
 800484a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800484c:	4b0b      	ldr	r3, [pc, #44]	@ (800487c <HAL_RCC_GetSysClockFreq+0x200>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	3301      	adds	r3, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800485c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800485e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004866:	e002      	b.n	800486e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004868:	4b05      	ldr	r3, [pc, #20]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x204>)
 800486a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800486c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004870:	4618      	mov	r0, r3
 8004872:	3750      	adds	r7, #80	@ 0x50
 8004874:	46bd      	mov	sp, r7
 8004876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800
 8004880:	00f42400 	.word	0x00f42400
 8004884:	007a1200 	.word	0x007a1200

08004888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800488c:	4b03      	ldr	r3, [pc, #12]	@ (800489c <HAL_RCC_GetHCLKFreq+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000000 	.word	0x20000000

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a4:	f7ff fff0 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b05      	ldr	r3, [pc, #20]	@ (80048c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	0a9b      	lsrs	r3, r3, #10
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4903      	ldr	r1, [pc, #12]	@ (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40023800 	.word	0x40023800
 80048c4:	0800a0a4 	.word	0x0800a0a4

080048c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07b      	b.n	80049d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d108      	bne.n	80048f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80048ea:	d009      	beq.n	8004900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	61da      	str	r2, [r3, #28]
 80048f2:	e005      	b.n	8004900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fc fb44 	bl	8000fa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004936:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004984:	ea42 0103 	orr.w	r1, r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	f003 0104 	and.w	r1, r3, #4
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a6:	f003 0210 	and.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <HAL_SPI_Receive_IT+0x1e>
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
 80049f8:	e07f      	b.n	8004afa <HAL_SPI_Receive_IT+0x11e>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d110      	bne.n	8004a24 <HAL_SPI_Receive_IT+0x48>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a0a:	d10b      	bne.n	8004a24 <HAL_SPI_Receive_IT+0x48>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2204      	movs	r2, #4
 8004a10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f876 	bl	8004b0c <HAL_SPI_TransmitReceive_IT>
 8004a20:	4603      	mov	r3, r0
 8004a22:	e06a      	b.n	8004afa <HAL_SPI_Receive_IT+0x11e>
  }


  if ((pData == NULL) || (Size == 0U))
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_SPI_Receive_IT+0x54>
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_SPI_Receive_IT+0x58>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e062      	b.n	8004afa <HAL_SPI_Receive_IT+0x11e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_SPI_Receive_IT+0x66>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e05b      	b.n	8004afa <HAL_SPI_Receive_IT+0x11e>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	88fa      	ldrh	r2, [r7, #6]
 8004a62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	88fa      	ldrh	r2, [r7, #6]
 8004a68:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxISR       = NULL;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_SPI_Receive_IT+0xb6>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b04 <HAL_SPI_Receive_IT+0x128>)
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a90:	e002      	b.n	8004a98 <HAL_SPI_Receive_IT+0xbc>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a1c      	ldr	r2, [pc, #112]	@ (8004b08 <HAL_SPI_Receive_IT+0x12c>)
 8004a96:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_SPI_Receive_IT+0xe6>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ac0:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d007      	beq.n	8004ae0 <HAL_SPI_Receive_IT+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8004af6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	0800502d 	.word	0x0800502d
 8004b08:	08004fe3 	.word	0x08004fe3

08004b0c <HAL_SPI_TransmitReceive_IT>:
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b20:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d00c      	beq.n	8004b48 <HAL_SPI_TransmitReceive_IT+0x3c>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b34:	d106      	bne.n	8004b44 <HAL_SPI_TransmitReceive_IT+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <HAL_SPI_TransmitReceive_IT+0x38>
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d001      	beq.n	8004b48 <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
 8004b46:	e061      	b.n	8004c0c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_SPI_TransmitReceive_IT+0x4e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <HAL_SPI_TransmitReceive_IT+0x4e>
 8004b54:	887b      	ldrh	r3, [r7, #2]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_SPI_TransmitReceive_IT+0x52>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e056      	b.n	8004c0c <HAL_SPI_TransmitReceive_IT+0x100>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_SPI_TransmitReceive_IT+0x60>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e04f      	b.n	8004c0c <HAL_SPI_TransmitReceive_IT+0x100>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b04      	cmp	r3, #4
 8004b7e:	d003      	beq.n	8004b88 <HAL_SPI_TransmitReceive_IT+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2205      	movs	r2, #5
 8004b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	887a      	ldrh	r2, [r7, #2]
 8004b98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	887a      	ldrh	r2, [r7, #2]
 8004b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	887a      	ldrh	r2, [r7, #2]
 8004baa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	887a      	ldrh	r2, [r7, #2]
 8004bb0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d006      	beq.n	8004bc8 <HAL_SPI_TransmitReceive_IT+0xbc>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	@ (8004c18 <HAL_SPI_TransmitReceive_IT+0x10c>)
 8004bbe:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a16      	ldr	r2, [pc, #88]	@ (8004c1c <HAL_SPI_TransmitReceive_IT+0x110>)
 8004bc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004bc6:	e005      	b.n	8004bd4 <HAL_SPI_TransmitReceive_IT+0xc8>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a15      	ldr	r2, [pc, #84]	@ (8004c20 <HAL_SPI_TransmitReceive_IT+0x114>)
 8004bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a14      	ldr	r2, [pc, #80]	@ (8004c24 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004bd2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bde:	2b40      	cmp	r3, #64	@ 0x40
 8004be0:	d007      	beq.n	8004bf2 <HAL_SPI_TransmitReceive_IT+0xe6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bf0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004c08:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	08004f25 	.word	0x08004f25
 8004c1c:	08004f85 	.word	0x08004f85
 8004c20:	08004e61 	.word	0x08004e61
 8004c24:	08004ec5 	.word	0x08004ec5

08004c28 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10e      	bne.n	8004c68 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
    return;
 8004c66:	e0ce      	b.n	8004e06 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <HAL_SPI_IRQHandler+0x5e>
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
    return;
 8004c84:	e0bf      	b.n	8004e06 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_SPI_IRQHandler+0x7e>
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d105      	bne.n	8004ca6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80b0 	beq.w	8004e06 <HAL_SPI_IRQHandler+0x1de>
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80aa 	beq.w	8004e06 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d023      	beq.n	8004d04 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d011      	beq.n	8004cec <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ccc:	f043 0204 	orr.w	r2, r3, #4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	e00b      	b.n	8004d04 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	693b      	ldr	r3, [r7, #16]
        return;
 8004d02:	e080      	b.n	8004e06 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d014      	beq.n	8004d38 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d46:	f043 0208 	orr.w	r2, r3, #8
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d04f      	beq.n	8004e04 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004d72:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d104      	bne.n	8004d90 <HAL_SPI_IRQHandler+0x168>
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d034      	beq.n	8004dfa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0203 	bic.w	r2, r2, #3
 8004d9e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d011      	beq.n	8004dcc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dac:	4a17      	ldr	r2, [pc, #92]	@ (8004e0c <HAL_SPI_IRQHandler+0x1e4>)
 8004dae:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7fc fcb2 	bl	800171e <HAL_DMA_Abort_IT>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d016      	beq.n	8004e02 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8004e0c <HAL_SPI_IRQHandler+0x1e4>)
 8004dda:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fc fc9c 	bl	800171e <HAL_DMA_Abort_IT>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004df8:	e003      	b.n	8004e02 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f812 	bl	8004e24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e00:	e000      	b.n	8004e04 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004e02:	bf00      	nop
    return;
 8004e04:	bf00      	nop
  }
}
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	08004e39 	.word	0x08004e39

08004e10 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff ffe6 	bl	8004e24 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f103 020c 	add.w	r2, r3, #12
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e74:	7812      	ldrb	r2, [r2, #0]
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10f      	bne.n	8004ebc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004eaa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa1e 	bl	80052f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10f      	bne.n	8004f1c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f0a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f9ee 	bl	80052f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	b292      	uxth	r2, r2
 8004f38:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3e:	1c9a      	adds	r2, r3, #2
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10f      	bne.n	8004f7c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f6a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9be 	bl	80052f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f90:	881a      	ldrh	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f9c:	1c9a      	adds	r2, r3, #2
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10f      	bne.n	8004fda <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fc8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d102      	bne.n	8004fda <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f98f 	bl	80052f8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f103 020c 	add.w	r2, r3, #12
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff6:	7812      	ldrb	r2, [r2, #0]
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d102      	bne.n	8005024 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9de 	bl	80053e0 <SPI_CloseRx_ISR>
  }
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	b292      	uxth	r2, r2
 8005040:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005046:	1c9a      	adds	r2, r3, #2
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	87da      	strh	r2, [r3, #62]	@ 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800505e:	b29b      	uxth	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d102      	bne.n	800506a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f9bb 	bl	80053e0 <SPI_CloseRx_ISR>
  }
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005084:	f7fc fa0a 	bl	800149c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508c:	1a9b      	subs	r3, r3, r2
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	4413      	add	r3, r2
 8005092:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005094:	f7fc fa02 	bl	800149c <HAL_GetTick>
 8005098:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800509a:	4b39      	ldr	r3, [pc, #228]	@ (8005180 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	015b      	lsls	r3, r3, #5
 80050a0:	0d1b      	lsrs	r3, r3, #20
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
 80050a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050aa:	e054      	b.n	8005156 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d050      	beq.n	8005156 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b4:	f7fc f9f2 	bl	800149c <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d902      	bls.n	80050ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d13d      	bne.n	8005146 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80050d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050e2:	d111      	bne.n	8005108 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ec:	d004      	beq.n	80050f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f6:	d107      	bne.n	8005108 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005110:	d10f      	bne.n	8005132 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005130:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e017      	b.n	8005176 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3b01      	subs	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	429a      	cmp	r2, r3
 8005164:	bf0c      	ite	eq
 8005166:	2301      	moveq	r3, #1
 8005168:	2300      	movne	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	429a      	cmp	r2, r3
 8005172:	d19b      	bne.n	80050ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3720      	adds	r7, #32
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000000 	.word	0x20000000

08005184 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005198:	d111      	bne.n	80051be <SPI_EndRxTransaction+0x3a>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051a2:	d004      	beq.n	80051ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ac:	d107      	bne.n	80051be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051c6:	d12a      	bne.n	800521e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d0:	d012      	beq.n	80051f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2200      	movs	r2, #0
 80051da:	2180      	movs	r1, #128	@ 0x80
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff ff49 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d02d      	beq.n	8005244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e026      	b.n	8005246 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2200      	movs	r2, #0
 8005200:	2101      	movs	r1, #1
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f7ff ff36 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d01a      	beq.n	8005244 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e013      	b.n	8005246 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2200      	movs	r2, #0
 8005226:	2101      	movs	r1, #1
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7ff ff23 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	f043 0220 	orr.w	r2, r3, #32
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e000      	b.n	8005246 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2201      	movs	r2, #1
 8005264:	2102      	movs	r1, #2
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff ff04 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d007      	beq.n	8005282 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005276:	f043 0220 	orr.w	r2, r3, #32
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e032      	b.n	80052e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005282:	4b1b      	ldr	r3, [pc, #108]	@ (80052f0 <SPI_EndRxTxTransaction+0xa0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1b      	ldr	r2, [pc, #108]	@ (80052f4 <SPI_EndRxTxTransaction+0xa4>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	0d5b      	lsrs	r3, r3, #21
 800528e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005292:	fb02 f303 	mul.w	r3, r2, r3
 8005296:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052a0:	d112      	bne.n	80052c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2180      	movs	r1, #128	@ 0x80
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff fee1 	bl	8005074 <SPI_WaitFlagStateUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d016      	beq.n	80052e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e00f      	b.n	80052e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052de:	2b80      	cmp	r3, #128	@ 0x80
 80052e0:	d0f2      	beq.n	80052c8 <SPI_EndRxTxTransaction+0x78>
 80052e2:	e000      	b.n	80052e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80052e4:	bf00      	nop
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000000 	.word	0x20000000
 80052f4:	165e9f81 	.word	0x165e9f81

080052f8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005300:	4b35      	ldr	r3, [pc, #212]	@ (80053d8 <SPI_CloseRxTx_ISR+0xe0>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a35      	ldr	r2, [pc, #212]	@ (80053dc <SPI_CloseRxTx_ISR+0xe4>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	0a5b      	lsrs	r3, r3, #9
 800530c:	2264      	movs	r2, #100	@ 0x64
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005314:	f7fc f8c2 	bl	800149c <HAL_GetTick>
 8005318:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0220 	bic.w	r2, r2, #32
 8005328:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800533c:	e009      	b.n	8005352 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	3b01      	subs	r3, #1
 8005342:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0eb      	beq.n	800532a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	2164      	movs	r1, #100	@ 0x64
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff ff7a 	bl	8005250 <SPI_EndRxTxTransaction>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	f043 0220 	orr.w	r2, r3, #32
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005390:	2b00      	cmp	r3, #0
 8005392:	d115      	bne.n	80053c0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b04      	cmp	r3, #4
 800539e:	d107      	bne.n	80053b0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f7fb fc15 	bl	8000bd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80053ae:	e00e      	b.n	80053ce <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fd29 	bl	8004e10 <HAL_SPI_TxRxCpltCallback>
}
 80053be:	e006      	b.n	80053ce <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff fd2b 	bl	8004e24 <HAL_SPI_ErrorCallback>
}
 80053ce:	bf00      	nop
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000000 	.word	0x20000000
 80053dc:	057619f1 	.word	0x057619f1

080053e0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053f6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80053f8:	f7fc f850 	bl	800149c <HAL_GetTick>
 80053fc:	4603      	mov	r3, r0
 80053fe:	461a      	mov	r2, r3
 8005400:	2164      	movs	r1, #100	@ 0x64
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7ff febe 	bl	8005184 <SPI_EndRxTransaction>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005444:	2b00      	cmp	r3, #0
 8005446:	d103      	bne.n	8005450 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fb fbc5 	bl	8000bd8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800544e:	e002      	b.n	8005456 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7ff fce7 	bl	8004e24 <HAL_SPI_ErrorCallback>
}
 8005456:	bf00      	nop
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e041      	b.n	80054f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7fb fe35 	bl	80010f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2202      	movs	r2, #2
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	3304      	adds	r3, #4
 800549a:	4619      	mov	r1, r3
 800549c:	4610      	mov	r0, r2
 800549e:	f000 fbfb 	bl	8005c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e041      	b.n	8005592 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d106      	bne.n	8005528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f839 	bl	800559a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3304      	adds	r3, #4
 8005538:	4619      	mov	r1, r3
 800553a:	4610      	mov	r0, r2
 800553c:	f000 fbac 	bl	8005c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <HAL_TIM_PWM_Start+0x24>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e022      	b.n	800561a <HAL_TIM_PWM_Start+0x6a>
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d109      	bne.n	80055ee <HAL_TIM_PWM_Start+0x3e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	e015      	b.n	800561a <HAL_TIM_PWM_Start+0x6a>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d109      	bne.n	8005608 <HAL_TIM_PWM_Start+0x58>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	bf14      	ite	ne
 8005600:	2301      	movne	r3, #1
 8005602:	2300      	moveq	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e008      	b.n	800561a <HAL_TIM_PWM_Start+0x6a>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	bf14      	ite	ne
 8005614:	2301      	movne	r3, #1
 8005616:	2300      	moveq	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e07c      	b.n	800571c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <HAL_TIM_PWM_Start+0x82>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005630:	e013      	b.n	800565a <HAL_TIM_PWM_Start+0xaa>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b04      	cmp	r3, #4
 8005636:	d104      	bne.n	8005642 <HAL_TIM_PWM_Start+0x92>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005640:	e00b      	b.n	800565a <HAL_TIM_PWM_Start+0xaa>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b08      	cmp	r3, #8
 8005646:	d104      	bne.n	8005652 <HAL_TIM_PWM_Start+0xa2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005650:	e003      	b.n	800565a <HAL_TIM_PWM_Start+0xaa>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2201      	movs	r2, #1
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fe0e 	bl	8006284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a2d      	ldr	r2, [pc, #180]	@ (8005724 <HAL_TIM_PWM_Start+0x174>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_TIM_PWM_Start+0xcc>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a2c      	ldr	r2, [pc, #176]	@ (8005728 <HAL_TIM_PWM_Start+0x178>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <HAL_TIM_PWM_Start+0xd0>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_TIM_PWM_Start+0xd2>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d007      	beq.n	8005696 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005694:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a22      	ldr	r2, [pc, #136]	@ (8005724 <HAL_TIM_PWM_Start+0x174>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d022      	beq.n	80056e6 <HAL_TIM_PWM_Start+0x136>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a8:	d01d      	beq.n	80056e6 <HAL_TIM_PWM_Start+0x136>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1f      	ldr	r2, [pc, #124]	@ (800572c <HAL_TIM_PWM_Start+0x17c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d018      	beq.n	80056e6 <HAL_TIM_PWM_Start+0x136>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005730 <HAL_TIM_PWM_Start+0x180>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <HAL_TIM_PWM_Start+0x136>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005734 <HAL_TIM_PWM_Start+0x184>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00e      	beq.n	80056e6 <HAL_TIM_PWM_Start+0x136>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a16      	ldr	r2, [pc, #88]	@ (8005728 <HAL_TIM_PWM_Start+0x178>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d009      	beq.n	80056e6 <HAL_TIM_PWM_Start+0x136>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a18      	ldr	r2, [pc, #96]	@ (8005738 <HAL_TIM_PWM_Start+0x188>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d004      	beq.n	80056e6 <HAL_TIM_PWM_Start+0x136>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a16      	ldr	r2, [pc, #88]	@ (800573c <HAL_TIM_PWM_Start+0x18c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d111      	bne.n	800570a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b06      	cmp	r3, #6
 80056f6:	d010      	beq.n	800571a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005708:	e007      	b.n	800571a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0201 	orr.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40010000 	.word	0x40010000
 8005728:	40010400 	.word	0x40010400
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40014000 	.word	0x40014000
 800573c:	40001800 	.word	0x40001800

08005740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d020      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0202 	mvn.w	r2, #2
 8005774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa65 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 8005790:	e005      	b.n	800579e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa57 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fa68 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d020      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0204 	mvn.w	r2, #4
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa3f 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa31 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa42 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0208 	mvn.w	r2, #8
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2204      	movs	r2, #4
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa19 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa0b 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa1c 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0210 	mvn.w	r2, #16
 8005858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2208      	movs	r2, #8
 800585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f9f3 	bl	8005c5a <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f9e5 	bl	8005c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f9f6 	bl	8005c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00c      	beq.n	80058ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0201 	mvn.w	r2, #1
 80058a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f9c3 	bl	8005c32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00c      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80058c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fd86 	bl	80063dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9c7 	bl	8005c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00c      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d007      	beq.n	8005918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0220 	mvn.w	r2, #32
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fd58 	bl	80063c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005936:	2b01      	cmp	r3, #1
 8005938:	d101      	bne.n	800593e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800593a:	2302      	movs	r3, #2
 800593c:	e0ae      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	f200 809f 	bhi.w	8005a8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800594e:	a201      	add	r2, pc, #4	@ (adr r2, 8005954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	08005989 	.word	0x08005989
 8005958:	08005a8d 	.word	0x08005a8d
 800595c:	08005a8d 	.word	0x08005a8d
 8005960:	08005a8d 	.word	0x08005a8d
 8005964:	080059c9 	.word	0x080059c9
 8005968:	08005a8d 	.word	0x08005a8d
 800596c:	08005a8d 	.word	0x08005a8d
 8005970:	08005a8d 	.word	0x08005a8d
 8005974:	08005a0b 	.word	0x08005a0b
 8005978:	08005a8d 	.word	0x08005a8d
 800597c:	08005a8d 	.word	0x08005a8d
 8005980:	08005a8d 	.word	0x08005a8d
 8005984:	08005a4b 	.word	0x08005a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fa2e 	bl	8005df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0208 	orr.w	r2, r2, #8
 80059a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0204 	bic.w	r2, r2, #4
 80059b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6999      	ldr	r1, [r3, #24]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	619a      	str	r2, [r3, #24]
      break;
 80059c6:	e064      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68b9      	ldr	r1, [r7, #8]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fa7e 	bl	8005ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6999      	ldr	r1, [r3, #24]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	021a      	lsls	r2, r3, #8
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	619a      	str	r2, [r3, #24]
      break;
 8005a08:	e043      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fad3 	bl	8005fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69da      	ldr	r2, [r3, #28]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f042 0208 	orr.w	r2, r2, #8
 8005a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0204 	bic.w	r2, r2, #4
 8005a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69d9      	ldr	r1, [r3, #28]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	61da      	str	r2, [r3, #28]
      break;
 8005a48:	e023      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68b9      	ldr	r1, [r7, #8]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fb27 	bl	80060a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69da      	ldr	r2, [r3, #28]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69d9      	ldr	r1, [r3, #28]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	021a      	lsls	r2, r3, #8
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	61da      	str	r2, [r3, #28]
      break;
 8005a8a:	e002      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8005a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e0b4      	b.n	8005c2a <HAL_TIM_ConfigClockSource+0x186>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af8:	d03e      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0xd4>
 8005afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afe:	f200 8087 	bhi.w	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b06:	f000 8086 	beq.w	8005c16 <HAL_TIM_ConfigClockSource+0x172>
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0e:	d87f      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b10:	2b70      	cmp	r3, #112	@ 0x70
 8005b12:	d01a      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0xa6>
 8005b14:	2b70      	cmp	r3, #112	@ 0x70
 8005b16:	d87b      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b18:	2b60      	cmp	r3, #96	@ 0x60
 8005b1a:	d050      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x11a>
 8005b1c:	2b60      	cmp	r3, #96	@ 0x60
 8005b1e:	d877      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b20:	2b50      	cmp	r3, #80	@ 0x50
 8005b22:	d03c      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0xfa>
 8005b24:	2b50      	cmp	r3, #80	@ 0x50
 8005b26:	d873      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b28:	2b40      	cmp	r3, #64	@ 0x40
 8005b2a:	d058      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x13a>
 8005b2c:	2b40      	cmp	r3, #64	@ 0x40
 8005b2e:	d86f      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b30:	2b30      	cmp	r3, #48	@ 0x30
 8005b32:	d064      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x15a>
 8005b34:	2b30      	cmp	r3, #48	@ 0x30
 8005b36:	d86b      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d060      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x15a>
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d867      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d05c      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x15a>
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d05a      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x15a>
 8005b48:	e062      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b5a:	f000 fb73 	bl	8006244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	609a      	str	r2, [r3, #8]
      break;
 8005b76:	e04f      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b88:	f000 fb5c 	bl	8006244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b9a:	609a      	str	r2, [r3, #8]
      break;
 8005b9c:	e03c      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005baa:	461a      	mov	r2, r3
 8005bac:	f000 fad0 	bl	8006150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2150      	movs	r1, #80	@ 0x50
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fb29 	bl	800620e <TIM_ITRx_SetConfig>
      break;
 8005bbc:	e02c      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 faef 	bl	80061ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2160      	movs	r1, #96	@ 0x60
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fb19 	bl	800620e <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e01c      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fab0 	bl	8006150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2140      	movs	r1, #64	@ 0x40
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fb09 	bl	800620e <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e00c      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f000 fb00 	bl	800620e <TIM_ITRx_SetConfig>
      break;
 8005c0e:	e003      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
      break;
 8005c14:	e000      	b.n	8005c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a46      	ldr	r2, [pc, #280]	@ (8005dc4 <TIM_Base_SetConfig+0x12c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cb6:	d00f      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a43      	ldr	r2, [pc, #268]	@ (8005dc8 <TIM_Base_SetConfig+0x130>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d00b      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a42      	ldr	r2, [pc, #264]	@ (8005dcc <TIM_Base_SetConfig+0x134>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d007      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a41      	ldr	r2, [pc, #260]	@ (8005dd0 <TIM_Base_SetConfig+0x138>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d003      	beq.n	8005cd8 <TIM_Base_SetConfig+0x40>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a40      	ldr	r2, [pc, #256]	@ (8005dd4 <TIM_Base_SetConfig+0x13c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d108      	bne.n	8005cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a35      	ldr	r2, [pc, #212]	@ (8005dc4 <TIM_Base_SetConfig+0x12c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d02b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf8:	d027      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a32      	ldr	r2, [pc, #200]	@ (8005dc8 <TIM_Base_SetConfig+0x130>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d023      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a31      	ldr	r2, [pc, #196]	@ (8005dcc <TIM_Base_SetConfig+0x134>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d01f      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a30      	ldr	r2, [pc, #192]	@ (8005dd0 <TIM_Base_SetConfig+0x138>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a2f      	ldr	r2, [pc, #188]	@ (8005dd4 <TIM_Base_SetConfig+0x13c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d017      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a2e      	ldr	r2, [pc, #184]	@ (8005dd8 <TIM_Base_SetConfig+0x140>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a2d      	ldr	r2, [pc, #180]	@ (8005ddc <TIM_Base_SetConfig+0x144>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00f      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005de0 <TIM_Base_SetConfig+0x148>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00b      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a2b      	ldr	r2, [pc, #172]	@ (8005de4 <TIM_Base_SetConfig+0x14c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d007      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a2a      	ldr	r2, [pc, #168]	@ (8005de8 <TIM_Base_SetConfig+0x150>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a29      	ldr	r2, [pc, #164]	@ (8005dec <TIM_Base_SetConfig+0x154>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d108      	bne.n	8005d5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a10      	ldr	r2, [pc, #64]	@ (8005dc4 <TIM_Base_SetConfig+0x12c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_Base_SetConfig+0xf8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a12      	ldr	r2, [pc, #72]	@ (8005dd4 <TIM_Base_SetConfig+0x13c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d103      	bne.n	8005d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d105      	bne.n	8005db6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f023 0201 	bic.w	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	611a      	str	r2, [r3, #16]
  }
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800
 8005dd0:	40000c00 	.word	0x40000c00
 8005dd4:	40010400 	.word	0x40010400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800
 8005de4:	40001800 	.word	0x40001800
 8005de8:	40001c00 	.word	0x40001c00
 8005dec:	40002000 	.word	0x40002000

08005df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	f023 0201 	bic.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f023 0303 	bic.w	r3, r3, #3
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 0302 	bic.w	r3, r3, #2
 8005e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a20      	ldr	r2, [pc, #128]	@ (8005ec8 <TIM_OC1_SetConfig+0xd8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_OC1_SetConfig+0x64>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ecc <TIM_OC1_SetConfig+0xdc>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10c      	bne.n	8005e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0308 	bic.w	r3, r3, #8
 8005e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	f023 0304 	bic.w	r3, r3, #4
 8005e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a15      	ldr	r2, [pc, #84]	@ (8005ec8 <TIM_OC1_SetConfig+0xd8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d003      	beq.n	8005e7e <TIM_OC1_SetConfig+0x8e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a14      	ldr	r2, [pc, #80]	@ (8005ecc <TIM_OC1_SetConfig+0xdc>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d111      	bne.n	8005ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	621a      	str	r2, [r3, #32]
}
 8005ebc:	bf00      	nop
 8005ebe:	371c      	adds	r7, #28
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	40010000 	.word	0x40010000
 8005ecc:	40010400 	.word	0x40010400

08005ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f023 0210 	bic.w	r2, r3, #16
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f023 0320 	bic.w	r3, r3, #32
 8005f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a22      	ldr	r2, [pc, #136]	@ (8005fb4 <TIM_OC2_SetConfig+0xe4>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC2_SetConfig+0x68>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a21      	ldr	r2, [pc, #132]	@ (8005fb8 <TIM_OC2_SetConfig+0xe8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d10d      	bne.n	8005f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a17      	ldr	r2, [pc, #92]	@ (8005fb4 <TIM_OC2_SetConfig+0xe4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d003      	beq.n	8005f64 <TIM_OC2_SetConfig+0x94>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a16      	ldr	r2, [pc, #88]	@ (8005fb8 <TIM_OC2_SetConfig+0xe8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d113      	bne.n	8005f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	621a      	str	r2, [r3, #32]
}
 8005fa6:	bf00      	nop
 8005fa8:	371c      	adds	r7, #28
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	40010000 	.word	0x40010000
 8005fb8:	40010400 	.word	0x40010400

08005fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0303 	bic.w	r3, r3, #3
 8005ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a21      	ldr	r2, [pc, #132]	@ (800609c <TIM_OC3_SetConfig+0xe0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d003      	beq.n	8006022 <TIM_OC3_SetConfig+0x66>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a20      	ldr	r2, [pc, #128]	@ (80060a0 <TIM_OC3_SetConfig+0xe4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d10d      	bne.n	800603e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800603c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a16      	ldr	r2, [pc, #88]	@ (800609c <TIM_OC3_SetConfig+0xe0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC3_SetConfig+0x92>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a15      	ldr	r2, [pc, #84]	@ (80060a0 <TIM_OC3_SetConfig+0xe4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d113      	bne.n	8006076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800605c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	621a      	str	r2, [r3, #32]
}
 8006090:	bf00      	nop
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	40010000 	.word	0x40010000
 80060a0:	40010400 	.word	0x40010400

080060a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	021b      	lsls	r3, r3, #8
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	031b      	lsls	r3, r3, #12
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a12      	ldr	r2, [pc, #72]	@ (8006148 <TIM_OC4_SetConfig+0xa4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC4_SetConfig+0x68>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a11      	ldr	r2, [pc, #68]	@ (800614c <TIM_OC4_SetConfig+0xa8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d109      	bne.n	8006120 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	019b      	lsls	r3, r3, #6
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000
 800614c:	40010400 	.word	0x40010400

08006150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006150:	b480      	push	{r7}
 8006152:	b087      	sub	sp, #28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	f023 0201 	bic.w	r2, r3, #1
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800617a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f023 030a 	bic.w	r3, r3, #10
 800618c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	4313      	orrs	r3, r2
 8006194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b087      	sub	sp, #28
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	60f8      	str	r0, [r7, #12]
 80061b6:	60b9      	str	r1, [r7, #8]
 80061b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	f023 0210 	bic.w	r2, r3, #16
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	031b      	lsls	r3, r3, #12
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	f043 0307 	orr.w	r3, r3, #7
 8006230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	bf00      	nop
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800625e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	021a      	lsls	r2, r3, #8
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	431a      	orrs	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4313      	orrs	r3, r2
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	609a      	str	r2, [r3, #8]
}
 8006278:	bf00      	nop
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f003 031f 	and.w	r3, r3, #31
 8006296:	2201      	movs	r2, #1
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6a1a      	ldr	r2, [r3, #32]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	43db      	mvns	r3, r3
 80062a6:	401a      	ands	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a1a      	ldr	r2, [r3, #32]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f003 031f 	and.w	r3, r3, #31
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	fa01 f303 	lsl.w	r3, r1, r3
 80062bc:	431a      	orrs	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
	...

080062d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e05a      	b.n	800639e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800630e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a21      	ldr	r2, [pc, #132]	@ (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d022      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006334:	d01d      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a1d      	ldr	r2, [pc, #116]	@ (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a1b      	ldr	r2, [pc, #108]	@ (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1a      	ldr	r2, [pc, #104]	@ (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a18      	ldr	r2, [pc, #96]	@ (80063bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a17      	ldr	r2, [pc, #92]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a15      	ldr	r2, [pc, #84]	@ (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d10c      	bne.n	800638c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	4313      	orrs	r3, r2
 8006382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40000400 	.word	0x40000400
 80063b4:	40000800 	.word	0x40000800
 80063b8:	40000c00 	.word	0x40000c00
 80063bc:	40010400 	.word	0x40010400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40001800 	.word	0x40001800

080063c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063f0:	b084      	sub	sp, #16
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	f107 001c 	add.w	r0, r7, #28
 80063fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006402:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006406:	2b01      	cmp	r3, #1
 8006408:	d123      	bne.n	8006452 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800641e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006432:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006436:	2b01      	cmp	r3, #1
 8006438:	d105      	bne.n	8006446 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f9dc 	bl	8006804 <USB_CoreReset>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
 8006450:	e01b      	b.n	800648a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9d0 	bl	8006804 <USB_CoreReset>
 8006464:	4603      	mov	r3, r0
 8006466:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006468:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800646c:	2b00      	cmp	r3, #0
 800646e:	d106      	bne.n	800647e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006474:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	639a      	str	r2, [r3, #56]	@ 0x38
 800647c:	e005      	b.n	800648a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006482:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800648a:	7fbb      	ldrb	r3, [r7, #30]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10b      	bne.n	80064a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f043 0206 	orr.w	r2, r3, #6
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064b4:	b004      	add	sp, #16
 80064b6:	4770      	bx	lr

080064b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f043 0201 	orr.w	r2, r3, #1
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064da:	b480      	push	{r7}
 80064dc:	b083      	sub	sp, #12
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f023 0201 	bic.w	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d115      	bne.n	800654a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800652a:	200a      	movs	r0, #10
 800652c:	f7fa ffc2 	bl	80014b4 <HAL_Delay>
      ms += 10U;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	330a      	adds	r3, #10
 8006534:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f956 	bl	80067e8 <USB_GetMode>
 800653c:	4603      	mov	r3, r0
 800653e:	2b01      	cmp	r3, #1
 8006540:	d01e      	beq.n	8006580 <USB_SetCurrentMode+0x84>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2bc7      	cmp	r3, #199	@ 0xc7
 8006546:	d9f0      	bls.n	800652a <USB_SetCurrentMode+0x2e>
 8006548:	e01a      	b.n	8006580 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d115      	bne.n	800657c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800655c:	200a      	movs	r0, #10
 800655e:	f7fa ffa9 	bl	80014b4 <HAL_Delay>
      ms += 10U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	330a      	adds	r3, #10
 8006566:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f93d 	bl	80067e8 <USB_GetMode>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <USB_SetCurrentMode+0x84>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2bc7      	cmp	r3, #199	@ 0xc7
 8006578:	d9f0      	bls.n	800655c <USB_SetCurrentMode+0x60>
 800657a:	e001      	b.n	8006580 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e005      	b.n	800658c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2bc8      	cmp	r3, #200	@ 0xc8
 8006584:	d101      	bne.n	800658a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e000      	b.n	800658c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065ae:	d901      	bls.n	80065b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e01b      	b.n	80065ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	daf2      	bge.n	80065a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	019b      	lsls	r3, r3, #6
 80065c4:	f043 0220 	orr.w	r2, r3, #32
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065d8:	d901      	bls.n	80065de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e006      	b.n	80065ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d0f0      	beq.n	80065cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006610:	d901      	bls.n	8006616 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e018      	b.n	8006648 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	2b00      	cmp	r3, #0
 800661c:	daf2      	bge.n	8006604 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2210      	movs	r2, #16
 8006626:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3301      	adds	r3, #1
 800662c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006634:	d901      	bls.n	800663a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e006      	b.n	8006648 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b10      	cmp	r3, #16
 8006644:	d0f0      	beq.n	8006628 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006654:	b480      	push	{r7}
 8006656:	b089      	sub	sp, #36	@ 0x24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4611      	mov	r1, r2
 8006660:	461a      	mov	r2, r3
 8006662:	460b      	mov	r3, r1
 8006664:	71fb      	strb	r3, [r7, #7]
 8006666:	4613      	mov	r3, r2
 8006668:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006672:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006676:	2b00      	cmp	r3, #0
 8006678:	d123      	bne.n	80066c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800667a:	88bb      	ldrh	r3, [r7, #4]
 800667c:	3303      	adds	r3, #3
 800667e:	089b      	lsrs	r3, r3, #2
 8006680:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006682:	2300      	movs	r3, #0
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	e018      	b.n	80066ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	031a      	lsls	r2, r3, #12
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	4413      	add	r3, r2
 8006690:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006694:	461a      	mov	r2, r3
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	3301      	adds	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	3301      	adds	r3, #1
 80066a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	3301      	adds	r3, #1
 80066ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	3301      	adds	r3, #1
 80066b8:	61bb      	str	r3, [r7, #24]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d3e2      	bcc.n	8006688 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3724      	adds	r7, #36	@ 0x24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b08b      	sub	sp, #44	@ 0x2c
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	089b      	lsrs	r3, r3, #2
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	f003 0303 	and.w	r3, r3, #3
 80066f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80066f6:	2300      	movs	r3, #0
 80066f8:	623b      	str	r3, [r7, #32]
 80066fa:	e014      	b.n	8006726 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	601a      	str	r2, [r3, #0]
    pDest++;
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	3301      	adds	r3, #1
 800670c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	3301      	adds	r3, #1
 8006712:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	3301      	adds	r3, #1
 8006718:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	3301      	adds	r3, #1
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	3301      	adds	r3, #1
 8006724:	623b      	str	r3, [r7, #32]
 8006726:	6a3a      	ldr	r2, [r7, #32]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	429a      	cmp	r2, r3
 800672c:	d3e6      	bcc.n	80066fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800672e:	8bfb      	ldrh	r3, [r7, #30]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01e      	beq.n	8006772 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800673e:	461a      	mov	r2, r3
 8006740:	f107 0310 	add.w	r3, r7, #16
 8006744:	6812      	ldr	r2, [r2, #0]
 8006746:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	701a      	strb	r2, [r3, #0]
      i++;
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	3301      	adds	r3, #1
 800675e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006762:	3301      	adds	r3, #1
 8006764:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006766:	8bfb      	ldrh	r3, [r7, #30]
 8006768:	3b01      	subs	r3, #1
 800676a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800676c:	8bfb      	ldrh	r3, [r7, #30]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1ea      	bne.n	8006748 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006774:	4618      	mov	r0, r3
 8006776:	372c      	adds	r7, #44	@ 0x2c
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4013      	ands	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006798:	68fb      	ldr	r3, [r7, #12]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	460b      	mov	r3, r1
 80067b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80067b6:	78fb      	ldrb	r3, [r7, #3]
 80067b8:	015a      	lsls	r2, r3, #5
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4413      	add	r3, r2
 80067be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	4013      	ands	r3, r2
 80067d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80067da:	68bb      	ldr	r3, [r7, #8]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	f003 0301 	and.w	r3, r3, #1
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800681c:	d901      	bls.n	8006822 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e01b      	b.n	800685a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	daf2      	bge.n	8006810 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f043 0201 	orr.w	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006846:	d901      	bls.n	800684c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e006      	b.n	800685a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b01      	cmp	r3, #1
 8006856:	d0f0      	beq.n	800683a <USB_CoreReset+0x36>

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006868:	b084      	sub	sp, #16
 800686a:	b580      	push	{r7, lr}
 800686c:	b086      	sub	sp, #24
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006888:	461a      	mov	r2, r3
 800688a:	2300      	movs	r3, #0
 800688c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006892:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800689e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d119      	bne.n	80068f2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80068be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d10a      	bne.n	80068dc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80068d4:	f043 0304 	orr.w	r3, r3, #4
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e014      	b.n	8006906 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80068ea:	f023 0304 	bic.w	r3, r3, #4
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e009      	b.n	8006906 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006900:	f023 0304 	bic.w	r3, r3, #4
 8006904:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006906:	2110      	movs	r1, #16
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f7ff fe43 	bl	8006594 <USB_FlushTxFifo>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff fe6d 	bl	80065f8 <USB_FlushRxFifo>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	e015      	b.n	800695a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800693a:	461a      	mov	r2, r3
 800693c:	f04f 33ff 	mov.w	r3, #4294967295
 8006940:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800694e:	461a      	mov	r2, r3
 8006950:	2300      	movs	r3, #0
 8006952:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	3301      	adds	r3, #1
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800695e:	461a      	mov	r2, r3
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4293      	cmp	r3, r2
 8006964:	d3e3      	bcc.n	800692e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a18      	ldr	r2, [pc, #96]	@ (80069d8 <USB_HostInit+0x170>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d10b      	bne.n	8006994 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006982:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a15      	ldr	r2, [pc, #84]	@ (80069dc <USB_HostInit+0x174>)
 8006988:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a14      	ldr	r2, [pc, #80]	@ (80069e0 <USB_HostInit+0x178>)
 800698e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006992:	e009      	b.n	80069a8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2280      	movs	r2, #128	@ 0x80
 8006998:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a11      	ldr	r2, [pc, #68]	@ (80069e4 <USB_HostInit+0x17c>)
 800699e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a11      	ldr	r2, [pc, #68]	@ (80069e8 <USB_HostInit+0x180>)
 80069a4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d105      	bne.n	80069bc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	f043 0210 	orr.w	r2, r3, #16
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699a      	ldr	r2, [r3, #24]
 80069c0:	4b0a      	ldr	r3, [pc, #40]	@ (80069ec <USB_HostInit+0x184>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069d4:	b004      	add	sp, #16
 80069d6:	4770      	bx	lr
 80069d8:	40040000 	.word	0x40040000
 80069dc:	01000200 	.word	0x01000200
 80069e0:	00e00300 	.word	0x00e00300
 80069e4:	00600080 	.word	0x00600080
 80069e8:	004000e0 	.word	0x004000e0
 80069ec:	a3200008 	.word	0xa3200008

080069f0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a0e:	f023 0303 	bic.w	r3, r3, #3
 8006a12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	78fb      	ldrb	r3, [r7, #3]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d107      	bne.n	8006a42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006a3e:	6053      	str	r3, [r2, #4]
 8006a40:	e00c      	b.n	8006a5c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d107      	bne.n	8006a58 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006a54:	6053      	str	r3, [r2, #4]
 8006a56:	e001      	b.n	8006a5c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006a8a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a98:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006a9a:	2064      	movs	r0, #100	@ 0x64
 8006a9c:	f7fa fd0a 	bl	80014b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006aae:	200a      	movs	r0, #10
 8006ab0:	f7fa fd00 	bl	80014b4 <HAL_Delay>

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006ae2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <USB_DriveVbus+0x44>
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d106      	bne.n	8006b02 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006afc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006b00:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b0c:	d109      	bne.n	8006b22 <USB_DriveVbus+0x64>
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006b1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b20:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	0c5b      	lsrs	r3, r3, #17
 8006b4e:	f003 0303 	and.w	r3, r3, #3
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b085      	sub	sp, #20
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	b29b      	uxth	r3, r3
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	4608      	mov	r0, r1
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	4603      	mov	r3, r0
 8006b90:	70fb      	strb	r3, [r7, #3]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70bb      	strb	r3, [r7, #2]
 8006b96:	4613      	mov	r3, r2
 8006b98:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006ba2:	78fb      	ldrb	r3, [r7, #3]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006bb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d87c      	bhi.n	8006cb8 <USB_HC_Init+0x138>
 8006bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc4 <USB_HC_Init+0x44>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006bd5 	.word	0x08006bd5
 8006bc8:	08006c7b 	.word	0x08006c7b
 8006bcc:	08006bd5 	.word	0x08006bd5
 8006bd0:	08006c3d 	.word	0x08006c3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006be0:	461a      	mov	r2, r3
 8006be2:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006be6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006be8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	da10      	bge.n	8006c12 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	78fa      	ldrb	r2, [r7, #3]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c0e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006c10:	e055      	b.n	8006cbe <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a6f      	ldr	r2, [pc, #444]	@ (8006dd4 <USB_HC_Init+0x254>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d151      	bne.n	8006cbe <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c34:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006c38:	60d3      	str	r3, [r2, #12]
      break;
 8006c3a:	e040      	b.n	8006cbe <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c3c:	78fb      	ldrb	r3, [r7, #3]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006c4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da34      	bge.n	8006cc2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	78fa      	ldrb	r2, [r7, #3]
 8006c68:	0151      	lsls	r1, r2, #5
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	440a      	add	r2, r1
 8006c6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c76:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c78:	e023      	b.n	8006cc2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c86:	461a      	mov	r2, r3
 8006c88:	f240 2325 	movw	r3, #549	@ 0x225
 8006c8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	da17      	bge.n	8006cc6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006c96:	78fb      	ldrb	r3, [r7, #3]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	78fa      	ldrb	r2, [r7, #3]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	693a      	ldr	r2, [r7, #16]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cb0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006cb4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006cb6:	e006      	b.n	8006cc6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	77fb      	strb	r3, [r7, #31]
      break;
 8006cbc:	e004      	b.n	8006cc8 <USB_HC_Init+0x148>
      break;
 8006cbe:	bf00      	nop
 8006cc0:	e002      	b.n	8006cc8 <USB_HC_Init+0x148>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e000      	b.n	8006cc8 <USB_HC_Init+0x148>
      break;
 8006cc6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	78fa      	ldrb	r2, [r7, #3]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cf4:	f043 0302 	orr.w	r3, r3, #2
 8006cf8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	2101      	movs	r1, #1
 8006d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0e:	6939      	ldr	r1, [r7, #16]
 8006d10:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006d14:	4313      	orrs	r3, r2
 8006d16:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	da03      	bge.n	8006d34 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d30:	61bb      	str	r3, [r7, #24]
 8006d32:	e001      	b.n	8006d38 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff fef9 	bl	8006b30 <USB_GetHostSpeed>
 8006d3e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006d40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d106      	bne.n	8006d56 <USB_HC_Init+0x1d6>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d003      	beq.n	8006d56 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e001      	b.n	8006d5a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d5a:	787b      	ldrb	r3, [r7, #1]
 8006d5c:	059b      	lsls	r3, r3, #22
 8006d5e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d62:	78bb      	ldrb	r3, [r7, #2]
 8006d64:	02db      	lsls	r3, r3, #11
 8006d66:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d6a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d70:	049b      	lsls	r3, r3, #18
 8006d72:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d76:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006d78:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d7e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d88:	78fa      	ldrb	r2, [r7, #3]
 8006d8a:	0151      	lsls	r1, r2, #5
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	440a      	add	r2, r1
 8006d90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006d94:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d98:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006d9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006d9e:	2b03      	cmp	r3, #3
 8006da0:	d003      	beq.n	8006daa <USB_HC_Init+0x22a>
 8006da2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d10f      	bne.n	8006dca <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dc4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006dc8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006dca:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40040000 	.word	0x40040000

08006dd8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b08c      	sub	sp, #48	@ 0x30
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006df4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4a5d      	ldr	r2, [pc, #372]	@ (8006f70 <USB_HC_StartXfer+0x198>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d12f      	bne.n	8006e5e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d11c      	bne.n	8006e3e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	7c9b      	ldrb	r3, [r3, #18]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <USB_HC_StartXfer+0x3c>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	7c9b      	ldrb	r3, [r3, #18]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d124      	bne.n	8006e5e <USB_HC_StartXfer+0x86>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	799b      	ldrb	r3, [r3, #6]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d120      	bne.n	8006e5e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	0151      	lsls	r1, r2, #5
 8006e2e:	6a3a      	ldr	r2, [r7, #32]
 8006e30:	440a      	add	r2, r1
 8006e32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e3a:	60d3      	str	r3, [r2, #12]
 8006e3c:	e00f      	b.n	8006e5e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	791b      	ldrb	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10b      	bne.n	8006e5e <USB_HC_StartXfer+0x86>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	795b      	ldrb	r3, [r3, #5]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d107      	bne.n	8006e5e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	785b      	ldrb	r3, [r3, #1]
 8006e52:	4619      	mov	r1, r3
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 fb6b 	bl	8007530 <USB_DoPing>
        return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e232      	b.n	80072c4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	799b      	ldrb	r3, [r3, #6]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d158      	bne.n	8006f18 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006e66:	2301      	movs	r3, #1
 8006e68:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	78db      	ldrb	r3, [r3, #3]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d007      	beq.n	8006e82 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006e72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	8a92      	ldrh	r2, [r2, #20]
 8006e78:	fb03 f202 	mul.w	r2, r3, r2
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	61da      	str	r2, [r3, #28]
 8006e80:	e07c      	b.n	8006f7c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	7c9b      	ldrb	r3, [r3, #18]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d130      	bne.n	8006eec <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006e90:	d918      	bls.n	8006ec4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	8a9b      	ldrh	r3, [r3, #20]
 8006e96:	461a      	mov	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d003      	beq.n	8006eb4 <USB_HC_StartXfer+0xdc>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d103      	bne.n	8006ebc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	60da      	str	r2, [r3, #12]
 8006eba:	e05f      	b.n	8006f7c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	60da      	str	r2, [r3, #12]
 8006ec2:	e05b      	b.n	8006f7c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d007      	beq.n	8006ee4 <USB_HC_StartXfer+0x10c>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d003      	beq.n	8006ee4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	e04b      	b.n	8006f7c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2203      	movs	r2, #3
 8006ee8:	60da      	str	r2, [r3, #12]
 8006eea:	e047      	b.n	8006f7c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d10d      	bne.n	8006f0e <USB_HC_StartXfer+0x136>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	8a92      	ldrh	r2, [r2, #20]
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d907      	bls.n	8006f0e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006efe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	8a92      	ldrh	r2, [r2, #20]
 8006f04:	fb03 f202 	mul.w	r2, r3, r2
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	61da      	str	r2, [r3, #28]
 8006f0c:	e036      	b.n	8006f7c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6a1a      	ldr	r2, [r3, #32]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	61da      	str	r2, [r3, #28]
 8006f16:	e031      	b.n	8006f7c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d018      	beq.n	8006f52 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	8a92      	ldrh	r2, [r2, #20]
 8006f28:	4413      	add	r3, r2
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	8a92      	ldrh	r2, [r2, #20]
 8006f30:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f34:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006f36:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006f38:	8b7b      	ldrh	r3, [r7, #26]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d90b      	bls.n	8006f56 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006f3e:	8b7b      	ldrh	r3, [r7, #26]
 8006f40:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	8a92      	ldrh	r2, [r2, #20]
 8006f48:	fb03 f202 	mul.w	r2, r3, r2
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	61da      	str	r2, [r3, #28]
 8006f50:	e001      	b.n	8006f56 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006f52:	2301      	movs	r3, #1
 8006f54:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	78db      	ldrb	r3, [r3, #3]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	8a92      	ldrh	r2, [r2, #20]
 8006f64:	fb03 f202 	mul.w	r2, r3, r2
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	61da      	str	r2, [r3, #28]
 8006f6c:	e006      	b.n	8006f7c <USB_HC_StartXfer+0x1a4>
 8006f6e:	bf00      	nop
 8006f70:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	6a1a      	ldr	r2, [r3, #32]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f84:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f86:	04d9      	lsls	r1, r3, #19
 8006f88:	4ba3      	ldr	r3, [pc, #652]	@ (8007218 <USB_HC_StartXfer+0x440>)
 8006f8a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f8c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	7d9b      	ldrb	r3, [r3, #22]
 8006f92:	075b      	lsls	r3, r3, #29
 8006f94:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f98:	69f9      	ldr	r1, [r7, #28]
 8006f9a:	0148      	lsls	r0, r1, #5
 8006f9c:	6a39      	ldr	r1, [r7, #32]
 8006f9e:	4401      	add	r1, r0
 8006fa0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fa4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fa6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d009      	beq.n	8006fc2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6999      	ldr	r1, [r3, #24]
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	6a3a      	ldr	r2, [r7, #32]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ff4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ff8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	4413      	add	r3, r2
 8007002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	7e7b      	ldrb	r3, [r7, #25]
 800700a:	075b      	lsls	r3, r3, #29
 800700c:	69f9      	ldr	r1, [r7, #28]
 800700e:	0148      	lsls	r0, r1, #5
 8007010:	6a39      	ldr	r1, [r7, #32]
 8007012:	4401      	add	r1, r0
 8007014:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007018:	4313      	orrs	r3, r2
 800701a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	799b      	ldrb	r3, [r3, #6]
 8007020:	2b01      	cmp	r3, #1
 8007022:	f040 80c3 	bne.w	80071ac <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	7c5b      	ldrb	r3, [r3, #17]
 800702a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007030:	4313      	orrs	r3, r2
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	6a3a      	ldr	r2, [r7, #32]
 8007038:	440a      	add	r2, r1
 800703a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800703e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007042:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	4413      	add	r3, r2
 800704c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	6a3a      	ldr	r2, [r7, #32]
 8007058:	440a      	add	r2, r1
 800705a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800705e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007062:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	79db      	ldrb	r3, [r3, #7]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d123      	bne.n	80070b4 <USB_HC_StartXfer+0x2dc>
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	78db      	ldrb	r3, [r3, #3]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d11f      	bne.n	80070b4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	4413      	add	r3, r2
 800707c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	0151      	lsls	r1, r2, #5
 8007086:	6a3a      	ldr	r2, [r7, #32]
 8007088:	440a      	add	r2, r1
 800708a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800708e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007092:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	4413      	add	r3, r2
 800709c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	6a3a      	ldr	r2, [r7, #32]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070b2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	7c9b      	ldrb	r3, [r3, #18]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d003      	beq.n	80070c4 <USB_HC_StartXfer+0x2ec>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	7c9b      	ldrb	r3, [r3, #18]
 80070c0:	2b03      	cmp	r3, #3
 80070c2:	d117      	bne.n	80070f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d113      	bne.n	80070f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	78db      	ldrb	r3, [r3, #3]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d10f      	bne.n	80070f4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	6a3a      	ldr	r2, [r7, #32]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070f2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	7c9b      	ldrb	r3, [r3, #18]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d162      	bne.n	80071c2 <USB_HC_StartXfer+0x3ea>
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	78db      	ldrb	r3, [r3, #3]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d15e      	bne.n	80071c2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	3b01      	subs	r3, #1
 800710a:	2b03      	cmp	r3, #3
 800710c:	d858      	bhi.n	80071c0 <USB_HC_StartXfer+0x3e8>
 800710e:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <USB_HC_StartXfer+0x33c>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	08007125 	.word	0x08007125
 8007118:	08007147 	.word	0x08007147
 800711c:	08007169 	.word	0x08007169
 8007120:	0800718b 	.word	0x0800718b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	4413      	add	r3, r2
 800712c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	6a3a      	ldr	r2, [r7, #32]
 8007138:	440a      	add	r2, r1
 800713a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800713e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007142:	6053      	str	r3, [r2, #4]
          break;
 8007144:	e03d      	b.n	80071c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	0151      	lsls	r1, r2, #5
 8007158:	6a3a      	ldr	r2, [r7, #32]
 800715a:	440a      	add	r2, r1
 800715c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007160:	f043 030e 	orr.w	r3, r3, #14
 8007164:	6053      	str	r3, [r2, #4]
          break;
 8007166:	e02c      	b.n	80071c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	4413      	add	r3, r2
 8007170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	69fa      	ldr	r2, [r7, #28]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	6a3a      	ldr	r2, [r7, #32]
 800717c:	440a      	add	r2, r1
 800717e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007182:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007186:	6053      	str	r3, [r2, #4]
          break;
 8007188:	e01b      	b.n	80071c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	4413      	add	r3, r2
 8007192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	69fa      	ldr	r2, [r7, #28]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	6a3a      	ldr	r2, [r7, #32]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071a8:	6053      	str	r3, [r2, #4]
          break;
 80071aa:	e00a      	b.n	80071c2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071b8:	461a      	mov	r2, r3
 80071ba:	2300      	movs	r3, #0
 80071bc:	6053      	str	r3, [r2, #4]
 80071be:	e000      	b.n	80071c2 <USB_HC_StartXfer+0x3ea>
          break;
 80071c0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	6a3b      	ldr	r3, [r7, #32]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071d8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	78db      	ldrb	r3, [r3, #3]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	e003      	b.n	80071f4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071f2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071fa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	4413      	add	r3, r2
 8007204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007208:	461a      	mov	r2, r3
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800720e:	79fb      	ldrb	r3, [r7, #7]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	e055      	b.n	80072c4 <USB_HC_StartXfer+0x4ec>
 8007218:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	78db      	ldrb	r3, [r3, #3]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d14e      	bne.n	80072c2 <USB_HC_StartXfer+0x4ea>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d04a      	beq.n	80072c2 <USB_HC_StartXfer+0x4ea>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	79db      	ldrb	r3, [r3, #7]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d146      	bne.n	80072c2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	7c9b      	ldrb	r3, [r3, #18]
 8007238:	2b03      	cmp	r3, #3
 800723a:	d831      	bhi.n	80072a0 <USB_HC_StartXfer+0x4c8>
 800723c:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <USB_HC_StartXfer+0x46c>)
 800723e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007242:	bf00      	nop
 8007244:	08007255 	.word	0x08007255
 8007248:	08007279 	.word	0x08007279
 800724c:	08007255 	.word	0x08007255
 8007250:	08007279 	.word	0x08007279
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	3303      	adds	r3, #3
 800725a:	089b      	lsrs	r3, r3, #2
 800725c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800725e:	8afa      	ldrh	r2, [r7, #22]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007264:	b29b      	uxth	r3, r3
 8007266:	429a      	cmp	r2, r3
 8007268:	d91c      	bls.n	80072a4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f043 0220 	orr.w	r2, r3, #32
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	619a      	str	r2, [r3, #24]
        }
        break;
 8007276:	e015      	b.n	80072a4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	3303      	adds	r3, #3
 800727e:	089b      	lsrs	r3, r3, #2
 8007280:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007282:	8afa      	ldrh	r2, [r7, #22]
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	b29b      	uxth	r3, r3
 800728e:	429a      	cmp	r2, r3
 8007290:	d90a      	bls.n	80072a8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	619a      	str	r2, [r3, #24]
        }
        break;
 800729e:	e003      	b.n	80072a8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80072a0:	bf00      	nop
 80072a2:	e002      	b.n	80072aa <USB_HC_StartXfer+0x4d2>
        break;
 80072a4:	bf00      	nop
 80072a6:	e000      	b.n	80072aa <USB_HC_StartXfer+0x4d2>
        break;
 80072a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	6999      	ldr	r1, [r3, #24]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	785a      	ldrb	r2, [r3, #1]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2000      	movs	r0, #0
 80072ba:	9000      	str	r0, [sp, #0]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7ff f9c9 	bl	8006654 <USB_WritePacket>
  }

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3728      	adds	r7, #40	@ 0x28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	b29b      	uxth	r3, r3
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b089      	sub	sp, #36	@ 0x24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	0c9b      	lsrs	r3, r3, #18
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	0fdb      	lsrs	r3, r3, #31
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	0fdb      	lsrs	r3, r3, #31
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b20      	cmp	r3, #32
 8007352:	d10d      	bne.n	8007370 <USB_HC_Halt+0x82>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10a      	bne.n	8007370 <USB_HC_Halt+0x82>
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d002      	beq.n	800736c <USB_HC_Halt+0x7e>
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	2b03      	cmp	r3, #3
 800736a:	d101      	bne.n	8007370 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	e0d8      	b.n	8007522 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <USB_HC_Halt+0x8e>
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b02      	cmp	r3, #2
 800737a:	d173      	bne.n	8007464 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	4413      	add	r3, r2
 8007384:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69ba      	ldr	r2, [r7, #24]
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	440a      	add	r2, r1
 8007392:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007396:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800739a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d14a      	bne.n	800743e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d133      	bne.n	800741c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073d2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80073f2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	3301      	adds	r3, #1
 80073f8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007400:	d82e      	bhi.n	8007460 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	4413      	add	r3, r2
 800740a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007414:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007418:	d0ec      	beq.n	80073f4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800741a:	e081      	b.n	8007520 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	4413      	add	r3, r2
 8007424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	0151      	lsls	r1, r2, #5
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	440a      	add	r2, r1
 8007432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007436:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800743a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800743c:	e070      	b.n	8007520 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	440a      	add	r2, r1
 8007454:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007458:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800745c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800745e:	e05f      	b.n	8007520 <USB_HC_Halt+0x232>
            break;
 8007460:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007462:	e05d      	b.n	8007520 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	4413      	add	r3, r2
 800746c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	0151      	lsls	r1, r2, #5
 8007476:	69fa      	ldr	r2, [r7, #28]
 8007478:	440a      	add	r2, r1
 800747a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800747e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007482:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d133      	bne.n	80074fc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	69fa      	ldr	r2, [r7, #28]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80074d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074e0:	d81d      	bhi.n	800751e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074f8:	d0ec      	beq.n	80074d4 <USB_HC_Halt+0x1e6>
 80074fa:	e011      	b.n	8007520 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	4413      	add	r3, r2
 8007504:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	0151      	lsls	r1, r2, #5
 800750e:	69fa      	ldr	r2, [r7, #28]
 8007510:	440a      	add	r2, r1
 8007512:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007516:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800751a:	6013      	str	r3, [r2, #0]
 800751c:	e000      	b.n	8007520 <USB_HC_Halt+0x232>
          break;
 800751e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3724      	adds	r7, #36	@ 0x24
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
	...

08007530 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007544:	2301      	movs	r3, #1
 8007546:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	04da      	lsls	r2, r3, #19
 800754c:	4b15      	ldr	r3, [pc, #84]	@ (80075a4 <USB_DoPing+0x74>)
 800754e:	4013      	ands	r3, r2
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	440a      	add	r2, r1
 8007558:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800755c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007560:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	4413      	add	r3, r2
 800756a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007578:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007580:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	4413      	add	r3, r2
 800758a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800758e:	461a      	mov	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	1ff80000 	.word	0x1ff80000

080075a8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b088      	sub	sp, #32
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7fe ff8c 	bl	80064da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075c2:	2110      	movs	r1, #16
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7fe ffe5 	bl	8006594 <USB_FlushTxFifo>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff f80f 	bl	80065f8 <USB_FlushRxFifo>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80075e4:	2300      	movs	r3, #0
 80075e6:	61bb      	str	r3, [r7, #24]
 80075e8:	e01f      	b.n	800762a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007600:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007608:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007610:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	4413      	add	r3, r2
 800761a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800761e:	461a      	mov	r2, r3
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	3301      	adds	r3, #1
 8007628:	61bb      	str	r3, [r7, #24]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b0f      	cmp	r3, #15
 800762e:	d9dc      	bls.n	80075ea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007630:	2300      	movs	r3, #0
 8007632:	61bb      	str	r3, [r7, #24]
 8007634:	e034      	b.n	80076a0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	4413      	add	r3, r2
 800763e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800764c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007654:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800765c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	4413      	add	r3, r2
 8007666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800766a:	461a      	mov	r2, r3
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800767c:	d80c      	bhi.n	8007698 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	4413      	add	r3, r2
 8007686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007694:	d0ec      	beq.n	8007670 <USB_StopHost+0xc8>
 8007696:	e000      	b.n	800769a <USB_StopHost+0xf2>
        break;
 8007698:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	3301      	adds	r3, #1
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	2b0f      	cmp	r3, #15
 80076a4:	d9c7      	bls.n	8007636 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076ac:	461a      	mov	r2, r3
 80076ae:	f04f 33ff 	mov.w	r3, #4294967295
 80076b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f7fe fefb 	bl	80064b8 <USB_EnableGlobalInt>

  return ret;
 80076c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3720      	adds	r7, #32
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80076cc:	b590      	push	{r4, r7, lr}
 80076ce:	b089      	sub	sp, #36	@ 0x24
 80076d0:	af04      	add	r7, sp, #16
 80076d2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80076d4:	2301      	movs	r3, #1
 80076d6:	2202      	movs	r2, #2
 80076d8:	2102      	movs	r1, #2
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fc85 	bl	8007fea <USBH_FindInterface>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	2bff      	cmp	r3, #255	@ 0xff
 80076e8:	d002      	beq.n	80076f0 <USBH_CDC_InterfaceInit+0x24>
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d901      	bls.n	80076f4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80076f0:	2302      	movs	r3, #2
 80076f2:	e13d      	b.n	8007970 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fc5a 	bl	8007fb2 <USBH_SelectInterface>
 80076fe:	4603      	mov	r3, r0
 8007700:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007708:	2302      	movs	r3, #2
 800770a:	e131      	b.n	8007970 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007712:	2050      	movs	r0, #80	@ 0x50
 8007714:	f002 fb64 	bl	8009de0 <malloc>
 8007718:	4603      	mov	r3, r0
 800771a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800772c:	2302      	movs	r3, #2
 800772e:	e11f      	b.n	8007970 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007730:	2250      	movs	r2, #80	@ 0x50
 8007732:	2100      	movs	r1, #0
 8007734:	68b8      	ldr	r0, [r7, #8]
 8007736:	f002 fc11 	bl	8009f5c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800773a:	7bfb      	ldrb	r3, [r7, #15]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	211a      	movs	r1, #26
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	4413      	add	r3, r2
 8007746:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	b25b      	sxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	da15      	bge.n	800777e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	211a      	movs	r1, #26
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	4413      	add	r3, r2
 800775e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007762:	781a      	ldrb	r2, [r3, #0]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	211a      	movs	r1, #26
 800776e:	fb01 f303 	mul.w	r3, r1, r3
 8007772:	4413      	add	r3, r2
 8007774:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007778:	881a      	ldrh	r2, [r3, #0]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 ffbe 	bl	8009706 <USBH_AllocPipe>
 800778a:	4603      	mov	r3, r0
 800778c:	461a      	mov	r2, r3
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	7819      	ldrb	r1, [r3, #0]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	7858      	ldrb	r0, [r3, #1]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	8952      	ldrh	r2, [r2, #10]
 80077aa:	9202      	str	r2, [sp, #8]
 80077ac:	2203      	movs	r2, #3
 80077ae:	9201      	str	r2, [sp, #4]
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	4623      	mov	r3, r4
 80077b4:	4602      	mov	r2, r0
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f001 ff76 	bl	80096a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2200      	movs	r2, #0
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f002 fa85 	bl	8009cd4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80077ca:	2300      	movs	r3, #0
 80077cc:	2200      	movs	r2, #0
 80077ce:	210a      	movs	r1, #10
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fc0a 	bl	8007fea <USBH_FindInterface>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	2bff      	cmp	r3, #255	@ 0xff
 80077de:	d002      	beq.n	80077e6 <USBH_CDC_InterfaceInit+0x11a>
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d901      	bls.n	80077ea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80077e6:	2302      	movs	r3, #2
 80077e8:	e0c2      	b.n	8007970 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	211a      	movs	r1, #26
 80077f0:	fb01 f303 	mul.w	r3, r1, r3
 80077f4:	4413      	add	r3, r2
 80077f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	b25b      	sxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	da16      	bge.n	8007830 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	211a      	movs	r1, #26
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	4413      	add	r3, r2
 800780e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007812:	781a      	ldrb	r2, [r3, #0]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	211a      	movs	r1, #26
 800781e:	fb01 f303 	mul.w	r3, r1, r3
 8007822:	4413      	add	r3, r2
 8007824:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007828:	881a      	ldrh	r2, [r3, #0]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	835a      	strh	r2, [r3, #26]
 800782e:	e015      	b.n	800785c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	211a      	movs	r1, #26
 8007836:	fb01 f303 	mul.w	r3, r1, r3
 800783a:	4413      	add	r3, r2
 800783c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007840:	781a      	ldrb	r2, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	211a      	movs	r1, #26
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	4413      	add	r3, r2
 8007852:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007856:	881a      	ldrh	r2, [r3, #0]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800785c:	7bfb      	ldrb	r3, [r7, #15]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	211a      	movs	r1, #26
 8007862:	fb01 f303 	mul.w	r3, r1, r3
 8007866:	4413      	add	r3, r2
 8007868:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	b25b      	sxtb	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	da16      	bge.n	80078a2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	211a      	movs	r1, #26
 800787a:	fb01 f303 	mul.w	r3, r1, r3
 800787e:	4413      	add	r3, r2
 8007880:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007884:	781a      	ldrb	r2, [r3, #0]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	211a      	movs	r1, #26
 8007890:	fb01 f303 	mul.w	r3, r1, r3
 8007894:	4413      	add	r3, r2
 8007896:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800789a:	881a      	ldrh	r2, [r3, #0]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	835a      	strh	r2, [r3, #26]
 80078a0:	e015      	b.n	80078ce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	211a      	movs	r1, #26
 80078a8:	fb01 f303 	mul.w	r3, r1, r3
 80078ac:	4413      	add	r3, r2
 80078ae:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	211a      	movs	r1, #26
 80078be:	fb01 f303 	mul.w	r3, r1, r3
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80078c8:	881a      	ldrh	r2, [r3, #0]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	7b9b      	ldrb	r3, [r3, #14]
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f001 ff16 	bl	8009706 <USBH_AllocPipe>
 80078da:	4603      	mov	r3, r0
 80078dc:	461a      	mov	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	7bdb      	ldrb	r3, [r3, #15]
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 ff0c 	bl	8009706 <USBH_AllocPipe>
 80078ee:	4603      	mov	r3, r0
 80078f0:	461a      	mov	r2, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	7b59      	ldrb	r1, [r3, #13]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	7b98      	ldrb	r0, [r3, #14]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	8b12      	ldrh	r2, [r2, #24]
 800790e:	9202      	str	r2, [sp, #8]
 8007910:	2202      	movs	r2, #2
 8007912:	9201      	str	r2, [sp, #4]
 8007914:	9300      	str	r3, [sp, #0]
 8007916:	4623      	mov	r3, r4
 8007918:	4602      	mov	r2, r0
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f001 fec4 	bl	80096a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	7b19      	ldrb	r1, [r3, #12]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	7bd8      	ldrb	r0, [r3, #15]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	8b52      	ldrh	r2, [r2, #26]
 8007938:	9202      	str	r2, [sp, #8]
 800793a:	2202      	movs	r2, #2
 800793c:	9201      	str	r2, [sp, #4]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4623      	mov	r3, r4
 8007942:	4602      	mov	r2, r0
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 feaf 	bl	80096a8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	7b5b      	ldrb	r3, [r3, #13]
 8007956:	2200      	movs	r2, #0
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f002 f9ba 	bl	8009cd4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	7b1b      	ldrb	r3, [r3, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f002 f9b3 	bl	8009cd4 <USBH_LL_SetToggle>

  return USBH_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	bd90      	pop	{r4, r7, pc}

08007978 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00e      	beq.n	80079b0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fea4 	bl	80096e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f001 fecf 	bl	8009748 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	7b1b      	ldrb	r3, [r3, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00e      	beq.n	80079d6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	7b1b      	ldrb	r3, [r3, #12]
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 fe91 	bl	80096e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	7b1b      	ldrb	r3, [r3, #12]
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 febc 	bl	8009748 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	7b5b      	ldrb	r3, [r3, #13]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00e      	beq.n	80079fc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	7b5b      	ldrb	r3, [r3, #13]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 fe7e 	bl	80096e6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	7b5b      	ldrb	r3, [r3, #13]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 fea9 	bl	8009748 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	4618      	mov	r0, r3
 8007a12:	f002 f9ed 	bl	8009df0 <free>
    phost->pActiveClass->pData = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b084      	sub	sp, #16
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3340      	adds	r3, #64	@ 0x40
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f8b1 	bl	8007baa <GetLineCoding>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007a4c:	7afb      	ldrb	r3, [r7, #11]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d105      	bne.n	8007a5e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a58:	2102      	movs	r1, #2
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007a5e:	7afb      	ldrb	r3, [r7, #11]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a7e:	69db      	ldr	r3, [r3, #28]
 8007a80:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007a88:	2b04      	cmp	r3, #4
 8007a8a:	d877      	bhi.n	8007b7c <USBH_CDC_Process+0x114>
 8007a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a94 <USBH_CDC_Process+0x2c>)
 8007a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a92:	bf00      	nop
 8007a94:	08007aa9 	.word	0x08007aa9
 8007a98:	08007aaf 	.word	0x08007aaf
 8007a9c:	08007adf 	.word	0x08007adf
 8007aa0:	08007b53 	.word	0x08007b53
 8007aa4:	08007b61 	.word	0x08007b61
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8007aac:	e06d      	b.n	8007b8a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f897 	bl	8007be8 <SetLineCoding>
 8007aba:	4603      	mov	r3, r0
 8007abc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007acc:	e058      	b.n	8007b80 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d055      	beq.n	8007b80 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007adc:	e050      	b.n	8007b80 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	3340      	adds	r3, #64	@ 0x40
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f860 	bl	8007baa <GetLineCoding>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d126      	bne.n	8007b42 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b06:	791b      	ldrb	r3, [r3, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d13b      	bne.n	8007b84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b16:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d133      	bne.n	8007b84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b26:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d12b      	bne.n	8007b84 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b34:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d124      	bne.n	8007b84 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f958 	bl	8007df0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b40:	e020      	b.n	8007b84 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d01d      	beq.n	8007b84 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2204      	movs	r2, #4
 8007b4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007b50:	e018      	b.n	8007b84 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f867 	bl	8007c26 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f8da 	bl	8007d12 <CDC_ProcessReception>
      break;
 8007b5e:	e014      	b.n	8007b8a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007b60:	2100      	movs	r1, #0
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 f81a 	bl	8008b9c <USBH_ClrFeature>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007b7a:	e005      	b.n	8007b88 <USBH_CDC_Process+0x120>

    default:
      break;
 8007b7c:	bf00      	nop
 8007b7e:	e004      	b.n	8007b8a <USBH_CDC_Process+0x122>
      break;
 8007b80:	bf00      	nop
 8007b82:	e002      	b.n	8007b8a <USBH_CDC_Process+0x122>
      break;
 8007b84:	bf00      	nop
 8007b86:	e000      	b.n	8007b8a <USBH_CDC_Process+0x122>
      break;
 8007b88:	bf00      	nop

  }

  return status;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	22a1      	movs	r2, #161	@ 0xa1
 8007bb8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2221      	movs	r2, #33	@ 0x21
 8007bbe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2207      	movs	r2, #7
 8007bd0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2207      	movs	r2, #7
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 fb14 	bl	8009206 <USBH_CtlReq>
 8007bde:	4603      	mov	r3, r0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2221      	movs	r2, #33	@ 0x21
 8007bf6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2207      	movs	r2, #7
 8007c0e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2207      	movs	r2, #7
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 faf5 	bl	8009206 <USBH_CtlReq>
 8007c1c:	4603      	mov	r3, r0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b086      	sub	sp, #24
 8007c2a:	af02      	add	r7, sp, #8
 8007c2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d002      	beq.n	8007c4c <CDC_ProcessTransmission+0x26>
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d023      	beq.n	8007c92 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007c4a:	e05e      	b.n	8007d0a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	8b12      	ldrh	r2, [r2, #24]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d90b      	bls.n	8007c70 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	69d9      	ldr	r1, [r3, #28]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8b1a      	ldrh	r2, [r3, #24]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	7b5b      	ldrb	r3, [r3, #13]
 8007c64:	2001      	movs	r0, #1
 8007c66:	9000      	str	r0, [sp, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fcda 	bl	8009622 <USBH_BulkSendData>
 8007c6e:	e00b      	b.n	8007c88 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	7b5b      	ldrb	r3, [r3, #13]
 8007c7e:	2001      	movs	r0, #1
 8007c80:	9000      	str	r0, [sp, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fccd 	bl	8009622 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007c90:	e03b      	b.n	8007d0a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	7b5b      	ldrb	r3, [r3, #13]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 fff1 	bl	8009c80 <USBH_LL_GetURBState>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007ca2:	7afb      	ldrb	r3, [r7, #11]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d128      	bne.n	8007cfa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	8b12      	ldrh	r2, [r2, #24]
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d90e      	bls.n	8007cd2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	8b12      	ldrh	r2, [r2, #24]
 8007cbc:	1a9a      	subs	r2, r3, r2
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	8b12      	ldrh	r2, [r2, #24]
 8007cca:	441a      	add	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	61da      	str	r2, [r3, #28]
 8007cd0:	e002      	b.n	8007cd8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d004      	beq.n	8007cea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007ce8:	e00e      	b.n	8007d08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f868 	bl	8007dc8 <USBH_CDC_TransmitCallback>
      break;
 8007cf8:	e006      	b.n	8007d08 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d103      	bne.n	8007d08 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007d08:	bf00      	nop
  }
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b086      	sub	sp, #24
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d002      	beq.n	8007d38 <CDC_ProcessReception+0x26>
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d00e      	beq.n	8007d54 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007d36:	e043      	b.n	8007dc0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	6a19      	ldr	r1, [r3, #32]
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	8b5a      	ldrh	r2, [r3, #26]
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	7b1b      	ldrb	r3, [r3, #12]
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 fc91 	bl	800966c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2204      	movs	r2, #4
 8007d4e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007d52:	e035      	b.n	8007dc0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	7b1b      	ldrb	r3, [r3, #12]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 ff90 	bl	8009c80 <USBH_LL_GetURBState>
 8007d60:	4603      	mov	r3, r0
 8007d62:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007d64:	7cfb      	ldrb	r3, [r7, #19]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d129      	bne.n	8007dbe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	7b1b      	ldrb	r3, [r3, #12]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fef3 	bl	8009b5c <USBH_LL_GetLastXferSize>
 8007d76:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d016      	beq.n	8007db0 <CDC_ProcessReception+0x9e>
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	8b5b      	ldrh	r3, [r3, #26]
 8007d86:	461a      	mov	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d110      	bne.n	8007db0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1ad2      	subs	r2, r2, r3
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	6a1a      	ldr	r2, [r3, #32]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	441a      	add	r2, r3
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2203      	movs	r2, #3
 8007daa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007dae:	e006      	b.n	8007dbe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f80f 	bl	8007ddc <USBH_CDC_ReceiveCallback>
      break;
 8007dbe:	bf00      	nop
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e029      	b.n	8007e70 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	79fa      	ldrb	r2, [r7, #7]
 8007e20:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f81f 	bl	8007e78 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d003      	beq.n	8007e68 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f001 fdc3 	bl	80099f4 <USBH_LL_Init>

  return USBH_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	e009      	b.n	8007e9e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	33e0      	adds	r3, #224	@ 0xe0
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	2200      	movs	r2, #0
 8007e96:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b0f      	cmp	r3, #15
 8007ea2:	d9f2      	bls.n	8007e8a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	e009      	b.n	8007ebe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ec4:	d3f1      	bcc.n	8007eaa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2240      	movs	r2, #64	@ 0x40
 8007eea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	331c      	adds	r3, #28
 8007f16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f002 f81d 	bl	8009f5c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f002 f814 	bl	8009f5c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007f3a:	2212      	movs	r2, #18
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 f80c 	bl	8009f5c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f4a:	223e      	movs	r2, #62	@ 0x3e
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f002 f804 	bl	8009f5c <memset>

  return USBH_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b085      	sub	sp, #20
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d016      	beq.n	8007fa0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10e      	bne.n	8007f9a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007f82:	1c59      	adds	r1, r3, #1
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	33de      	adds	r3, #222	@ 0xde
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]
 8007f98:	e004      	b.n	8007fa4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	73fb      	strb	r3, [r7, #15]
 8007f9e:	e001      	b.n	8007fa4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007fc8:	78fa      	ldrb	r2, [r7, #3]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d204      	bcs.n	8007fd8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	78fa      	ldrb	r2, [r7, #3]
 8007fd2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007fd6:	e001      	b.n	8007fdc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b087      	sub	sp, #28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	4608      	mov	r0, r1
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	70fb      	strb	r3, [r7, #3]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	70bb      	strb	r3, [r7, #2]
 8008000:	4613      	mov	r3, r2
 8008002:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008012:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008014:	e025      	b.n	8008062 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008016:	7dfb      	ldrb	r3, [r7, #23]
 8008018:	221a      	movs	r2, #26
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	3308      	adds	r3, #8
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	3302      	adds	r3, #2
 8008026:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	795b      	ldrb	r3, [r3, #5]
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	429a      	cmp	r2, r3
 8008030:	d002      	beq.n	8008038 <USBH_FindInterface+0x4e>
 8008032:	78fb      	ldrb	r3, [r7, #3]
 8008034:	2bff      	cmp	r3, #255	@ 0xff
 8008036:	d111      	bne.n	800805c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800803c:	78ba      	ldrb	r2, [r7, #2]
 800803e:	429a      	cmp	r2, r3
 8008040:	d002      	beq.n	8008048 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008042:	78bb      	ldrb	r3, [r7, #2]
 8008044:	2bff      	cmp	r3, #255	@ 0xff
 8008046:	d109      	bne.n	800805c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800804c:	787a      	ldrb	r2, [r7, #1]
 800804e:	429a      	cmp	r2, r3
 8008050:	d002      	beq.n	8008058 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008052:	787b      	ldrb	r3, [r7, #1]
 8008054:	2bff      	cmp	r3, #255	@ 0xff
 8008056:	d101      	bne.n	800805c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	e006      	b.n	800806a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	3301      	adds	r3, #1
 8008060:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d9d6      	bls.n	8008016 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008068:	23ff      	movs	r3, #255	@ 0xff
}
 800806a:	4618      	mov	r0, r3
 800806c:	371c      	adds	r7, #28
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 fcf4 	bl	8009a6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008084:	2101      	movs	r1, #1
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fe0d 	bl	8009ca6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af04      	add	r7, sp, #16
 800809e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80080a0:	2302      	movs	r3, #2
 80080a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d102      	bne.n	80080ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2203      	movs	r2, #3
 80080b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	2b0b      	cmp	r3, #11
 80080c2:	f200 81bb 	bhi.w	800843c <USBH_Process+0x3a4>
 80080c6:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <USBH_Process+0x34>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	080080fd 	.word	0x080080fd
 80080d0:	0800812f 	.word	0x0800812f
 80080d4:	08008197 	.word	0x08008197
 80080d8:	080083d7 	.word	0x080083d7
 80080dc:	0800843d 	.word	0x0800843d
 80080e0:	08008237 	.word	0x08008237
 80080e4:	0800837d 	.word	0x0800837d
 80080e8:	0800826d 	.word	0x0800826d
 80080ec:	0800828d 	.word	0x0800828d
 80080f0:	080082ab 	.word	0x080082ab
 80080f4:	080082ef 	.word	0x080082ef
 80080f8:	080083bf 	.word	0x080083bf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 819b 	beq.w	8008440 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008110:	20c8      	movs	r0, #200	@ 0xc8
 8008112:	f001 fe12 	bl	8009d3a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 fd05 	bl	8009b26 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800812c:	e188      	b.n	8008440 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008134:	2b01      	cmp	r3, #1
 8008136:	d107      	bne.n	8008148 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008146:	e18a      	b.n	800845e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800814e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008152:	d914      	bls.n	800817e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800815a:	3301      	adds	r3, #1
 800815c:	b2da      	uxtb	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800816a:	2b03      	cmp	r3, #3
 800816c:	d903      	bls.n	8008176 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	220d      	movs	r2, #13
 8008172:	701a      	strb	r2, [r3, #0]
      break;
 8008174:	e173      	b.n	800845e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	701a      	strb	r2, [r3, #0]
      break;
 800817c:	e16f      	b.n	800845e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008184:	f103 020a 	add.w	r2, r3, #10
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800818e:	200a      	movs	r0, #10
 8008190:	f001 fdd3 	bl	8009d3a <USBH_Delay>
      break;
 8008194:	e163      	b.n	800845e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80081a6:	2104      	movs	r1, #4
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80081ac:	2064      	movs	r0, #100	@ 0x64
 80081ae:	f001 fdc4 	bl	8009d3a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fc90 	bl	8009ad8 <USBH_LL_GetSpeed>
 80081b8:	4603      	mov	r3, r0
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2205      	movs	r2, #5
 80081c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80081c8:	2100      	movs	r1, #0
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 fa9b 	bl	8009706 <USBH_AllocPipe>
 80081d0:	4603      	mov	r3, r0
 80081d2:	461a      	mov	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80081d8:	2180      	movs	r1, #128	@ 0x80
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 fa93 	bl	8009706 <USBH_AllocPipe>
 80081e0:	4603      	mov	r3, r0
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7919      	ldrb	r1, [r3, #4]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80081fc:	9202      	str	r2, [sp, #8]
 80081fe:	2200      	movs	r2, #0
 8008200:	9201      	str	r2, [sp, #4]
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	4603      	mov	r3, r0
 8008206:	2280      	movs	r2, #128	@ 0x80
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 fa4d 	bl	80096a8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7959      	ldrb	r1, [r3, #5]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008222:	9202      	str	r2, [sp, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	9201      	str	r2, [sp, #4]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	4603      	mov	r3, r0
 800822c:	2200      	movs	r2, #0
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 fa3a 	bl	80096a8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008234:	e113      	b.n	800845e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f916 	bl	8008468 <USBH_HandleEnum>
 800823c:	4603      	mov	r3, r0
 800823e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	f040 80fd 	bne.w	8008444 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008258:	2b01      	cmp	r3, #1
 800825a:	d103      	bne.n	8008264 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2208      	movs	r2, #8
 8008260:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008262:	e0ef      	b.n	8008444 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2207      	movs	r2, #7
 8008268:	701a      	strb	r2, [r3, #0]
      break;
 800826a:	e0eb      	b.n	8008444 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 80e8 	beq.w	8008448 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800827e:	2101      	movs	r1, #1
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2208      	movs	r2, #8
 8008288:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800828a:	e0dd      	b.n	8008448 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fc3a 	bl	8008b0e <USBH_SetCfg>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 80d5 	bne.w	800844c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2209      	movs	r2, #9
 80082a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082a8:	e0d0      	b.n	800844c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d016      	beq.n	80082e6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80082b8:	2101      	movs	r1, #1
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fc4a 	bl	8008b54 <USBH_SetFeature>
 80082c0:	4603      	mov	r3, r0
 80082c2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082c4:	7bbb      	ldrb	r3, [r7, #14]
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d103      	bne.n	80082d4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	220a      	movs	r2, #10
 80082d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082d2:	e0bd      	b.n	8008450 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b03      	cmp	r3, #3
 80082da:	f040 80b9 	bne.w	8008450 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	220a      	movs	r2, #10
 80082e2:	701a      	strb	r2, [r3, #0]
      break;
 80082e4:	e0b4      	b.n	8008450 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	220a      	movs	r2, #10
 80082ea:	701a      	strb	r2, [r3, #0]
      break;
 80082ec:	e0b0      	b.n	8008450 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 80ad 	beq.w	8008454 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
 8008306:	e016      	b.n	8008336 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008308:	7bfa      	ldrb	r2, [r7, #15]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	32de      	adds	r2, #222	@ 0xde
 800830e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008312:	791a      	ldrb	r2, [r3, #4]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800831a:	429a      	cmp	r2, r3
 800831c:	d108      	bne.n	8008330 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800831e:	7bfa      	ldrb	r2, [r7, #15]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	32de      	adds	r2, #222	@ 0xde
 8008324:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800832e:	e005      	b.n	800833c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	3301      	adds	r3, #1
 8008334:	73fb      	strb	r3, [r7, #15]
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0e5      	beq.n	8008308 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d016      	beq.n	8008374 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	4798      	blx	r3
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d109      	bne.n	800836c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2206      	movs	r2, #6
 800835c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008364:	2103      	movs	r1, #3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800836a:	e073      	b.n	8008454 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	220d      	movs	r2, #13
 8008370:	701a      	strb	r2, [r3, #0]
      break;
 8008372:	e06f      	b.n	8008454 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	220d      	movs	r2, #13
 8008378:	701a      	strb	r2, [r3, #0]
      break;
 800837a:	e06b      	b.n	8008454 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008382:	2b00      	cmp	r3, #0
 8008384:	d017      	beq.n	80083b6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
 8008392:	4603      	mov	r3, r0
 8008394:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	220b      	movs	r2, #11
 80083a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80083a4:	e058      	b.n	8008458 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b02      	cmp	r3, #2
 80083ac:	d154      	bne.n	8008458 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	220d      	movs	r2, #13
 80083b2:	701a      	strb	r2, [r3, #0]
      break;
 80083b4:	e050      	b.n	8008458 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	220d      	movs	r2, #13
 80083ba:	701a      	strb	r2, [r3, #0]
      break;
 80083bc:	e04c      	b.n	8008458 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d049      	beq.n	800845c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	4798      	blx	r3
      }
      break;
 80083d4:	e042      	b.n	800845c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff fd4a 	bl	8007e78 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d009      	beq.n	8008402 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008412:	2105      	movs	r1, #5
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b01      	cmp	r3, #1
 8008422:	d107      	bne.n	8008434 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fe22 	bl	8008076 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008432:	e014      	b.n	800845e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f001 fb19 	bl	8009a6c <USBH_LL_Start>
      break;
 800843a:	e010      	b.n	800845e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800843c:	bf00      	nop
 800843e:	e00e      	b.n	800845e <USBH_Process+0x3c6>
      break;
 8008440:	bf00      	nop
 8008442:	e00c      	b.n	800845e <USBH_Process+0x3c6>
      break;
 8008444:	bf00      	nop
 8008446:	e00a      	b.n	800845e <USBH_Process+0x3c6>
    break;
 8008448:	bf00      	nop
 800844a:	e008      	b.n	800845e <USBH_Process+0x3c6>
      break;
 800844c:	bf00      	nop
 800844e:	e006      	b.n	800845e <USBH_Process+0x3c6>
      break;
 8008450:	bf00      	nop
 8008452:	e004      	b.n	800845e <USBH_Process+0x3c6>
      break;
 8008454:	bf00      	nop
 8008456:	e002      	b.n	800845e <USBH_Process+0x3c6>
      break;
 8008458:	bf00      	nop
 800845a:	e000      	b.n	800845e <USBH_Process+0x3c6>
      break;
 800845c:	bf00      	nop
  }
  return USBH_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af04      	add	r7, sp, #16
 800846e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008470:	2301      	movs	r3, #1
 8008472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008474:	2301      	movs	r3, #1
 8008476:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	2b07      	cmp	r3, #7
 800847e:	f200 81bd 	bhi.w	80087fc <USBH_HandleEnum+0x394>
 8008482:	a201      	add	r2, pc, #4	@ (adr r2, 8008488 <USBH_HandleEnum+0x20>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	080084a9 	.word	0x080084a9
 800848c:	08008563 	.word	0x08008563
 8008490:	080085cd 	.word	0x080085cd
 8008494:	08008657 	.word	0x08008657
 8008498:	080086c1 	.word	0x080086c1
 800849c:	08008731 	.word	0x08008731
 80084a0:	08008777 	.word	0x08008777
 80084a4:	080087bd 	.word	0x080087bd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80084a8:	2108      	movs	r1, #8
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa4c 	bl	8008948 <USBH_Get_DevDesc>
 80084b0:	4603      	mov	r3, r0
 80084b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d12e      	bne.n	8008518 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	7919      	ldrb	r1, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80084de:	9202      	str	r2, [sp, #8]
 80084e0:	2200      	movs	r2, #0
 80084e2:	9201      	str	r2, [sp, #4]
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	4603      	mov	r3, r0
 80084e8:	2280      	movs	r2, #128	@ 0x80
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 f8dc 	bl	80096a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	7959      	ldrb	r1, [r3, #5]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008504:	9202      	str	r2, [sp, #8]
 8008506:	2200      	movs	r2, #0
 8008508:	9201      	str	r2, [sp, #4]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4603      	mov	r3, r0
 800850e:	2200      	movs	r2, #0
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 f8c9 	bl	80096a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008516:	e173      	b.n	8008800 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b03      	cmp	r3, #3
 800851c:	f040 8170 	bne.w	8008800 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008526:	3301      	adds	r3, #1
 8008528:	b2da      	uxtb	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008536:	2b03      	cmp	r3, #3
 8008538:	d903      	bls.n	8008542 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	220d      	movs	r2, #13
 800853e:	701a      	strb	r2, [r3, #0]
      break;
 8008540:	e15e      	b.n	8008800 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	795b      	ldrb	r3, [r3, #5]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f8fd 	bl	8009748 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	791b      	ldrb	r3, [r3, #4]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 f8f7 	bl	8009748 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	701a      	strb	r2, [r3, #0]
      break;
 8008560:	e14e      	b.n	8008800 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008562:	2112      	movs	r1, #18
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f9ef 	bl	8008948 <USBH_Get_DevDesc>
 800856a:	4603      	mov	r3, r0
 800856c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800856e:	7bbb      	ldrb	r3, [r7, #14]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2202      	movs	r2, #2
 8008578:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800857a:	e143      	b.n	8008804 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800857c:	7bbb      	ldrb	r3, [r7, #14]
 800857e:	2b03      	cmp	r3, #3
 8008580:	f040 8140 	bne.w	8008804 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800858a:	3301      	adds	r3, #1
 800858c:	b2da      	uxtb	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800859a:	2b03      	cmp	r3, #3
 800859c:	d903      	bls.n	80085a6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	220d      	movs	r2, #13
 80085a2:	701a      	strb	r2, [r3, #0]
      break;
 80085a4:	e12e      	b.n	8008804 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	795b      	ldrb	r3, [r3, #5]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 f8cb 	bl	8009748 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	791b      	ldrb	r3, [r3, #4]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 f8c5 	bl	8009748 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	701a      	strb	r2, [r3, #0]
      break;
 80085ca:	e11b      	b.n	8008804 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80085cc:	2101      	movs	r1, #1
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 fa79 	bl	8008ac6 <USBH_SetAddress>
 80085d4:	4603      	mov	r3, r0
 80085d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d130      	bne.n	8008640 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80085de:	2002      	movs	r0, #2
 80085e0:	f001 fbab 	bl	8009d3a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2203      	movs	r2, #3
 80085f0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	7919      	ldrb	r1, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008606:	9202      	str	r2, [sp, #8]
 8008608:	2200      	movs	r2, #0
 800860a:	9201      	str	r2, [sp, #4]
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	4603      	mov	r3, r0
 8008610:	2280      	movs	r2, #128	@ 0x80
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f001 f848 	bl	80096a8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	7959      	ldrb	r1, [r3, #5]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800862c:	9202      	str	r2, [sp, #8]
 800862e:	2200      	movs	r2, #0
 8008630:	9201      	str	r2, [sp, #4]
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	4603      	mov	r3, r0
 8008636:	2200      	movs	r2, #0
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f001 f835 	bl	80096a8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800863e:	e0e3      	b.n	8008808 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b03      	cmp	r3, #3
 8008644:	f040 80e0 	bne.w	8008808 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	220d      	movs	r2, #13
 800864c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	705a      	strb	r2, [r3, #1]
      break;
 8008654:	e0d8      	b.n	8008808 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008656:	2109      	movs	r1, #9
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 f9a1 	bl	80089a0 <USBH_Get_CfgDesc>
 800865e:	4603      	mov	r3, r0
 8008660:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d103      	bne.n	8008670 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2204      	movs	r2, #4
 800866c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800866e:	e0cd      	b.n	800880c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	2b03      	cmp	r3, #3
 8008674:	f040 80ca 	bne.w	800880c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800867e:	3301      	adds	r3, #1
 8008680:	b2da      	uxtb	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800868e:	2b03      	cmp	r3, #3
 8008690:	d903      	bls.n	800869a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	220d      	movs	r2, #13
 8008696:	701a      	strb	r2, [r3, #0]
      break;
 8008698:	e0b8      	b.n	800880c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	795b      	ldrb	r3, [r3, #5]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 f851 	bl	8009748 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	791b      	ldrb	r3, [r3, #4]
 80086aa:	4619      	mov	r1, r3
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f001 f84b 	bl	8009748 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
      break;
 80086be:	e0a5      	b.n	800880c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f969 	bl	80089a0 <USBH_Get_CfgDesc>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2205      	movs	r2, #5
 80086dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80086de:	e097      	b.n	8008810 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	2b03      	cmp	r3, #3
 80086e4:	f040 8094 	bne.w	8008810 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80086ee:	3301      	adds	r3, #1
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d903      	bls.n	800870a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	220d      	movs	r2, #13
 8008706:	701a      	strb	r2, [r3, #0]
      break;
 8008708:	e082      	b.n	8008810 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	795b      	ldrb	r3, [r3, #5]
 800870e:	4619      	mov	r1, r3
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 f819 	bl	8009748 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	791b      	ldrb	r3, [r3, #4]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 f813 	bl	8009748 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	701a      	strb	r2, [r3, #0]
      break;
 800872e:	e06f      	b.n	8008810 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008736:	2b00      	cmp	r3, #0
 8008738:	d019      	beq.n	800876e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008746:	23ff      	movs	r3, #255	@ 0xff
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f953 	bl	80089f4 <USBH_Get_StringDesc>
 800874e:	4603      	mov	r3, r0
 8008750:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d103      	bne.n	8008760 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2206      	movs	r2, #6
 800875c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800875e:	e059      	b.n	8008814 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	2b03      	cmp	r3, #3
 8008764:	d156      	bne.n	8008814 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2206      	movs	r2, #6
 800876a:	705a      	strb	r2, [r3, #1]
      break;
 800876c:	e052      	b.n	8008814 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2206      	movs	r2, #6
 8008772:	705a      	strb	r2, [r3, #1]
      break;
 8008774:	e04e      	b.n	8008814 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800877c:	2b00      	cmp	r3, #0
 800877e:	d019      	beq.n	80087b4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800878c:	23ff      	movs	r3, #255	@ 0xff
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 f930 	bl	80089f4 <USBH_Get_StringDesc>
 8008794:	4603      	mov	r3, r0
 8008796:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d103      	bne.n	80087a6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2207      	movs	r2, #7
 80087a2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80087a4:	e038      	b.n	8008818 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087a6:	7bbb      	ldrb	r3, [r7, #14]
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d135      	bne.n	8008818 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2207      	movs	r2, #7
 80087b0:	705a      	strb	r2, [r3, #1]
      break;
 80087b2:	e031      	b.n	8008818 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2207      	movs	r2, #7
 80087b8:	705a      	strb	r2, [r3, #1]
      break;
 80087ba:	e02d      	b.n	8008818 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d017      	beq.n	80087f6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80087d2:	23ff      	movs	r3, #255	@ 0xff
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f90d 	bl	80089f4 <USBH_Get_StringDesc>
 80087da:	4603      	mov	r3, r0
 80087dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d102      	bne.n	80087ea <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80087e8:	e018      	b.n	800881c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d115      	bne.n	800881c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	73fb      	strb	r3, [r7, #15]
      break;
 80087f4:	e012      	b.n	800881c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]
      break;
 80087fa:	e00f      	b.n	800881c <USBH_HandleEnum+0x3b4>

    default:
      break;
 80087fc:	bf00      	nop
 80087fe:	e00e      	b.n	800881e <USBH_HandleEnum+0x3b6>
      break;
 8008800:	bf00      	nop
 8008802:	e00c      	b.n	800881e <USBH_HandleEnum+0x3b6>
      break;
 8008804:	bf00      	nop
 8008806:	e00a      	b.n	800881e <USBH_HandleEnum+0x3b6>
      break;
 8008808:	bf00      	nop
 800880a:	e008      	b.n	800881e <USBH_HandleEnum+0x3b6>
      break;
 800880c:	bf00      	nop
 800880e:	e006      	b.n	800881e <USBH_HandleEnum+0x3b6>
      break;
 8008810:	bf00      	nop
 8008812:	e004      	b.n	800881e <USBH_HandleEnum+0x3b6>
      break;
 8008814:	bf00      	nop
 8008816:	e002      	b.n	800881e <USBH_HandleEnum+0x3b6>
      break;
 8008818:	bf00      	nop
 800881a:	e000      	b.n	800881e <USBH_HandleEnum+0x3b6>
      break;
 800881c:	bf00      	nop
  }
  return Status;
 800881e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008854:	1c5a      	adds	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f804 	bl	800886a <USBH_HandleSof>
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	b2db      	uxtb	r3, r3
 8008878:	2b0b      	cmp	r3, #11
 800887a:	d10a      	bne.n	8008892 <USBH_HandleSof+0x28>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
  }
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80088aa:	bf00      	nop
}
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80088c6:	bf00      	nop
}
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 f8be 	bl	8009aa2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	791b      	ldrb	r3, [r3, #4]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 ff0b 	bl	8009748 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	795b      	ldrb	r3, [r3, #5]
 8008936:	4619      	mov	r1, r3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f000 ff05 	bl	8009748 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af02      	add	r7, sp, #8
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008954:	887b      	ldrh	r3, [r7, #2]
 8008956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800895a:	d901      	bls.n	8008960 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800895c:	2303      	movs	r3, #3
 800895e:	e01b      	b.n	8008998 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008966:	887b      	ldrh	r3, [r7, #2]
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	4613      	mov	r3, r2
 800896c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008970:	2100      	movs	r1, #0
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f872 	bl	8008a5c <USBH_GetDescriptor>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d109      	bne.n	8008996 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008988:	887a      	ldrh	r2, [r7, #2]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f929 	bl	8008be4 <USBH_ParseDevDesc>
 8008992:	4603      	mov	r3, r0
 8008994:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008996:	7bfb      	ldrb	r3, [r7, #15]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af02      	add	r7, sp, #8
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	331c      	adds	r3, #28
 80089b0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80089b2:	887b      	ldrh	r3, [r7, #2]
 80089b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089b8:	d901      	bls.n	80089be <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e016      	b.n	80089ec <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80089be:	887b      	ldrh	r3, [r7, #2]
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f846 	bl	8008a5c <USBH_GetDescriptor>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d107      	bne.n	80089ea <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80089da:	887b      	ldrh	r3, [r7, #2]
 80089dc:	461a      	mov	r2, r3
 80089de:	68b9      	ldr	r1, [r7, #8]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f9af 	bl	8008d44 <USBH_ParseCfgDesc>
 80089e6:	4603      	mov	r3, r0
 80089e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b088      	sub	sp, #32
 80089f8:	af02      	add	r7, sp, #8
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	607a      	str	r2, [r7, #4]
 80089fe:	461a      	mov	r2, r3
 8008a00:	460b      	mov	r3, r1
 8008a02:	72fb      	strb	r3, [r7, #11]
 8008a04:	4613      	mov	r3, r2
 8008a06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008a08:	893b      	ldrh	r3, [r7, #8]
 8008a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a0e:	d802      	bhi.n	8008a16 <USBH_Get_StringDesc+0x22>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e01c      	b.n	8008a54 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008a22:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008a2a:	893b      	ldrh	r3, [r7, #8]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	2100      	movs	r1, #0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 f812 	bl	8008a5c <USBH_GetDescriptor>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008a3c:	7dfb      	ldrb	r3, [r7, #23]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d107      	bne.n	8008a52 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008a48:	893a      	ldrh	r2, [r7, #8]
 8008a4a:	6879      	ldr	r1, [r7, #4]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fb8d 	bl	800916c <USBH_ParseStringDesc>
  }

  return status;
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	607b      	str	r3, [r7, #4]
 8008a66:	460b      	mov	r3, r1
 8008a68:	72fb      	strb	r3, [r7, #11]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	789b      	ldrb	r3, [r3, #2]
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d11c      	bne.n	8008ab0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008a76:	7afb      	ldrb	r3, [r7, #11]
 8008a78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008a7c:	b2da      	uxtb	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2206      	movs	r2, #6
 8008a86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	893a      	ldrh	r2, [r7, #8]
 8008a8c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008a8e:	893b      	ldrh	r3, [r7, #8]
 8008a90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008a94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a98:	d104      	bne.n	8008aa4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f240 4209 	movw	r2, #1033	@ 0x409
 8008aa0:	829a      	strh	r2, [r3, #20]
 8008aa2:	e002      	b.n	8008aaa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	8b3a      	ldrh	r2, [r7, #24]
 8008aae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008ab0:	8b3b      	ldrh	r3, [r7, #24]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fba5 	bl	8009206 <USBH_CtlReq>
 8008abc:	4603      	mov	r3, r0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	789b      	ldrb	r3, [r3, #2]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d10f      	bne.n	8008afa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2205      	movs	r2, #5
 8008ae4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008ae6:	78fb      	ldrb	r3, [r7, #3]
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008afa:	2200      	movs	r2, #0
 8008afc:	2100      	movs	r1, #0
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fb81 	bl	8009206 <USBH_CtlReq>
 8008b04:	4603      	mov	r3, r0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	789b      	ldrb	r3, [r3, #2]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d10e      	bne.n	8008b40 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2209      	movs	r2, #9
 8008b2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	887a      	ldrh	r2, [r7, #2]
 8008b32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b40:	2200      	movs	r2, #0
 8008b42:	2100      	movs	r1, #0
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fb5e 	bl	8009206 <USBH_CtlReq>
 8008b4a:	4603      	mov	r3, r0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	789b      	ldrb	r3, [r3, #2]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d10f      	bne.n	8008b88 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2203      	movs	r2, #3
 8008b72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	b29a      	uxth	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fb3a 	bl	8009206 <USBH_CtlReq>
 8008b92:	4603      	mov	r3, r0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	789b      	ldrb	r3, [r3, #2]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d10f      	bne.n	8008bd0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2100      	movs	r1, #0
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fb16 	bl	8009206 <USBH_CtlReq>
 8008bda:	4603      	mov	r3, r0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008bf8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008c04:	2302      	movs	r3, #2
 8008c06:	e094      	b.n	8008d32 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	781a      	ldrb	r2, [r3, #0]
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	785a      	ldrb	r2, [r3, #1]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	3302      	adds	r3, #2
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	3303      	adds	r3, #3
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	791a      	ldrb	r2, [r3, #4]
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	795a      	ldrb	r2, [r3, #5]
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	799a      	ldrb	r2, [r3, #6]
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	79da      	ldrb	r2, [r3, #7]
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d004      	beq.n	8008c66 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d11b      	bne.n	8008c9e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	79db      	ldrb	r3, [r3, #7]
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	dc0f      	bgt.n	8008c8e <USBH_ParseDevDesc+0xaa>
 8008c6e:	2b08      	cmp	r3, #8
 8008c70:	db0f      	blt.n	8008c92 <USBH_ParseDevDesc+0xae>
 8008c72:	3b08      	subs	r3, #8
 8008c74:	4a32      	ldr	r2, [pc, #200]	@ (8008d40 <USBH_ParseDevDesc+0x15c>)
 8008c76:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bf14      	ite	ne
 8008c82:	2301      	movne	r3, #1
 8008c84:	2300      	moveq	r3, #0
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d106      	bne.n	8008c9a <USBH_ParseDevDesc+0xb6>
 8008c8c:	e001      	b.n	8008c92 <USBH_ParseDevDesc+0xae>
 8008c8e:	2b40      	cmp	r3, #64	@ 0x40
 8008c90:	d003      	beq.n	8008c9a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2208      	movs	r2, #8
 8008c96:	71da      	strb	r2, [r3, #7]
        break;
 8008c98:	e000      	b.n	8008c9c <USBH_ParseDevDesc+0xb8>
        break;
 8008c9a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008c9c:	e00e      	b.n	8008cbc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d107      	bne.n	8008cb8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	79db      	ldrb	r3, [r3, #7]
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d005      	beq.n	8008cbc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	2208      	movs	r2, #8
 8008cb4:	71da      	strb	r2, [r3, #7]
 8008cb6:	e001      	b.n	8008cbc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008cbc:	88fb      	ldrh	r3, [r7, #6]
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d936      	bls.n	8008d30 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	3309      	adds	r3, #9
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	330a      	adds	r3, #10
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	330b      	adds	r3, #11
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	021b      	lsls	r3, r3, #8
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	330c      	adds	r3, #12
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	330d      	adds	r3, #13
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	021b      	lsls	r3, r3, #8
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	7b9a      	ldrb	r2, [r3, #14]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	7bda      	ldrb	r2, [r3, #15]
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	7c1a      	ldrb	r2, [r3, #16]
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	7c5a      	ldrb	r2, [r3, #17]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	01000101 	.word	0x01000101

08008d44 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b08c      	sub	sp, #48	@ 0x30
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	4613      	mov	r3, r2
 8008d50:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008d58:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008d60:	2300      	movs	r3, #0
 8008d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008d72:	2302      	movs	r3, #2
 8008d74:	e0da      	b.n	8008f2c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b09      	cmp	r3, #9
 8008d80:	d002      	beq.n	8008d88 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d84:	2209      	movs	r2, #9
 8008d86:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	781a      	ldrb	r2, [r3, #0]
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
 8008d8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	785a      	ldrb	r2, [r3, #1]
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	3302      	adds	r3, #2
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	3303      	adds	r3, #3
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	021b      	lsls	r3, r3, #8
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	4313      	orrs	r3, r2
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008db2:	bf28      	it	cs
 8008db4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	791a      	ldrb	r2, [r3, #4]
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	795a      	ldrb	r2, [r3, #5]
 8008dca:	6a3b      	ldr	r3, [r7, #32]
 8008dcc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	799a      	ldrb	r2, [r3, #6]
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	79da      	ldrb	r2, [r3, #7]
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	7a1a      	ldrb	r2, [r3, #8]
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008de6:	88fb      	ldrh	r3, [r7, #6]
 8008de8:	2b09      	cmp	r3, #9
 8008dea:	f240 809d 	bls.w	8008f28 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008dee:	2309      	movs	r3, #9
 8008df0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008df6:	e081      	b.n	8008efc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008df8:	f107 0316 	add.w	r3, r7, #22
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e00:	f000 f9e7 	bl	80091d2 <USBH_GetNextDesc>
 8008e04:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e08:	785b      	ldrb	r3, [r3, #1]
 8008e0a:	2b04      	cmp	r3, #4
 8008e0c:	d176      	bne.n	8008efc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b09      	cmp	r3, #9
 8008e14:	d002      	beq.n	8008e1c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e18:	2209      	movs	r2, #9
 8008e1a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e20:	221a      	movs	r2, #26
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
 8008e26:	3308      	adds	r3, #8
 8008e28:	6a3a      	ldr	r2, [r7, #32]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e32:	69f8      	ldr	r0, [r7, #28]
 8008e34:	f000 f87e 	bl	8008f34 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008e42:	e043      	b.n	8008ecc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008e44:	f107 0316 	add.w	r3, r7, #22
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e4c:	f000 f9c1 	bl	80091d2 <USBH_GetNextDesc>
 8008e50:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e54:	785b      	ldrb	r3, [r3, #1]
 8008e56:	2b05      	cmp	r3, #5
 8008e58:	d138      	bne.n	8008ecc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	795b      	ldrb	r3, [r3, #5]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d113      	bne.n	8008e8a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d003      	beq.n	8008e72 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	799b      	ldrb	r3, [r3, #6]
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d10b      	bne.n	8008e8a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	79db      	ldrb	r3, [r3, #7]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <USBH_ParseCfgDesc+0x14e>
 8008e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	2b09      	cmp	r3, #9
 8008e80:	d007      	beq.n	8008e92 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e84:	2209      	movs	r2, #9
 8008e86:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e88:	e003      	b.n	8008e92 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8c:	2207      	movs	r2, #7
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	e000      	b.n	8008e94 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008e92:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e98:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008e9c:	3201      	adds	r2, #1
 8008e9e:	00d2      	lsls	r2, r2, #3
 8008ea0:	211a      	movs	r1, #26
 8008ea2:	fb01 f303 	mul.w	r3, r1, r3
 8008ea6:	4413      	add	r3, r2
 8008ea8:	3308      	adds	r3, #8
 8008eaa:	6a3a      	ldr	r2, [r7, #32]
 8008eac:	4413      	add	r3, r2
 8008eae:	3304      	adds	r3, #4
 8008eb0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008eb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eb4:	69b9      	ldr	r1, [r7, #24]
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 f870 	bl	8008f9c <USBH_ParseEPDesc>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008ec2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	791b      	ldrb	r3, [r3, #4]
 8008ed0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d204      	bcs.n	8008ee2 <USBH_ParseCfgDesc+0x19e>
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	885a      	ldrh	r2, [r3, #2]
 8008edc:	8afb      	ldrh	r3, [r7, #22]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d8b0      	bhi.n	8008e44 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	791b      	ldrb	r3, [r3, #4]
 8008ee6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d201      	bcs.n	8008ef2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e01c      	b.n	8008f2c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d805      	bhi.n	8008f10 <USBH_ParseCfgDesc+0x1cc>
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	885a      	ldrh	r2, [r3, #2]
 8008f08:	8afb      	ldrh	r3, [r7, #22]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	f63f af74 	bhi.w	8008df8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	791b      	ldrb	r3, [r3, #4]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	bf28      	it	cs
 8008f18:	2302      	movcs	r3, #2
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d201      	bcs.n	8008f28 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e001      	b.n	8008f2c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008f28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3730      	adds	r7, #48	@ 0x30
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	785a      	ldrb	r2, [r3, #1]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	789a      	ldrb	r2, [r3, #2]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	78da      	ldrb	r2, [r3, #3]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	3304      	adds	r3, #4
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	bf28      	it	cs
 8008f68:	2302      	movcs	r3, #2
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	795a      	ldrb	r2, [r3, #5]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	799a      	ldrb	r2, [r3, #6]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	79da      	ldrb	r2, [r3, #7]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	7a1a      	ldrb	r2, [r3, #8]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	721a      	strb	r2, [r3, #8]
}
 8008f90:	bf00      	nop
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	781a      	ldrb	r2, [r3, #0]
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	785a      	ldrb	r2, [r3, #1]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	789a      	ldrb	r2, [r3, #2]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	78da      	ldrb	r2, [r3, #3]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3305      	adds	r3, #5
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	799a      	ldrb	r2, [r3, #6]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	889b      	ldrh	r3, [r3, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ffe:	d804      	bhi.n	800900a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009008:	d901      	bls.n	800900e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800900a:	2303      	movs	r3, #3
 800900c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009014:	2b00      	cmp	r3, #0
 8009016:	d136      	bne.n	8009086 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	78db      	ldrb	r3, [r3, #3]
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d108      	bne.n	8009036 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	889b      	ldrh	r3, [r3, #4]
 8009028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800902c:	f240 8097 	bls.w	800915e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009030:	2303      	movs	r3, #3
 8009032:	75fb      	strb	r3, [r7, #23]
 8009034:	e093      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	78db      	ldrb	r3, [r3, #3]
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d107      	bne.n	8009052 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	889b      	ldrh	r3, [r3, #4]
 8009046:	2b40      	cmp	r3, #64	@ 0x40
 8009048:	f240 8089 	bls.w	800915e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800904c:	2303      	movs	r3, #3
 800904e:	75fb      	strb	r3, [r7, #23]
 8009050:	e085      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	78db      	ldrb	r3, [r3, #3]
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	2b01      	cmp	r3, #1
 800905c:	d005      	beq.n	800906a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	78db      	ldrb	r3, [r3, #3]
 8009062:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009066:	2b03      	cmp	r3, #3
 8009068:	d10a      	bne.n	8009080 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	799b      	ldrb	r3, [r3, #6]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <USBH_ParseEPDesc+0xde>
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	799b      	ldrb	r3, [r3, #6]
 8009076:	2b10      	cmp	r3, #16
 8009078:	d970      	bls.n	800915c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800907a:	2303      	movs	r3, #3
 800907c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800907e:	e06d      	b.n	800915c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009080:	2303      	movs	r3, #3
 8009082:	75fb      	strb	r3, [r7, #23]
 8009084:	e06b      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800908c:	2b01      	cmp	r3, #1
 800908e:	d13c      	bne.n	800910a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	78db      	ldrb	r3, [r3, #3]
 8009094:	f003 0303 	and.w	r3, r3, #3
 8009098:	2b02      	cmp	r3, #2
 800909a:	d005      	beq.n	80090a8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	78db      	ldrb	r3, [r3, #3]
 80090a0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d106      	bne.n	80090b6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	889b      	ldrh	r3, [r3, #4]
 80090ac:	2b40      	cmp	r3, #64	@ 0x40
 80090ae:	d956      	bls.n	800915e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80090b0:	2303      	movs	r3, #3
 80090b2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80090b4:	e053      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	78db      	ldrb	r3, [r3, #3]
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d10e      	bne.n	80090e0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	799b      	ldrb	r3, [r3, #6]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d007      	beq.n	80090da <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80090ce:	2b10      	cmp	r3, #16
 80090d0:	d803      	bhi.n	80090da <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80090d6:	2b40      	cmp	r3, #64	@ 0x40
 80090d8:	d941      	bls.n	800915e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80090da:	2303      	movs	r3, #3
 80090dc:	75fb      	strb	r3, [r7, #23]
 80090de:	e03e      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	78db      	ldrb	r3, [r3, #3]
 80090e4:	f003 0303 	and.w	r3, r3, #3
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d10b      	bne.n	8009104 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	799b      	ldrb	r3, [r3, #6]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <USBH_ParseEPDesc+0x162>
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	889b      	ldrh	r3, [r3, #4]
 80090f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090fc:	d32f      	bcc.n	800915e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80090fe:	2303      	movs	r3, #3
 8009100:	75fb      	strb	r3, [r7, #23]
 8009102:	e02c      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009104:	2303      	movs	r3, #3
 8009106:	75fb      	strb	r3, [r7, #23]
 8009108:	e029      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009110:	2b02      	cmp	r3, #2
 8009112:	d120      	bne.n	8009156 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	78db      	ldrb	r3, [r3, #3]
 8009118:	f003 0303 	and.w	r3, r3, #3
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	889b      	ldrh	r3, [r3, #4]
 8009124:	2b08      	cmp	r3, #8
 8009126:	d01a      	beq.n	800915e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009128:	2303      	movs	r3, #3
 800912a:	75fb      	strb	r3, [r7, #23]
 800912c:	e017      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	78db      	ldrb	r3, [r3, #3]
 8009132:	f003 0303 	and.w	r3, r3, #3
 8009136:	2b03      	cmp	r3, #3
 8009138:	d10a      	bne.n	8009150 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	799b      	ldrb	r3, [r3, #6]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <USBH_ParseEPDesc+0x1ae>
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	889b      	ldrh	r3, [r3, #4]
 8009146:	2b08      	cmp	r3, #8
 8009148:	d909      	bls.n	800915e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800914a:	2303      	movs	r3, #3
 800914c:	75fb      	strb	r3, [r7, #23]
 800914e:	e006      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009150:	2303      	movs	r3, #3
 8009152:	75fb      	strb	r3, [r7, #23]
 8009154:	e003      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009156:	2303      	movs	r3, #3
 8009158:	75fb      	strb	r3, [r7, #23]
 800915a:	e000      	b.n	800915e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800915c:	bf00      	nop
  }

  return status;
 800915e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009160:	4618      	mov	r0, r3
 8009162:	371c      	adds	r7, #28
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800916c:	b480      	push	{r7}
 800916e:	b087      	sub	sp, #28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3301      	adds	r3, #1
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b03      	cmp	r3, #3
 8009182:	d120      	bne.n	80091c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	1e9a      	subs	r2, r3, #2
 800918a:	88fb      	ldrh	r3, [r7, #6]
 800918c:	4293      	cmp	r3, r2
 800918e:	bf28      	it	cs
 8009190:	4613      	movcs	r3, r2
 8009192:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3302      	adds	r3, #2
 8009198:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800919a:	2300      	movs	r3, #0
 800919c:	82fb      	strh	r3, [r7, #22]
 800919e:	e00b      	b.n	80091b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80091a0:	8afb      	ldrh	r3, [r7, #22]
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	781a      	ldrb	r2, [r3, #0]
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	3301      	adds	r3, #1
 80091b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80091b2:	8afb      	ldrh	r3, [r7, #22]
 80091b4:	3302      	adds	r3, #2
 80091b6:	82fb      	strh	r3, [r7, #22]
 80091b8:	8afa      	ldrh	r2, [r7, #22]
 80091ba:	8abb      	ldrh	r3, [r7, #20]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d3ef      	bcc.n	80091a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
  }
}
 80091c6:	bf00      	nop
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80091d2:	b480      	push	{r7}
 80091d4:	b085      	sub	sp, #20
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	7812      	ldrb	r2, [r2, #0]
 80091e4:	4413      	add	r3, r2
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4413      	add	r3, r2
 80091f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80091f8:	68fb      	ldr	r3, [r7, #12]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b086      	sub	sp, #24
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	4613      	mov	r3, r2
 8009212:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009214:	2301      	movs	r3, #1
 8009216:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	789b      	ldrb	r3, [r3, #2]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d002      	beq.n	8009226 <USBH_CtlReq+0x20>
 8009220:	2b02      	cmp	r3, #2
 8009222:	d00f      	beq.n	8009244 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009224:	e027      	b.n	8009276 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	88fa      	ldrh	r2, [r7, #6]
 8009230:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2202      	movs	r2, #2
 800923c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800923e:	2301      	movs	r3, #1
 8009240:	75fb      	strb	r3, [r7, #23]
      break;
 8009242:	e018      	b.n	8009276 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 f81b 	bl	8009280 <USBH_HandleControl>
 800924a:	4603      	mov	r3, r0
 800924c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800924e:	7dfb      	ldrb	r3, [r7, #23]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <USBH_CtlReq+0x54>
 8009254:	7dfb      	ldrb	r3, [r7, #23]
 8009256:	2b03      	cmp	r3, #3
 8009258:	d106      	bne.n	8009268 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2201      	movs	r2, #1
 800925e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2200      	movs	r2, #0
 8009264:	761a      	strb	r2, [r3, #24]
      break;
 8009266:	e005      	b.n	8009274 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	2b02      	cmp	r3, #2
 800926c:	d102      	bne.n	8009274 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2201      	movs	r2, #1
 8009272:	709a      	strb	r2, [r3, #2]
      break;
 8009274:	bf00      	nop
  }
  return status;
 8009276:	7dfb      	ldrb	r3, [r7, #23]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af02      	add	r7, sp, #8
 8009286:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009288:	2301      	movs	r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800928c:	2300      	movs	r3, #0
 800928e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	7e1b      	ldrb	r3, [r3, #24]
 8009294:	3b01      	subs	r3, #1
 8009296:	2b0a      	cmp	r3, #10
 8009298:	f200 8156 	bhi.w	8009548 <USBH_HandleControl+0x2c8>
 800929c:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <USBH_HandleControl+0x24>)
 800929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a2:	bf00      	nop
 80092a4:	080092d1 	.word	0x080092d1
 80092a8:	080092eb 	.word	0x080092eb
 80092ac:	08009355 	.word	0x08009355
 80092b0:	0800937b 	.word	0x0800937b
 80092b4:	080093b3 	.word	0x080093b3
 80092b8:	080093dd 	.word	0x080093dd
 80092bc:	0800942f 	.word	0x0800942f
 80092c0:	08009451 	.word	0x08009451
 80092c4:	0800948d 	.word	0x0800948d
 80092c8:	080094b3 	.word	0x080094b3
 80092cc:	080094f1 	.word	0x080094f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f103 0110 	add.w	r1, r3, #16
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	795b      	ldrb	r3, [r3, #5]
 80092da:	461a      	mov	r2, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f943 	bl	8009568 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2202      	movs	r2, #2
 80092e6:	761a      	strb	r2, [r3, #24]
      break;
 80092e8:	e139      	b.n	800955e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	795b      	ldrb	r3, [r3, #5]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 fcc5 	bl	8009c80 <USBH_LL_GetURBState>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d11e      	bne.n	800933e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	7c1b      	ldrb	r3, [r3, #16]
 8009304:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009308:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	8adb      	ldrh	r3, [r3, #22]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009312:	7b7b      	ldrb	r3, [r7, #13]
 8009314:	2b80      	cmp	r3, #128	@ 0x80
 8009316:	d103      	bne.n	8009320 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2203      	movs	r2, #3
 800931c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800931e:	e115      	b.n	800954c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2205      	movs	r2, #5
 8009324:	761a      	strb	r2, [r3, #24]
      break;
 8009326:	e111      	b.n	800954c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009328:	7b7b      	ldrb	r3, [r7, #13]
 800932a:	2b80      	cmp	r3, #128	@ 0x80
 800932c:	d103      	bne.n	8009336 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2209      	movs	r2, #9
 8009332:	761a      	strb	r2, [r3, #24]
      break;
 8009334:	e10a      	b.n	800954c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2207      	movs	r2, #7
 800933a:	761a      	strb	r2, [r3, #24]
      break;
 800933c:	e106      	b.n	800954c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b04      	cmp	r3, #4
 8009342:	d003      	beq.n	800934c <USBH_HandleControl+0xcc>
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	2b02      	cmp	r3, #2
 8009348:	f040 8100 	bne.w	800954c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	220b      	movs	r2, #11
 8009350:	761a      	strb	r2, [r3, #24]
      break;
 8009352:	e0fb      	b.n	800954c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800935a:	b29a      	uxth	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6899      	ldr	r1, [r3, #8]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	899a      	ldrh	r2, [r3, #12]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	791b      	ldrb	r3, [r3, #4]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f93a 	bl	80095e6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2204      	movs	r2, #4
 8009376:	761a      	strb	r2, [r3, #24]
      break;
 8009378:	e0f1      	b.n	800955e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fc7d 	bl	8009c80 <USBH_LL_GetURBState>
 8009386:	4603      	mov	r3, r0
 8009388:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d102      	bne.n	8009396 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2209      	movs	r2, #9
 8009394:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b05      	cmp	r3, #5
 800939a:	d102      	bne.n	80093a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800939c:	2303      	movs	r3, #3
 800939e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093a0:	e0d6      	b.n	8009550 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80093a2:	7bbb      	ldrb	r3, [r7, #14]
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	f040 80d3 	bne.w	8009550 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	220b      	movs	r2, #11
 80093ae:	761a      	strb	r2, [r3, #24]
      break;
 80093b0:	e0ce      	b.n	8009550 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6899      	ldr	r1, [r3, #8]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	899a      	ldrh	r2, [r3, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	795b      	ldrb	r3, [r3, #5]
 80093be:	2001      	movs	r0, #1
 80093c0:	9000      	str	r0, [sp, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 f8ea 	bl	800959c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2206      	movs	r2, #6
 80093d8:	761a      	strb	r2, [r3, #24]
      break;
 80093da:	e0c0      	b.n	800955e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	795b      	ldrb	r3, [r3, #5]
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fc4c 	bl	8009c80 <USBH_LL_GetURBState>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80093ec:	7bbb      	ldrb	r3, [r7, #14]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d103      	bne.n	80093fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2207      	movs	r2, #7
 80093f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80093f8:	e0ac      	b.n	8009554 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b05      	cmp	r3, #5
 80093fe:	d105      	bne.n	800940c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	220c      	movs	r2, #12
 8009404:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009406:	2303      	movs	r3, #3
 8009408:	73fb      	strb	r3, [r7, #15]
      break;
 800940a:	e0a3      	b.n	8009554 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	2b02      	cmp	r3, #2
 8009410:	d103      	bne.n	800941a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2205      	movs	r2, #5
 8009416:	761a      	strb	r2, [r3, #24]
      break;
 8009418:	e09c      	b.n	8009554 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	2b04      	cmp	r3, #4
 800941e:	f040 8099 	bne.w	8009554 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	220b      	movs	r2, #11
 8009426:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009428:	2302      	movs	r3, #2
 800942a:	73fb      	strb	r3, [r7, #15]
      break;
 800942c:	e092      	b.n	8009554 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	791b      	ldrb	r3, [r3, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f8d5 	bl	80095e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009442:	b29a      	uxth	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2208      	movs	r2, #8
 800944c:	761a      	strb	r2, [r3, #24]

      break;
 800944e:	e086      	b.n	800955e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	791b      	ldrb	r3, [r3, #4]
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fc12 	bl	8009c80 <USBH_LL_GetURBState>
 800945c:	4603      	mov	r3, r0
 800945e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009460:	7bbb      	ldrb	r3, [r7, #14]
 8009462:	2b01      	cmp	r3, #1
 8009464:	d105      	bne.n	8009472 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	220d      	movs	r2, #13
 800946a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009470:	e072      	b.n	8009558 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	2b04      	cmp	r3, #4
 8009476:	d103      	bne.n	8009480 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	220b      	movs	r2, #11
 800947c:	761a      	strb	r2, [r3, #24]
      break;
 800947e:	e06b      	b.n	8009558 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b05      	cmp	r3, #5
 8009484:	d168      	bne.n	8009558 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009486:	2303      	movs	r3, #3
 8009488:	73fb      	strb	r3, [r7, #15]
      break;
 800948a:	e065      	b.n	8009558 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	795b      	ldrb	r3, [r3, #5]
 8009490:	2201      	movs	r2, #1
 8009492:	9200      	str	r2, [sp, #0]
 8009494:	2200      	movs	r2, #0
 8009496:	2100      	movs	r1, #0
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f87f 	bl	800959c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	220a      	movs	r2, #10
 80094ae:	761a      	strb	r2, [r3, #24]
      break;
 80094b0:	e055      	b.n	800955e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	795b      	ldrb	r3, [r3, #5]
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fbe1 	bl	8009c80 <USBH_LL_GetURBState>
 80094be:	4603      	mov	r3, r0
 80094c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80094c2:	7bbb      	ldrb	r3, [r7, #14]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d105      	bne.n	80094d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	220d      	movs	r2, #13
 80094d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094d2:	e043      	b.n	800955c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b02      	cmp	r3, #2
 80094d8:	d103      	bne.n	80094e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2209      	movs	r2, #9
 80094de:	761a      	strb	r2, [r3, #24]
      break;
 80094e0:	e03c      	b.n	800955c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	d139      	bne.n	800955c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	220b      	movs	r2, #11
 80094ec:	761a      	strb	r2, [r3, #24]
      break;
 80094ee:	e035      	b.n	800955c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7e5b      	ldrb	r3, [r3, #25]
 80094f4:	3301      	adds	r3, #1
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	765a      	strb	r2, [r3, #25]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	7e5b      	ldrb	r3, [r3, #25]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d806      	bhi.n	8009512 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009510:	e025      	b.n	800955e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009518:	2106      	movs	r1, #6
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	795b      	ldrb	r3, [r3, #5]
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f90c 	bl	8009748 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	791b      	ldrb	r3, [r3, #4]
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 f906 	bl	8009748 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009542:	2302      	movs	r3, #2
 8009544:	73fb      	strb	r3, [r7, #15]
      break;
 8009546:	e00a      	b.n	800955e <USBH_HandleControl+0x2de>

    default:
      break;
 8009548:	bf00      	nop
 800954a:	e008      	b.n	800955e <USBH_HandleControl+0x2de>
      break;
 800954c:	bf00      	nop
 800954e:	e006      	b.n	800955e <USBH_HandleControl+0x2de>
      break;
 8009550:	bf00      	nop
 8009552:	e004      	b.n	800955e <USBH_HandleControl+0x2de>
      break;
 8009554:	bf00      	nop
 8009556:	e002      	b.n	800955e <USBH_HandleControl+0x2de>
      break;
 8009558:	bf00      	nop
 800955a:	e000      	b.n	800955e <USBH_HandleControl+0x2de>
      break;
 800955c:	bf00      	nop
  }

  return status;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3710      	adds	r7, #16
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af04      	add	r7, sp, #16
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009576:	79f9      	ldrb	r1, [r7, #7]
 8009578:	2300      	movs	r3, #0
 800957a:	9303      	str	r3, [sp, #12]
 800957c:	2308      	movs	r3, #8
 800957e:	9302      	str	r3, [sp, #8]
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	9301      	str	r3, [sp, #4]
 8009584:	2300      	movs	r3, #0
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	2300      	movs	r3, #0
 800958a:	2200      	movs	r2, #0
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 fb46 	bl	8009c1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009592:	2300      	movs	r3, #0
}
 8009594:	4618      	mov	r0, r3
 8009596:	3710      	adds	r7, #16
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b088      	sub	sp, #32
 80095a0:	af04      	add	r7, sp, #16
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	4611      	mov	r1, r2
 80095a8:	461a      	mov	r2, r3
 80095aa:	460b      	mov	r3, r1
 80095ac:	80fb      	strh	r3, [r7, #6]
 80095ae:	4613      	mov	r3, r2
 80095b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095c0:	7979      	ldrb	r1, [r7, #5]
 80095c2:	7e3b      	ldrb	r3, [r7, #24]
 80095c4:	9303      	str	r3, [sp, #12]
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	9302      	str	r3, [sp, #8]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	9301      	str	r3, [sp, #4]
 80095ce:	2301      	movs	r3, #1
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	2300      	movs	r3, #0
 80095d4:	2200      	movs	r2, #0
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 fb21 	bl	8009c1e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b088      	sub	sp, #32
 80095ea:	af04      	add	r7, sp, #16
 80095ec:	60f8      	str	r0, [r7, #12]
 80095ee:	60b9      	str	r1, [r7, #8]
 80095f0:	4611      	mov	r1, r2
 80095f2:	461a      	mov	r2, r3
 80095f4:	460b      	mov	r3, r1
 80095f6:	80fb      	strh	r3, [r7, #6]
 80095f8:	4613      	mov	r3, r2
 80095fa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80095fc:	7979      	ldrb	r1, [r7, #5]
 80095fe:	2300      	movs	r3, #0
 8009600:	9303      	str	r3, [sp, #12]
 8009602:	88fb      	ldrh	r3, [r7, #6]
 8009604:	9302      	str	r3, [sp, #8]
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	2301      	movs	r3, #1
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	2300      	movs	r3, #0
 8009610:	2201      	movs	r2, #1
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fb03 	bl	8009c1e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009618:	2300      	movs	r3, #0

}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b088      	sub	sp, #32
 8009626:	af04      	add	r7, sp, #16
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	4611      	mov	r1, r2
 800962e:	461a      	mov	r2, r3
 8009630:	460b      	mov	r3, r1
 8009632:	80fb      	strh	r3, [r7, #6]
 8009634:	4613      	mov	r3, r2
 8009636:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009646:	7979      	ldrb	r1, [r7, #5]
 8009648:	7e3b      	ldrb	r3, [r7, #24]
 800964a:	9303      	str	r3, [sp, #12]
 800964c:	88fb      	ldrh	r3, [r7, #6]
 800964e:	9302      	str	r3, [sp, #8]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	9301      	str	r3, [sp, #4]
 8009654:	2301      	movs	r3, #1
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	2302      	movs	r3, #2
 800965a:	2200      	movs	r2, #0
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 fade 	bl	8009c1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af04      	add	r7, sp, #16
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	4611      	mov	r1, r2
 8009678:	461a      	mov	r2, r3
 800967a:	460b      	mov	r3, r1
 800967c:	80fb      	strh	r3, [r7, #6]
 800967e:	4613      	mov	r3, r2
 8009680:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009682:	7979      	ldrb	r1, [r7, #5]
 8009684:	2300      	movs	r3, #0
 8009686:	9303      	str	r3, [sp, #12]
 8009688:	88fb      	ldrh	r3, [r7, #6]
 800968a:	9302      	str	r3, [sp, #8]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	2301      	movs	r3, #1
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	2302      	movs	r3, #2
 8009696:	2201      	movs	r2, #1
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 fac0 	bl	8009c1e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af04      	add	r7, sp, #16
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	4608      	mov	r0, r1
 80096b2:	4611      	mov	r1, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	70fb      	strb	r3, [r7, #3]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70bb      	strb	r3, [r7, #2]
 80096be:	4613      	mov	r3, r2
 80096c0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80096c2:	7878      	ldrb	r0, [r7, #1]
 80096c4:	78ba      	ldrb	r2, [r7, #2]
 80096c6:	78f9      	ldrb	r1, [r7, #3]
 80096c8:	8b3b      	ldrh	r3, [r7, #24]
 80096ca:	9302      	str	r3, [sp, #8]
 80096cc:	7d3b      	ldrb	r3, [r7, #20]
 80096ce:	9301      	str	r3, [sp, #4]
 80096d0:	7c3b      	ldrb	r3, [r7, #16]
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	4603      	mov	r3, r0
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa53 	bl	8009b82 <USBH_LL_OpenPipe>

  return USBH_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fa72 	bl	8009be0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b084      	sub	sp, #16
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
 800970e:	460b      	mov	r3, r1
 8009710:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f836 	bl	8009784 <USBH_GetFreePipe>
 8009718:	4603      	mov	r3, r0
 800971a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800971c:	89fb      	ldrh	r3, [r7, #14]
 800971e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009722:	4293      	cmp	r3, r2
 8009724:	d00a      	beq.n	800973c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	89fb      	ldrh	r3, [r7, #14]
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009732:	6879      	ldr	r1, [r7, #4]
 8009734:	33e0      	adds	r3, #224	@ 0xe0
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	440b      	add	r3, r1
 800973a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800973c:	89fb      	ldrh	r3, [r7, #14]
 800973e:	b2db      	uxtb	r3, r3
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	2b0f      	cmp	r3, #15
 8009758:	d80d      	bhi.n	8009776 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800975a:	78fb      	ldrb	r3, [r7, #3]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	33e0      	adds	r3, #224	@ 0xe0
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	78fb      	ldrb	r3, [r7, #3]
 8009768:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	33e0      	adds	r3, #224	@ 0xe0
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
 8009794:	e00f      	b.n	80097b6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	33e0      	adds	r3, #224	@ 0xe0
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d102      	bne.n	80097b0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	e007      	b.n	80097c0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	3301      	adds	r3, #1
 80097b4:	73fb      	strb	r3, [r7, #15]
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	2b0f      	cmp	r3, #15
 80097ba:	d9ec      	bls.n	8009796 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80097bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3714      	adds	r7, #20
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80097d0:	2201      	movs	r2, #1
 80097d2:	490e      	ldr	r1, [pc, #56]	@ (800980c <MX_USB_HOST_Init+0x40>)
 80097d4:	480e      	ldr	r0, [pc, #56]	@ (8009810 <MX_USB_HOST_Init+0x44>)
 80097d6:	f7fe fb15 	bl	8007e04 <USBH_Init>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80097e0:	f7f7 fa0c 	bl	8000bfc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80097e4:	490b      	ldr	r1, [pc, #44]	@ (8009814 <MX_USB_HOST_Init+0x48>)
 80097e6:	480a      	ldr	r0, [pc, #40]	@ (8009810 <MX_USB_HOST_Init+0x44>)
 80097e8:	f7fe fbb9 	bl	8007f5e <USBH_RegisterClass>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80097f2:	f7f7 fa03 	bl	8000bfc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80097f6:	4806      	ldr	r0, [pc, #24]	@ (8009810 <MX_USB_HOST_Init+0x44>)
 80097f8:	f7fe fc3d 	bl	8008076 <USBH_Start>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009802:	f7f7 f9fb 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009806:	bf00      	nop
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	0800982d 	.word	0x0800982d
 8009810:	2000024c 	.word	0x2000024c
 8009814:	2000000c 	.word	0x2000000c

08009818 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800981c:	4802      	ldr	r0, [pc, #8]	@ (8009828 <MX_USB_HOST_Process+0x10>)
 800981e:	f7fe fc3b 	bl	8008098 <USBH_Process>
}
 8009822:	bf00      	nop
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	2000024c 	.word	0x2000024c

0800982c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	460b      	mov	r3, r1
 8009836:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	3b01      	subs	r3, #1
 800983c:	2b04      	cmp	r3, #4
 800983e:	d819      	bhi.n	8009874 <USBH_UserProcess+0x48>
 8009840:	a201      	add	r2, pc, #4	@ (adr r2, 8009848 <USBH_UserProcess+0x1c>)
 8009842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009846:	bf00      	nop
 8009848:	08009875 	.word	0x08009875
 800984c:	08009865 	.word	0x08009865
 8009850:	08009875 	.word	0x08009875
 8009854:	0800986d 	.word	0x0800986d
 8009858:	0800985d 	.word	0x0800985d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800985c:	4b09      	ldr	r3, [pc, #36]	@ (8009884 <USBH_UserProcess+0x58>)
 800985e:	2203      	movs	r2, #3
 8009860:	701a      	strb	r2, [r3, #0]
  break;
 8009862:	e008      	b.n	8009876 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009864:	4b07      	ldr	r3, [pc, #28]	@ (8009884 <USBH_UserProcess+0x58>)
 8009866:	2202      	movs	r2, #2
 8009868:	701a      	strb	r2, [r3, #0]
  break;
 800986a:	e004      	b.n	8009876 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800986c:	4b05      	ldr	r3, [pc, #20]	@ (8009884 <USBH_UserProcess+0x58>)
 800986e:	2201      	movs	r2, #1
 8009870:	701a      	strb	r2, [r3, #0]
  break;
 8009872:	e000      	b.n	8009876 <USBH_UserProcess+0x4a>

  default:
  break;
 8009874:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	20000624 	.word	0x20000624

08009888 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08a      	sub	sp, #40	@ 0x28
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009890:	f107 0314 	add.w	r3, r7, #20
 8009894:	2200      	movs	r2, #0
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	605a      	str	r2, [r3, #4]
 800989a:	609a      	str	r2, [r3, #8]
 800989c:	60da      	str	r2, [r3, #12]
 800989e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098a8:	d147      	bne.n	800993a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098aa:	2300      	movs	r3, #0
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	4b25      	ldr	r3, [pc, #148]	@ (8009944 <HAL_HCD_MspInit+0xbc>)
 80098b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b2:	4a24      	ldr	r2, [pc, #144]	@ (8009944 <HAL_HCD_MspInit+0xbc>)
 80098b4:	f043 0301 	orr.w	r3, r3, #1
 80098b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80098ba:	4b22      	ldr	r3, [pc, #136]	@ (8009944 <HAL_HCD_MspInit+0xbc>)
 80098bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	613b      	str	r3, [r7, #16]
 80098c4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80098c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098cc:	2300      	movs	r3, #0
 80098ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098d0:	2300      	movs	r3, #0
 80098d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80098d4:	f107 0314 	add.w	r3, r7, #20
 80098d8:	4619      	mov	r1, r3
 80098da:	481b      	ldr	r0, [pc, #108]	@ (8009948 <HAL_HCD_MspInit+0xc0>)
 80098dc:	f7f7 ff42 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80098e0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80098e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098e6:	2302      	movs	r3, #2
 80098e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098ee:	2300      	movs	r3, #0
 80098f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098f2:	230a      	movs	r3, #10
 80098f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098f6:	f107 0314 	add.w	r3, r7, #20
 80098fa:	4619      	mov	r1, r3
 80098fc:	4812      	ldr	r0, [pc, #72]	@ (8009948 <HAL_HCD_MspInit+0xc0>)
 80098fe:	f7f7 ff31 	bl	8001764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009902:	4b10      	ldr	r3, [pc, #64]	@ (8009944 <HAL_HCD_MspInit+0xbc>)
 8009904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009906:	4a0f      	ldr	r2, [pc, #60]	@ (8009944 <HAL_HCD_MspInit+0xbc>)
 8009908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800990c:	6353      	str	r3, [r2, #52]	@ 0x34
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]
 8009912:	4b0c      	ldr	r3, [pc, #48]	@ (8009944 <HAL_HCD_MspInit+0xbc>)
 8009914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009916:	4a0b      	ldr	r2, [pc, #44]	@ (8009944 <HAL_HCD_MspInit+0xbc>)
 8009918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800991c:	6453      	str	r3, [r2, #68]	@ 0x44
 800991e:	4b09      	ldr	r3, [pc, #36]	@ (8009944 <HAL_HCD_MspInit+0xbc>)
 8009920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009926:	60fb      	str	r3, [r7, #12]
 8009928:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800992a:	2200      	movs	r2, #0
 800992c:	2100      	movs	r1, #0
 800992e:	2043      	movs	r0, #67	@ 0x43
 8009930:	f7f7 febf 	bl	80016b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009934:	2043      	movs	r0, #67	@ 0x43
 8009936:	f7f7 fed8 	bl	80016ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800993a:	bf00      	nop
 800993c:	3728      	adds	r7, #40	@ 0x28
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	40023800 	.word	0x40023800
 8009948:	40020000 	.word	0x40020000

0800994c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800995a:	4618      	mov	r0, r3
 800995c:	f7fe ff73 	bl	8008846 <USBH_LL_IncTimer>
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe ffab 	bl	80088d2 <USBH_LL_Connect>
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009992:	4618      	mov	r0, r3
 8009994:	f7fe ffb4 	bl	8008900 <USBH_LL_Disconnect>
}
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
 80099ac:	4613      	mov	r3, r2
 80099ae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe ff65 	bl	800889a <USBH_LL_PortEnabled>
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe ff65 	bl	80088b6 <USBH_LL_PortDisabled>
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d12a      	bne.n	8009a5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009a06:	4a18      	ldr	r2, [pc, #96]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a15      	ldr	r2, [pc, #84]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a12:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009a16:	4b14      	ldr	r3, [pc, #80]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009a1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009a1e:	4b12      	ldr	r3, [pc, #72]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a20:	2208      	movs	r2, #8
 8009a22:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009a24:	4b10      	ldr	r3, [pc, #64]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a26:	2201      	movs	r2, #1
 8009a28:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009a30:	4b0d      	ldr	r3, [pc, #52]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a32:	2202      	movs	r2, #2
 8009a34:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009a36:	4b0c      	ldr	r3, [pc, #48]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009a3c:	480a      	ldr	r0, [pc, #40]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a3e:	f7f8 f846 	bl	8001ace <HAL_HCD_Init>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009a48:	f7f7 f8d8 	bl	8000bfc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009a4c:	4806      	ldr	r0, [pc, #24]	@ (8009a68 <USBH_LL_Init+0x74>)
 8009a4e:	f7f8 fca7 	bl	80023a0 <HAL_HCD_GetCurrentFrame>
 8009a52:	4603      	mov	r3, r0
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7fe fee6 	bl	8008828 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20000628 	.word	0x20000628

08009a6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7f8 fc14 	bl	80022b0 <HAL_HCD_Start>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 f95e 	bl	8009d50 <USBH_Get_USB_Status>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7f8 fc1c 	bl	80022f6 <HAL_HCD_Stop>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f000 f943 	bl	8009d50 <USBH_Get_USB_Status>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7f8 fc66 	bl	80023bc <HAL_HCD_GetCurrentSpeed>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d00c      	beq.n	8009b10 <USBH_LL_GetSpeed+0x38>
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d80d      	bhi.n	8009b16 <USBH_LL_GetSpeed+0x3e>
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <USBH_LL_GetSpeed+0x2c>
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d003      	beq.n	8009b0a <USBH_LL_GetSpeed+0x32>
 8009b02:	e008      	b.n	8009b16 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
    break;
 8009b08:	e008      	b.n	8009b1c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b0e:	e005      	b.n	8009b1c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009b10:	2302      	movs	r3, #2
 8009b12:	73fb      	strb	r3, [r7, #15]
    break;
 8009b14:	e002      	b.n	8009b1c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009b16:	2301      	movs	r3, #1
 8009b18:	73fb      	strb	r3, [r7, #15]
    break;
 8009b1a:	bf00      	nop
  }
  return  speed;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7f8 fbf7 	bl	8002330 <HAL_HCD_ResetPort>
 8009b42:	4603      	mov	r3, r0
 8009b44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b46:	7bfb      	ldrb	r3, [r7, #15]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 f901 	bl	8009d50 <USBH_Get_USB_Status>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	460b      	mov	r3, r1
 8009b66:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009b6e:	78fa      	ldrb	r2, [r7, #3]
 8009b70:	4611      	mov	r1, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f8 fbff 	bl	8002376 <HAL_HCD_HC_GetXferCount>
 8009b78:	4603      	mov	r3, r0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009b82:	b590      	push	{r4, r7, lr}
 8009b84:	b089      	sub	sp, #36	@ 0x24
 8009b86:	af04      	add	r7, sp, #16
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	4608      	mov	r0, r1
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	461a      	mov	r2, r3
 8009b90:	4603      	mov	r3, r0
 8009b92:	70fb      	strb	r3, [r7, #3]
 8009b94:	460b      	mov	r3, r1
 8009b96:	70bb      	strb	r3, [r7, #2]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009baa:	787c      	ldrb	r4, [r7, #1]
 8009bac:	78ba      	ldrb	r2, [r7, #2]
 8009bae:	78f9      	ldrb	r1, [r7, #3]
 8009bb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009bb2:	9302      	str	r3, [sp, #8]
 8009bb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	f7f7 ffeb 	bl	8001b9c <HAL_HCD_HC_Init>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f8bf 	bl	8009d50 <USBH_Get_USB_Status>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd90      	pop	{r4, r7, pc}

08009be0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009bfa:	78fa      	ldrb	r2, [r7, #3]
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7f8 f884 	bl	8001d0c <HAL_HCD_HC_Halt>
 8009c04:	4603      	mov	r3, r0
 8009c06:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 f8a0 	bl	8009d50 <USBH_Get_USB_Status>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009c1e:	b590      	push	{r4, r7, lr}
 8009c20:	b089      	sub	sp, #36	@ 0x24
 8009c22:	af04      	add	r7, sp, #16
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	4608      	mov	r0, r1
 8009c28:	4611      	mov	r1, r2
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	70fb      	strb	r3, [r7, #3]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70bb      	strb	r3, [r7, #2]
 8009c34:	4613      	mov	r3, r2
 8009c36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009c46:	787c      	ldrb	r4, [r7, #1]
 8009c48:	78ba      	ldrb	r2, [r7, #2]
 8009c4a:	78f9      	ldrb	r1, [r7, #3]
 8009c4c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c50:	9303      	str	r3, [sp, #12]
 8009c52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009c54:	9302      	str	r3, [sp, #8]
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c5e:	9300      	str	r3, [sp, #0]
 8009c60:	4623      	mov	r3, r4
 8009c62:	f7f8 f877 	bl	8001d54 <HAL_HCD_HC_SubmitRequest>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 f86f 	bl	8009d50 <USBH_Get_USB_Status>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd90      	pop	{r4, r7, pc}

08009c80 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009c92:	78fa      	ldrb	r2, [r7, #3]
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f8 fb58 	bl	800234c <HAL_HCD_HC_GetURBState>
 8009c9c:	4603      	mov	r3, r0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b082      	sub	sp, #8
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	460b      	mov	r3, r1
 8009cb0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d103      	bne.n	8009cc4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009cbc:	78fb      	ldrb	r3, [r7, #3]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 f872 	bl	8009da8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009cc4:	20c8      	movs	r0, #200	@ 0xc8
 8009cc6:	f7f7 fbf5 	bl	80014b4 <HAL_Delay>
  return USBH_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009cea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	68f9      	ldr	r1, [r7, #12]
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	440b      	add	r3, r1
 8009cfa:	3317      	adds	r3, #23
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d00a      	beq.n	8009d18 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009d02:	78fa      	ldrb	r2, [r7, #3]
 8009d04:	68f9      	ldr	r1, [r7, #12]
 8009d06:	4613      	mov	r3, r2
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	1a9b      	subs	r3, r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	440b      	add	r3, r1
 8009d10:	333c      	adds	r3, #60	@ 0x3c
 8009d12:	78ba      	ldrb	r2, [r7, #2]
 8009d14:	701a      	strb	r2, [r3, #0]
 8009d16:	e009      	b.n	8009d2c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009d18:	78fa      	ldrb	r2, [r7, #3]
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	333d      	adds	r3, #61	@ 0x3d
 8009d28:	78ba      	ldrb	r2, [r7, #2]
 8009d2a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7f7 fbb6 	bl	80014b4 <HAL_Delay>
}
 8009d48:	bf00      	nop
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d5e:	79fb      	ldrb	r3, [r7, #7]
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d817      	bhi.n	8009d94 <USBH_Get_USB_Status+0x44>
 8009d64:	a201      	add	r2, pc, #4	@ (adr r2, 8009d6c <USBH_Get_USB_Status+0x1c>)
 8009d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6a:	bf00      	nop
 8009d6c:	08009d7d 	.word	0x08009d7d
 8009d70:	08009d83 	.word	0x08009d83
 8009d74:	08009d89 	.word	0x08009d89
 8009d78:	08009d8f 	.word	0x08009d8f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d80:	e00b      	b.n	8009d9a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009d82:	2302      	movs	r3, #2
 8009d84:	73fb      	strb	r3, [r7, #15]
    break;
 8009d86:	e008      	b.n	8009d9a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d8c:	e005      	b.n	8009d9a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009d8e:	2302      	movs	r3, #2
 8009d90:	73fb      	strb	r3, [r7, #15]
    break;
 8009d92:	e002      	b.n	8009d9a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009d94:	2302      	movs	r3, #2
 8009d96:	73fb      	strb	r3, [r7, #15]
    break;
 8009d98:	bf00      	nop
  }
  return usb_status;
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	4603      	mov	r3, r0
 8009db0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d102      	bne.n	8009dc2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
 8009dc0:	e001      	b.n	8009dc6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	2101      	movs	r1, #1
 8009dcc:	4803      	ldr	r0, [pc, #12]	@ (8009ddc <MX_DriverVbusFS+0x34>)
 8009dce:	f7f7 fe65 	bl	8001a9c <HAL_GPIO_WritePin>
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	40020800 	.word	0x40020800

08009de0 <malloc>:
 8009de0:	4b02      	ldr	r3, [pc, #8]	@ (8009dec <malloc+0xc>)
 8009de2:	4601      	mov	r1, r0
 8009de4:	6818      	ldr	r0, [r3, #0]
 8009de6:	f000 b82d 	b.w	8009e44 <_malloc_r>
 8009dea:	bf00      	nop
 8009dec:	2000002c 	.word	0x2000002c

08009df0 <free>:
 8009df0:	4b02      	ldr	r3, [pc, #8]	@ (8009dfc <free+0xc>)
 8009df2:	4601      	mov	r1, r0
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	f000 b8f5 	b.w	8009fe4 <_free_r>
 8009dfa:	bf00      	nop
 8009dfc:	2000002c 	.word	0x2000002c

08009e00 <sbrk_aligned>:
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	4e0f      	ldr	r6, [pc, #60]	@ (8009e40 <sbrk_aligned+0x40>)
 8009e04:	460c      	mov	r4, r1
 8009e06:	6831      	ldr	r1, [r6, #0]
 8009e08:	4605      	mov	r5, r0
 8009e0a:	b911      	cbnz	r1, 8009e12 <sbrk_aligned+0x12>
 8009e0c:	f000 f8ae 	bl	8009f6c <_sbrk_r>
 8009e10:	6030      	str	r0, [r6, #0]
 8009e12:	4621      	mov	r1, r4
 8009e14:	4628      	mov	r0, r5
 8009e16:	f000 f8a9 	bl	8009f6c <_sbrk_r>
 8009e1a:	1c43      	adds	r3, r0, #1
 8009e1c:	d103      	bne.n	8009e26 <sbrk_aligned+0x26>
 8009e1e:	f04f 34ff 	mov.w	r4, #4294967295
 8009e22:	4620      	mov	r0, r4
 8009e24:	bd70      	pop	{r4, r5, r6, pc}
 8009e26:	1cc4      	adds	r4, r0, #3
 8009e28:	f024 0403 	bic.w	r4, r4, #3
 8009e2c:	42a0      	cmp	r0, r4
 8009e2e:	d0f8      	beq.n	8009e22 <sbrk_aligned+0x22>
 8009e30:	1a21      	subs	r1, r4, r0
 8009e32:	4628      	mov	r0, r5
 8009e34:	f000 f89a 	bl	8009f6c <_sbrk_r>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d1f2      	bne.n	8009e22 <sbrk_aligned+0x22>
 8009e3c:	e7ef      	b.n	8009e1e <sbrk_aligned+0x1e>
 8009e3e:	bf00      	nop
 8009e40:	20000a08 	.word	0x20000a08

08009e44 <_malloc_r>:
 8009e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e48:	1ccd      	adds	r5, r1, #3
 8009e4a:	f025 0503 	bic.w	r5, r5, #3
 8009e4e:	3508      	adds	r5, #8
 8009e50:	2d0c      	cmp	r5, #12
 8009e52:	bf38      	it	cc
 8009e54:	250c      	movcc	r5, #12
 8009e56:	2d00      	cmp	r5, #0
 8009e58:	4606      	mov	r6, r0
 8009e5a:	db01      	blt.n	8009e60 <_malloc_r+0x1c>
 8009e5c:	42a9      	cmp	r1, r5
 8009e5e:	d904      	bls.n	8009e6a <_malloc_r+0x26>
 8009e60:	230c      	movs	r3, #12
 8009e62:	6033      	str	r3, [r6, #0]
 8009e64:	2000      	movs	r0, #0
 8009e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f40 <_malloc_r+0xfc>
 8009e6e:	f000 f869 	bl	8009f44 <__malloc_lock>
 8009e72:	f8d8 3000 	ldr.w	r3, [r8]
 8009e76:	461c      	mov	r4, r3
 8009e78:	bb44      	cbnz	r4, 8009ecc <_malloc_r+0x88>
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	4630      	mov	r0, r6
 8009e7e:	f7ff ffbf 	bl	8009e00 <sbrk_aligned>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	4604      	mov	r4, r0
 8009e86:	d158      	bne.n	8009f3a <_malloc_r+0xf6>
 8009e88:	f8d8 4000 	ldr.w	r4, [r8]
 8009e8c:	4627      	mov	r7, r4
 8009e8e:	2f00      	cmp	r7, #0
 8009e90:	d143      	bne.n	8009f1a <_malloc_r+0xd6>
 8009e92:	2c00      	cmp	r4, #0
 8009e94:	d04b      	beq.n	8009f2e <_malloc_r+0xea>
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	4639      	mov	r1, r7
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	eb04 0903 	add.w	r9, r4, r3
 8009ea0:	f000 f864 	bl	8009f6c <_sbrk_r>
 8009ea4:	4581      	cmp	r9, r0
 8009ea6:	d142      	bne.n	8009f2e <_malloc_r+0xea>
 8009ea8:	6821      	ldr	r1, [r4, #0]
 8009eaa:	1a6d      	subs	r5, r5, r1
 8009eac:	4629      	mov	r1, r5
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f7ff ffa6 	bl	8009e00 <sbrk_aligned>
 8009eb4:	3001      	adds	r0, #1
 8009eb6:	d03a      	beq.n	8009f2e <_malloc_r+0xea>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	442b      	add	r3, r5
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8009ec2:	685a      	ldr	r2, [r3, #4]
 8009ec4:	bb62      	cbnz	r2, 8009f20 <_malloc_r+0xdc>
 8009ec6:	f8c8 7000 	str.w	r7, [r8]
 8009eca:	e00f      	b.n	8009eec <_malloc_r+0xa8>
 8009ecc:	6822      	ldr	r2, [r4, #0]
 8009ece:	1b52      	subs	r2, r2, r5
 8009ed0:	d420      	bmi.n	8009f14 <_malloc_r+0xd0>
 8009ed2:	2a0b      	cmp	r2, #11
 8009ed4:	d917      	bls.n	8009f06 <_malloc_r+0xc2>
 8009ed6:	1961      	adds	r1, r4, r5
 8009ed8:	42a3      	cmp	r3, r4
 8009eda:	6025      	str	r5, [r4, #0]
 8009edc:	bf18      	it	ne
 8009ede:	6059      	strne	r1, [r3, #4]
 8009ee0:	6863      	ldr	r3, [r4, #4]
 8009ee2:	bf08      	it	eq
 8009ee4:	f8c8 1000 	streq.w	r1, [r8]
 8009ee8:	5162      	str	r2, [r4, r5]
 8009eea:	604b      	str	r3, [r1, #4]
 8009eec:	4630      	mov	r0, r6
 8009eee:	f000 f82f 	bl	8009f50 <__malloc_unlock>
 8009ef2:	f104 000b 	add.w	r0, r4, #11
 8009ef6:	1d23      	adds	r3, r4, #4
 8009ef8:	f020 0007 	bic.w	r0, r0, #7
 8009efc:	1ac2      	subs	r2, r0, r3
 8009efe:	bf1c      	itt	ne
 8009f00:	1a1b      	subne	r3, r3, r0
 8009f02:	50a3      	strne	r3, [r4, r2]
 8009f04:	e7af      	b.n	8009e66 <_malloc_r+0x22>
 8009f06:	6862      	ldr	r2, [r4, #4]
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	bf0c      	ite	eq
 8009f0c:	f8c8 2000 	streq.w	r2, [r8]
 8009f10:	605a      	strne	r2, [r3, #4]
 8009f12:	e7eb      	b.n	8009eec <_malloc_r+0xa8>
 8009f14:	4623      	mov	r3, r4
 8009f16:	6864      	ldr	r4, [r4, #4]
 8009f18:	e7ae      	b.n	8009e78 <_malloc_r+0x34>
 8009f1a:	463c      	mov	r4, r7
 8009f1c:	687f      	ldr	r7, [r7, #4]
 8009f1e:	e7b6      	b.n	8009e8e <_malloc_r+0x4a>
 8009f20:	461a      	mov	r2, r3
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	d1fb      	bne.n	8009f20 <_malloc_r+0xdc>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	6053      	str	r3, [r2, #4]
 8009f2c:	e7de      	b.n	8009eec <_malloc_r+0xa8>
 8009f2e:	230c      	movs	r3, #12
 8009f30:	6033      	str	r3, [r6, #0]
 8009f32:	4630      	mov	r0, r6
 8009f34:	f000 f80c 	bl	8009f50 <__malloc_unlock>
 8009f38:	e794      	b.n	8009e64 <_malloc_r+0x20>
 8009f3a:	6005      	str	r5, [r0, #0]
 8009f3c:	e7d6      	b.n	8009eec <_malloc_r+0xa8>
 8009f3e:	bf00      	nop
 8009f40:	20000a0c 	.word	0x20000a0c

08009f44 <__malloc_lock>:
 8009f44:	4801      	ldr	r0, [pc, #4]	@ (8009f4c <__malloc_lock+0x8>)
 8009f46:	f000 b84b 	b.w	8009fe0 <__retarget_lock_acquire_recursive>
 8009f4a:	bf00      	nop
 8009f4c:	20000b4c 	.word	0x20000b4c

08009f50 <__malloc_unlock>:
 8009f50:	4801      	ldr	r0, [pc, #4]	@ (8009f58 <__malloc_unlock+0x8>)
 8009f52:	f000 b846 	b.w	8009fe2 <__retarget_lock_release_recursive>
 8009f56:	bf00      	nop
 8009f58:	20000b4c 	.word	0x20000b4c

08009f5c <memset>:
 8009f5c:	4402      	add	r2, r0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d100      	bne.n	8009f66 <memset+0xa>
 8009f64:	4770      	bx	lr
 8009f66:	f803 1b01 	strb.w	r1, [r3], #1
 8009f6a:	e7f9      	b.n	8009f60 <memset+0x4>

08009f6c <_sbrk_r>:
 8009f6c:	b538      	push	{r3, r4, r5, lr}
 8009f6e:	4d06      	ldr	r5, [pc, #24]	@ (8009f88 <_sbrk_r+0x1c>)
 8009f70:	2300      	movs	r3, #0
 8009f72:	4604      	mov	r4, r0
 8009f74:	4608      	mov	r0, r1
 8009f76:	602b      	str	r3, [r5, #0]
 8009f78:	f7f7 f9b8 	bl	80012ec <_sbrk>
 8009f7c:	1c43      	adds	r3, r0, #1
 8009f7e:	d102      	bne.n	8009f86 <_sbrk_r+0x1a>
 8009f80:	682b      	ldr	r3, [r5, #0]
 8009f82:	b103      	cbz	r3, 8009f86 <_sbrk_r+0x1a>
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	bd38      	pop	{r3, r4, r5, pc}
 8009f88:	20000b48 	.word	0x20000b48

08009f8c <__errno>:
 8009f8c:	4b01      	ldr	r3, [pc, #4]	@ (8009f94 <__errno+0x8>)
 8009f8e:	6818      	ldr	r0, [r3, #0]
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	2000002c 	.word	0x2000002c

08009f98 <__libc_init_array>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8009fd0 <__libc_init_array+0x38>)
 8009f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8009fd4 <__libc_init_array+0x3c>)
 8009f9e:	1b64      	subs	r4, r4, r5
 8009fa0:	10a4      	asrs	r4, r4, #2
 8009fa2:	2600      	movs	r6, #0
 8009fa4:	42a6      	cmp	r6, r4
 8009fa6:	d109      	bne.n	8009fbc <__libc_init_array+0x24>
 8009fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8009fd8 <__libc_init_array+0x40>)
 8009faa:	4c0c      	ldr	r4, [pc, #48]	@ (8009fdc <__libc_init_array+0x44>)
 8009fac:	f000 f864 	bl	800a078 <_init>
 8009fb0:	1b64      	subs	r4, r4, r5
 8009fb2:	10a4      	asrs	r4, r4, #2
 8009fb4:	2600      	movs	r6, #0
 8009fb6:	42a6      	cmp	r6, r4
 8009fb8:	d105      	bne.n	8009fc6 <__libc_init_array+0x2e>
 8009fba:	bd70      	pop	{r4, r5, r6, pc}
 8009fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc0:	4798      	blx	r3
 8009fc2:	3601      	adds	r6, #1
 8009fc4:	e7ee      	b.n	8009fa4 <__libc_init_array+0xc>
 8009fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fca:	4798      	blx	r3
 8009fcc:	3601      	adds	r6, #1
 8009fce:	e7f2      	b.n	8009fb6 <__libc_init_array+0x1e>
 8009fd0:	0800a0b4 	.word	0x0800a0b4
 8009fd4:	0800a0b4 	.word	0x0800a0b4
 8009fd8:	0800a0b4 	.word	0x0800a0b4
 8009fdc:	0800a0b8 	.word	0x0800a0b8

08009fe0 <__retarget_lock_acquire_recursive>:
 8009fe0:	4770      	bx	lr

08009fe2 <__retarget_lock_release_recursive>:
 8009fe2:	4770      	bx	lr

08009fe4 <_free_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	2900      	cmp	r1, #0
 8009fea:	d041      	beq.n	800a070 <_free_r+0x8c>
 8009fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ff0:	1f0c      	subs	r4, r1, #4
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	bfb8      	it	lt
 8009ff6:	18e4      	addlt	r4, r4, r3
 8009ff8:	f7ff ffa4 	bl	8009f44 <__malloc_lock>
 8009ffc:	4a1d      	ldr	r2, [pc, #116]	@ (800a074 <_free_r+0x90>)
 8009ffe:	6813      	ldr	r3, [r2, #0]
 800a000:	b933      	cbnz	r3, 800a010 <_free_r+0x2c>
 800a002:	6063      	str	r3, [r4, #4]
 800a004:	6014      	str	r4, [r2, #0]
 800a006:	4628      	mov	r0, r5
 800a008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a00c:	f7ff bfa0 	b.w	8009f50 <__malloc_unlock>
 800a010:	42a3      	cmp	r3, r4
 800a012:	d908      	bls.n	800a026 <_free_r+0x42>
 800a014:	6820      	ldr	r0, [r4, #0]
 800a016:	1821      	adds	r1, r4, r0
 800a018:	428b      	cmp	r3, r1
 800a01a:	bf01      	itttt	eq
 800a01c:	6819      	ldreq	r1, [r3, #0]
 800a01e:	685b      	ldreq	r3, [r3, #4]
 800a020:	1809      	addeq	r1, r1, r0
 800a022:	6021      	streq	r1, [r4, #0]
 800a024:	e7ed      	b.n	800a002 <_free_r+0x1e>
 800a026:	461a      	mov	r2, r3
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	b10b      	cbz	r3, 800a030 <_free_r+0x4c>
 800a02c:	42a3      	cmp	r3, r4
 800a02e:	d9fa      	bls.n	800a026 <_free_r+0x42>
 800a030:	6811      	ldr	r1, [r2, #0]
 800a032:	1850      	adds	r0, r2, r1
 800a034:	42a0      	cmp	r0, r4
 800a036:	d10b      	bne.n	800a050 <_free_r+0x6c>
 800a038:	6820      	ldr	r0, [r4, #0]
 800a03a:	4401      	add	r1, r0
 800a03c:	1850      	adds	r0, r2, r1
 800a03e:	4283      	cmp	r3, r0
 800a040:	6011      	str	r1, [r2, #0]
 800a042:	d1e0      	bne.n	800a006 <_free_r+0x22>
 800a044:	6818      	ldr	r0, [r3, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	6053      	str	r3, [r2, #4]
 800a04a:	4408      	add	r0, r1
 800a04c:	6010      	str	r0, [r2, #0]
 800a04e:	e7da      	b.n	800a006 <_free_r+0x22>
 800a050:	d902      	bls.n	800a058 <_free_r+0x74>
 800a052:	230c      	movs	r3, #12
 800a054:	602b      	str	r3, [r5, #0]
 800a056:	e7d6      	b.n	800a006 <_free_r+0x22>
 800a058:	6820      	ldr	r0, [r4, #0]
 800a05a:	1821      	adds	r1, r4, r0
 800a05c:	428b      	cmp	r3, r1
 800a05e:	bf04      	itt	eq
 800a060:	6819      	ldreq	r1, [r3, #0]
 800a062:	685b      	ldreq	r3, [r3, #4]
 800a064:	6063      	str	r3, [r4, #4]
 800a066:	bf04      	itt	eq
 800a068:	1809      	addeq	r1, r1, r0
 800a06a:	6021      	streq	r1, [r4, #0]
 800a06c:	6054      	str	r4, [r2, #4]
 800a06e:	e7ca      	b.n	800a006 <_free_r+0x22>
 800a070:	bd38      	pop	{r3, r4, r5, pc}
 800a072:	bf00      	nop
 800a074:	20000a0c 	.word	0x20000a0c

0800a078 <_init>:
 800a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a07a:	bf00      	nop
 800a07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a07e:	bc08      	pop	{r3}
 800a080:	469e      	mov	lr, r3
 800a082:	4770      	bx	lr

0800a084 <_fini>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	bf00      	nop
 800a088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a08a:	bc08      	pop	{r3}
 800a08c:	469e      	mov	lr, r3
 800a08e:	4770      	bx	lr
